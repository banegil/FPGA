   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 1698              		.align	2
 1699              		.global	tmr_set_prescaler
 1701              	tmr_set_prescaler:
 1702              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   4:../timer.c    **** *********************************************************************************************/
   5:../timer.c    **** 
   6:../timer.c    **** /*--- ficheros de cabecera ---*/
   7:../timer.c    **** #include "44b.h"
   8:../timer.c    **** #include "timer.h"
   9:../timer.c    **** 
  10:../timer.c    **** int tmr_set_prescaler(int p, int  value)
  11:../timer.c    **** {
 1703              		.loc 1 11 0
 1704              		.cfi_startproc
 1705              		@ Function supports interworking.
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708 0000 0DC0A0E1 		mov	ip, sp
 1709              	.LCFI0:
 1710              		.cfi_def_cfa_register 12
 1711 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1712 0008 04B04CE2 		sub	fp, ip, #4
 1713              		.cfi_offset 14, -8
 1714              		.cfi_offset 13, -12
 1715              		.cfi_offset 11, -16
 1716              	.LCFI1:
 1717              		.cfi_def_cfa 11, 4
 1718 000c 10D04DE2 		sub	sp, sp, #16
 1719 0010 18000BE5 		str	r0, [fp, #-24]
 1720 0014 1C100BE5 		str	r1, [fp, #-28]
  12:../timer.c    **** 	int offset = p*8;
 1721              		.loc 1 12 0
 1722 0018 18301BE5 		ldr	r3, [fp, #-24]
 1723 001c 8331A0E1 		mov	r3, r3, asl #3
 1724 0020 10300BE5 		str	r3, [fp, #-16]
  13:../timer.c    **** 	value &= 0xFF;
 1725              		.loc 1 13 0
 1726 0024 1C301BE5 		ldr	r3, [fp, #-28]
 1727 0028 FF3003E2 		and	r3, r3, #255
 1728 002c 1C300BE5 		str	r3, [fp, #-28]
  14:../timer.c    **** 
  15:../timer.c    **** 	if (p < 0 || p > 3)
 1729              		.loc 1 15 0
 1730 0030 18301BE5 		ldr	r3, [fp, #-24]
 1731 0034 000053E3 		cmp	r3, #0
 1732 0038 020000BA 		blt	.L2
 1733              		.loc 1 15 0 is_stmt 0 discriminator 1
 1734 003c 18301BE5 		ldr	r3, [fp, #-24]
 1735 0040 030053E3 		cmp	r3, #3
 1736 0044 010000DA 		ble	.L3
 1737              	.L2:
  16:../timer.c    **** 		return -1;
 1738              		.loc 1 16 0 is_stmt 1
 1739 0048 0030E0E3 		mvn	r3, #0
 1740 004c 110000EA 		b	.L4
 1741              	.L3:
  17:../timer.c    **** 
  18:../timer.c    **** 	//COMPLETAR: escribir el valor value a partir de la posición offset en el
  19:../timer.c    **** 	//registro rTCFG0, para establecer el valor de pre-escalado del módulo p
  20:../timer.c    **** 	rTCFG0 &= ~(0XFF << offset);
 1742              		.loc 1 20 0
 1743 0050 50309FE5 		ldr	r3, .L5
 1744 0054 4C209FE5 		ldr	r2, .L5
 1745 0058 001092E5 		ldr	r1, [r2, #0]
 1746 005c FF00A0E3 		mov	r0, #255
 1747 0060 10201BE5 		ldr	r2, [fp, #-16]
 1748 0064 1022A0E1 		mov	r2, r0, asl r2
 1749 0068 0220E0E1 		mvn	r2, r2
 1750 006c 022001E0 		and	r2, r1, r2
 1751 0070 002083E5 		str	r2, [r3, #0]
  21:../timer.c    **** 	rTCFG0 |= (value << offset);
 1752              		.loc 1 21 0
 1753 0074 2C309FE5 		ldr	r3, .L5
 1754 0078 28209FE5 		ldr	r2, .L5
 1755 007c 001092E5 		ldr	r1, [r2, #0]
 1756 0080 1C001BE5 		ldr	r0, [fp, #-28]
 1757 0084 10201BE5 		ldr	r2, [fp, #-16]
 1758 0088 1022A0E1 		mov	r2, r0, asl r2
 1759 008c 022081E1 		orr	r2, r1, r2
 1760 0090 002083E5 		str	r2, [r3, #0]
  22:../timer.c    **** 	return 0;
 1761              		.loc 1 22 0
 1762 0094 0030A0E3 		mov	r3, #0
 1763              	.L4:
  23:../timer.c    **** }
 1764              		.loc 1 23 0
 1765 0098 0300A0E1 		mov	r0, r3
 1766 009c 0CD04BE2 		sub	sp, fp, #12
 1767 00a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1768 00a4 1EFF2FE1 		bx	lr
 1769              	.L6:
 1770              		.align	2
 1771              	.L5:
 1772 00a8 0000D501 		.word	30736384
 1773              		.cfi_endproc
 1774              	.LFE0:
 1776              		.align	2
 1777              		.global	tmr_set_divider
 1779              	tmr_set_divider:
 1780              	.LFB1:
  24:../timer.c    **** 
  25:../timer.c    **** int tmr_set_divider(int d, enum tmr_div div)
  26:../timer.c    **** {
 1781              		.loc 1 26 0
 1782              		.cfi_startproc
 1783              		@ Function supports interworking.
 1784              		@ args = 0, pretend = 0, frame = 16
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786 00ac 0DC0A0E1 		mov	ip, sp
 1787              	.LCFI2:
 1788              		.cfi_def_cfa_register 12
 1789 00b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1790 00b4 04B04CE2 		sub	fp, ip, #4
 1791              		.cfi_offset 14, -8
 1792              		.cfi_offset 13, -12
 1793              		.cfi_offset 11, -16
 1794              	.LCFI3:
 1795              		.cfi_def_cfa 11, 4
 1796 00b8 10D04DE2 		sub	sp, sp, #16
 1797 00bc 18000BE5 		str	r0, [fp, #-24]
 1798 00c0 0130A0E1 		mov	r3, r1
 1799 00c4 19304BE5 		strb	r3, [fp, #-25]
  27:../timer.c    **** 	//int ret = 0;
  28:../timer.c    **** 	int pos = d*4;
 1800              		.loc 1 28 0
 1801 00c8 18301BE5 		ldr	r3, [fp, #-24]
 1802 00cc 0331A0E1 		mov	r3, r3, asl #2
 1803 00d0 10300BE5 		str	r3, [fp, #-16]
  29:../timer.c    **** 
  30:../timer.c    **** 	if ((d < 0 || d > 5) ||
 1804              		.loc 1 30 0
 1805 00d4 18301BE5 		ldr	r3, [fp, #-24]
 1806 00d8 000053E3 		cmp	r3, #0
 1807 00dc 140000BA 		blt	.L8
 1808              		.loc 1 30 0 is_stmt 0 discriminator 1
 1809 00e0 18301BE5 		ldr	r3, [fp, #-24]
 1810 00e4 050053E3 		cmp	r3, #5
 1811 00e8 110000CA 		bgt	.L8
 1812 00ec 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1813 00f0 040053E3 		cmp	r3, #4
 1814 00f4 0200001A 		bne	.L9
  31:../timer.c    **** 			(div == D1_32 && d > 3) ||
 1815              		.loc 1 31 0 is_stmt 1
 1816 00f8 18301BE5 		ldr	r3, [fp, #-24]
 1817 00fc 030053E3 		cmp	r3, #3
 1818 0100 0B0000CA 		bgt	.L8
 1819              	.L9:
 1820              		.loc 1 31 0 is_stmt 0 discriminator 1
 1821 0104 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1822 0108 050053E3 		cmp	r3, #5
 1823 010c 0200001A 		bne	.L10
  32:../timer.c    **** 			(div == EXTCLK && d != 5) ||
 1824              		.loc 1 32 0 is_stmt 1
 1825 0110 18301BE5 		ldr	r3, [fp, #-24]
 1826 0114 050053E3 		cmp	r3, #5
 1827 0118 0500001A 		bne	.L8
 1828              	.L10:
 1829              		.loc 1 32 0 is_stmt 0 discriminator 1
 1830 011c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1831 0120 060053E3 		cmp	r3, #6
 1832 0124 0400001A 		bne	.L11
  33:../timer.c    **** 			(div == TCLK && d != 4))
 1833              		.loc 1 33 0 is_stmt 1
 1834 0128 18301BE5 		ldr	r3, [fp, #-24]
 1835 012c 040053E3 		cmp	r3, #4
 1836 0130 0100000A 		beq	.L11
 1837              	.L8:
  34:../timer.c    **** 		return -1;
 1838              		.loc 1 34 0
 1839 0134 0030E0E3 		mvn	r3, #0
 1840 0138 190000EA 		b	.L12
 1841              	.L11:
  35:../timer.c    **** 
  36:../timer.c    **** 	if (div == EXTCLK || div == TCLK)
 1842              		.loc 1 36 0
 1843 013c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1844 0140 050053E3 		cmp	r3, #5
 1845 0144 0200000A 		beq	.L13
 1846              		.loc 1 36 0 is_stmt 0 discriminator 1
 1847 0148 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1848 014c 060053E3 		cmp	r3, #6
 1849 0150 0100001A 		bne	.L14
 1850              	.L13:
  37:../timer.c    **** 		div = 4;
 1851              		.loc 1 37 0 is_stmt 1
 1852 0154 0430A0E3 		mov	r3, #4
 1853 0158 19304BE5 		strb	r3, [fp, #-25]
 1854              	.L14:
  38:../timer.c    **** 
  39:../timer.c    **** 	//COMPLETAR: escribir el valor div a partir de la posición pos en el
  40:../timer.c    **** 	//registro rTCFG1 para establecer el valor para el divisor d
  41:../timer.c    **** 	rTCFG1 &= ~(0XF << pos);
 1855              		.loc 1 41 0
 1856 015c 50309FE5 		ldr	r3, .L15
 1857 0160 4C209FE5 		ldr	r2, .L15
 1858 0164 001092E5 		ldr	r1, [r2, #0]
 1859 0168 0F00A0E3 		mov	r0, #15
 1860 016c 10201BE5 		ldr	r2, [fp, #-16]
 1861 0170 1022A0E1 		mov	r2, r0, asl r2
 1862 0174 0220E0E1 		mvn	r2, r2
 1863 0178 022001E0 		and	r2, r1, r2
 1864 017c 002083E5 		str	r2, [r3, #0]
  42:../timer.c    **** 	rTCFG1 |= (div << pos);
 1865              		.loc 1 42 0
 1866 0180 2C309FE5 		ldr	r3, .L15
 1867 0184 28209FE5 		ldr	r2, .L15
 1868 0188 001092E5 		ldr	r1, [r2, #0]
 1869 018c 19005BE5 		ldrb	r0, [fp, #-25]	@ zero_extendqisi2
 1870 0190 10201BE5 		ldr	r2, [fp, #-16]
 1871 0194 1022A0E1 		mov	r2, r0, asl r2
 1872 0198 022081E1 		orr	r2, r1, r2
 1873 019c 002083E5 		str	r2, [r3, #0]
  43:../timer.c    **** 	return 0;
 1874              		.loc 1 43 0
 1875 01a0 0030A0E3 		mov	r3, #0
 1876              	.L12:
  44:../timer.c    **** }
 1877              		.loc 1 44 0
 1878 01a4 0300A0E1 		mov	r0, r3
 1879 01a8 0CD04BE2 		sub	sp, fp, #12
 1880 01ac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1881 01b0 1EFF2FE1 		bx	lr
 1882              	.L16:
 1883              		.align	2
 1884              	.L15:
 1885 01b4 0400D501 		.word	30736388
 1886              		.cfi_endproc
 1887              	.LFE1:
 1889              		.align	2
 1890              		.global	tmr_set_count
 1892              	tmr_set_count:
 1893              	.LFB2:
  45:../timer.c    **** 
  46:../timer.c    **** int tmr_set_count(enum tmr_timer t, int count, int cmp)
  47:../timer.c    **** {
 1894              		.loc 1 47 0
 1895              		.cfi_startproc
 1896              		@ Function supports interworking.
 1897              		@ args = 0, pretend = 0, frame = 24
 1898              		@ frame_needed = 1, uses_anonymous_args = 0
 1899 01b8 0DC0A0E1 		mov	ip, sp
 1900              	.LCFI4:
 1901              		.cfi_def_cfa_register 12
 1902 01bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1903 01c0 04B04CE2 		sub	fp, ip, #4
 1904              		.cfi_offset 14, -8
 1905              		.cfi_offset 13, -12
 1906              		.cfi_offset 11, -16
 1907              	.LCFI5:
 1908              		.cfi_def_cfa 11, 4
 1909 01c4 18D04DE2 		sub	sp, sp, #24
 1910 01c8 0030A0E1 		mov	r3, r0
 1911 01cc 1C100BE5 		str	r1, [fp, #-28]
 1912 01d0 20200BE5 		str	r2, [fp, #-32]
 1913 01d4 15304BE5 		strb	r3, [fp, #-21]
  48:../timer.c    **** 	int err = 0;
 1914              		.loc 1 48 0
 1915 01d8 0030A0E3 		mov	r3, #0
 1916 01dc 10300BE5 		str	r3, [fp, #-16]
  49:../timer.c    **** 	switch (t) {
 1917              		.loc 1 49 0
 1918 01e0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1919 01e4 050053E3 		cmp	r3, #5
 1920 01e8 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1921 01ec 2C0000EA 		b	.L18
 1922              	.L25:
 1923 01f0 08020000 		.word	.L19
 1924 01f4 24020000 		.word	.L20
 1925 01f8 40020000 		.word	.L21
 1926 01fc 5C020000 		.word	.L22
 1927 0200 78020000 		.word	.L23
 1928 0204 94020000 		.word	.L24
 1929              	.L19:
  50:../timer.c    **** 		case TIMER0:
  51:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  52:../timer.c    **** 			//comparación cmp en los registros de buffer del timer0 (rTCNTB0 y
  53:../timer.c    **** 			//rTCMPB0)
  54:../timer.c    **** 			rTCNTB0 = count;
 1930              		.loc 1 54 0
 1931 0208 B0309FE5 		ldr	r3, .L27
 1932 020c 1C201BE5 		ldr	r2, [fp, #-28]
 1933 0210 002083E5 		str	r2, [r3, #0]
  55:../timer.c    **** 			rTCMPB0 = cmp;
 1934              		.loc 1 55 0
 1935 0214 A8309FE5 		ldr	r3, .L27+4
 1936 0218 20201BE5 		ldr	r2, [fp, #-32]
 1937 021c 002083E5 		str	r2, [r3, #0]
  56:../timer.c    **** 			 break;
 1938              		.loc 1 56 0
 1939 0220 210000EA 		b	.L26
 1940              	.L20:
  57:../timer.c    **** 		case TIMER1:
  58:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  59:../timer.c    **** 			//comparación cmp en los registros de buffer del timer1 (rTCNTB1 y
  60:../timer.c    **** 			//rTCMPB1)
  61:../timer.c    **** 			rTCNTB1 = count;
 1941              		.loc 1 61 0
 1942 0224 9C309FE5 		ldr	r3, .L27+8
 1943 0228 1C201BE5 		ldr	r2, [fp, #-28]
 1944 022c 002083E5 		str	r2, [r3, #0]
  62:../timer.c    **** 			rTCMPB1 = cmp;
 1945              		.loc 1 62 0
 1946 0230 94309FE5 		ldr	r3, .L27+12
 1947 0234 20201BE5 		ldr	r2, [fp, #-32]
 1948 0238 002083E5 		str	r2, [r3, #0]
  63:../timer.c    **** 			 break;
 1949              		.loc 1 63 0
 1950 023c 1A0000EA 		b	.L26
 1951              	.L21:
  64:../timer.c    **** 		case TIMER2:
  65:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  66:../timer.c    **** 			//comparación cmp en los registros de buffer del timer2 (rTCNTB2 y
  67:../timer.c    **** 			//rTCMPB2)
  68:../timer.c    **** 			rTCNTB2 = count;
 1952              		.loc 1 68 0
 1953 0240 88309FE5 		ldr	r3, .L27+16
 1954 0244 1C201BE5 		ldr	r2, [fp, #-28]
 1955 0248 002083E5 		str	r2, [r3, #0]
  69:../timer.c    **** 			rTCMPB2 = cmp;
 1956              		.loc 1 69 0
 1957 024c 80309FE5 		ldr	r3, .L27+20
 1958 0250 20201BE5 		ldr	r2, [fp, #-32]
 1959 0254 002083E5 		str	r2, [r3, #0]
  70:../timer.c    **** 			 break;
 1960              		.loc 1 70 0
 1961 0258 130000EA 		b	.L26
 1962              	.L22:
  71:../timer.c    **** 		case TIMER3:
  72:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  73:../timer.c    **** 			//comparación cmp en los registros de buffer del timer3 (rTCNTB3 y
  74:../timer.c    **** 			//rTCMPB3)
  75:../timer.c    **** 			rTCNTB3 = count;
 1963              		.loc 1 75 0
 1964 025c 74309FE5 		ldr	r3, .L27+24
 1965 0260 1C201BE5 		ldr	r2, [fp, #-28]
 1966 0264 002083E5 		str	r2, [r3, #0]
  76:../timer.c    **** 			rTCMPB3 = cmp;
 1967              		.loc 1 76 0
 1968 0268 6C309FE5 		ldr	r3, .L27+28
 1969 026c 20201BE5 		ldr	r2, [fp, #-32]
 1970 0270 002083E5 		str	r2, [r3, #0]
  77:../timer.c    **** 			 break;
 1971              		.loc 1 77 0
 1972 0274 0C0000EA 		b	.L26
 1973              	.L23:
  78:../timer.c    **** 		case TIMER4:
  79:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  80:../timer.c    **** 			//comparación cmp en los registros de buffer del timer4 (rTCNTB4 y
  81:../timer.c    **** 			//rTCMPB4)
  82:../timer.c    **** 			rTCNTB4 = count;
 1974              		.loc 1 82 0
 1975 0278 60309FE5 		ldr	r3, .L27+32
 1976 027c 1C201BE5 		ldr	r2, [fp, #-28]
 1977 0280 002083E5 		str	r2, [r3, #0]
  83:../timer.c    **** 			rTCMPB4 = cmp;
 1978              		.loc 1 83 0
 1979 0284 58309FE5 		ldr	r3, .L27+36
 1980 0288 20201BE5 		ldr	r2, [fp, #-32]
 1981 028c 002083E5 		str	r2, [r3, #0]
  84:../timer.c    **** 			 break;
 1982              		.loc 1 84 0
 1983 0290 050000EA 		b	.L26
 1984              	.L24:
  85:../timer.c    **** 		case TIMER5:
  86:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count en el registro de 
  87:../timer.c    **** 			//buffer del timer5 (rTCNTB5)
  88:../timer.c    **** 			rTCNTB5 = count;
 1985              		.loc 1 88 0
 1986 0294 4C309FE5 		ldr	r3, .L27+40
 1987 0298 1C201BE5 		ldr	r2, [fp, #-28]
 1988 029c 002083E5 		str	r2, [r3, #0]
  89:../timer.c    **** 			 break;
 1989              		.loc 1 89 0
 1990 02a0 010000EA 		b	.L26
 1991              	.L18:
  90:../timer.c    **** 		default:
  91:../timer.c    **** 			err = -1;
 1992              		.loc 1 91 0
 1993 02a4 0030E0E3 		mvn	r3, #0
 1994 02a8 10300BE5 		str	r3, [fp, #-16]
 1995              	.L26:
  92:../timer.c    **** 	}
  93:../timer.c    **** 
  94:../timer.c    **** 	return err;
 1996              		.loc 1 94 0
 1997 02ac 10301BE5 		ldr	r3, [fp, #-16]
  95:../timer.c    **** }
 1998              		.loc 1 95 0
 1999 02b0 0300A0E1 		mov	r0, r3
 2000 02b4 0CD04BE2 		sub	sp, fp, #12
 2001 02b8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2002 02bc 1EFF2FE1 		bx	lr
 2003              	.L28:
 2004              		.align	2
 2005              	.L27:
 2006 02c0 0C00D501 		.word	30736396
 2007 02c4 1000D501 		.word	30736400
 2008 02c8 1800D501 		.word	30736408
 2009 02cc 1C00D501 		.word	30736412
 2010 02d0 2400D501 		.word	30736420
 2011 02d4 2800D501 		.word	30736424
 2012 02d8 3000D501 		.word	30736432
 2013 02dc 3400D501 		.word	30736436
 2014 02e0 3C00D501 		.word	30736444
 2015 02e4 4000D501 		.word	30736448
 2016 02e8 4800D501 		.word	30736456
 2017              		.cfi_endproc
 2018              	.LFE2:
 2020              		.align	2
 2021              		.global	tmr_update
 2023              	tmr_update:
 2024              	.LFB3:
  96:../timer.c    **** 
  97:../timer.c    **** int tmr_update(enum tmr_timer t)
  98:../timer.c    **** {
 2025              		.loc 1 98 0
 2026              		.cfi_startproc
 2027              		@ Function supports interworking.
 2028              		@ args = 0, pretend = 0, frame = 16
 2029              		@ frame_needed = 1, uses_anonymous_args = 0
 2030 02ec 0DC0A0E1 		mov	ip, sp
 2031              	.LCFI6:
 2032              		.cfi_def_cfa_register 12
 2033 02f0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2034 02f4 04B04CE2 		sub	fp, ip, #4
 2035              		.cfi_offset 14, -8
 2036              		.cfi_offset 13, -12
 2037              		.cfi_offset 11, -16
 2038              	.LCFI7:
 2039              		.cfi_def_cfa 11, 4
 2040 02f8 10D04DE2 		sub	sp, sp, #16
 2041 02fc 0030A0E1 		mov	r3, r0
 2042 0300 15304BE5 		strb	r3, [fp, #-21]
  99:../timer.c    **** 	int pos = t*4;
 2043              		.loc 1 99 0
 2044 0304 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2045 0308 0331A0E1 		mov	r3, r3, asl #2
 2046 030c 10300BE5 		str	r3, [fp, #-16]
 100:../timer.c    **** 	if (t > 0)
 2047              		.loc 1 100 0
 2048 0310 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2049 0314 000053E3 		cmp	r3, #0
 2050 0318 0200000A 		beq	.L30
 101:../timer.c    **** 		pos += 4;
 2051              		.loc 1 101 0
 2052 031c 10301BE5 		ldr	r3, [fp, #-16]
 2053 0320 043083E2 		add	r3, r3, #4
 2054 0324 10300BE5 		str	r3, [fp, #-16]
 2055              	.L30:
 102:../timer.c    **** 
 103:../timer.c    **** 	if (t < 0 || t > 5)
 2056              		.loc 1 103 0
 2057 0328 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2058 032c 050053E3 		cmp	r3, #5
 2059 0330 0100009A 		bls	.L31
 104:../timer.c    **** 		return -1;
 2060              		.loc 1 104 0
 2061 0334 0030E0E3 		mvn	r3, #0
 2062 0338 130000EA 		b	.L32
 2063              	.L31:
 105:../timer.c    **** 
 106:../timer.c    **** 	//COMPLETAR: poner a 1 en el registro rTCON el bit indicado por pos 
 107:../timer.c    **** 	// y justo después ponerlo a 0 (deben ser stores distintos, lo hacemos con
 108:../timer.c    **** 	// sentencias C distintas)
 109:../timer.c    **** 	rTCON |= (0x1 << (pos + 1));
 2064              		.loc 1 109 0
 2065 033c 58309FE5 		ldr	r3, .L33
 2066 0340 54209FE5 		ldr	r2, .L33
 2067 0344 001092E5 		ldr	r1, [r2, #0]
 2068 0348 10201BE5 		ldr	r2, [fp, #-16]
 2069 034c 012082E2 		add	r2, r2, #1
 2070 0350 0100A0E3 		mov	r0, #1
 2071 0354 1022A0E1 		mov	r2, r0, asl r2
 2072 0358 022081E1 		orr	r2, r1, r2
 2073 035c 002083E5 		str	r2, [r3, #0]
 110:../timer.c    **** 	rTCON &= ~(0X1 << (pos + 1));
 2074              		.loc 1 110 0
 2075 0360 34309FE5 		ldr	r3, .L33
 2076 0364 30209FE5 		ldr	r2, .L33
 2077 0368 001092E5 		ldr	r1, [r2, #0]
 2078 036c 10201BE5 		ldr	r2, [fp, #-16]
 2079 0370 012082E2 		add	r2, r2, #1
 2080 0374 0100A0E3 		mov	r0, #1
 2081 0378 1022A0E1 		mov	r2, r0, asl r2
 2082 037c 0220E0E1 		mvn	r2, r2
 2083 0380 022001E0 		and	r2, r1, r2
 2084 0384 002083E5 		str	r2, [r3, #0]
 111:../timer.c    **** 
 112:../timer.c    **** 	return 0;
 2085              		.loc 1 112 0
 2086 0388 0030A0E3 		mov	r3, #0
 2087              	.L32:
 113:../timer.c    **** }
 2088              		.loc 1 113 0
 2089 038c 0300A0E1 		mov	r0, r3
 2090 0390 0CD04BE2 		sub	sp, fp, #12
 2091 0394 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2092 0398 1EFF2FE1 		bx	lr
 2093              	.L34:
 2094              		.align	2
 2095              	.L33:
 2096 039c 0800D501 		.word	30736392
 2097              		.cfi_endproc
 2098              	.LFE3:
 2100              		.align	2
 2101              		.global	tmr_set_mode
 2103              	tmr_set_mode:
 2104              	.LFB4:
 114:../timer.c    **** 
 115:../timer.c    **** int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
 116:../timer.c    **** {
 2105              		.loc 1 116 0
 2106              		.cfi_startproc
 2107              		@ Function supports interworking.
 2108              		@ args = 0, pretend = 0, frame = 16
 2109              		@ frame_needed = 1, uses_anonymous_args = 0
 2110 03a0 0DC0A0E1 		mov	ip, sp
 2111              	.LCFI8:
 2112              		.cfi_def_cfa_register 12
 2113 03a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2114 03a8 04B04CE2 		sub	fp, ip, #4
 2115              		.cfi_offset 14, -8
 2116              		.cfi_offset 13, -12
 2117              		.cfi_offset 11, -16
 2118              	.LCFI9:
 2119              		.cfi_def_cfa 11, 4
 2120 03ac 10D04DE2 		sub	sp, sp, #16
 2121 03b0 0020A0E1 		mov	r2, r0
 2122 03b4 0130A0E1 		mov	r3, r1
 2123 03b8 15204BE5 		strb	r2, [fp, #-21]
 2124 03bc 16304BE5 		strb	r3, [fp, #-22]
 117:../timer.c    **** 	int err = 0;
 2125              		.loc 1 117 0
 2126 03c0 0030A0E3 		mov	r3, #0
 2127 03c4 10300BE5 		str	r3, [fp, #-16]
 118:../timer.c    **** 	int pos = t*4;
 2128              		.loc 1 118 0
 2129 03c8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2130 03cc 0331A0E1 		mov	r3, r3, asl #2
 2131 03d0 14300BE5 		str	r3, [fp, #-20]
 119:../timer.c    **** 	if (t > 0)
 2132              		.loc 1 119 0
 2133 03d4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2134 03d8 000053E3 		cmp	r3, #0
 2135 03dc 0200000A 		beq	.L36
 120:../timer.c    **** 		pos += 4;
 2136              		.loc 1 120 0
 2137 03e0 14301BE5 		ldr	r3, [fp, #-20]
 2138 03e4 043083E2 		add	r3, r3, #4
 2139 03e8 14300BE5 		str	r3, [fp, #-20]
 2140              	.L36:
 121:../timer.c    **** 
 122:../timer.c    **** 	if (t < 0 || t > 5)
 2141              		.loc 1 122 0
 2142 03ec 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2143 03f0 050053E3 		cmp	r3, #5
 2144 03f4 0100009A 		bls	.L37
 123:../timer.c    **** 		return -1;
 2145              		.loc 1 123 0
 2146 03f8 0030E0E3 		mvn	r3, #0
 2147 03fc 1D0000EA 		b	.L38
 2148              	.L37:
 124:../timer.c    **** 
 125:../timer.c    **** 	if (mode == ONE_SHOT)
 2149              		.loc 1 125 0
 2150 0400 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2151 0404 000053E3 		cmp	r3, #0
 2152 0408 0A00001A 		bne	.L39
 126:../timer.c    **** 		//COMPLETAR: poner a 0 el bit autoreload a partir de la posición pos (es
 127:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 128:../timer.c    **** 		rTCON &= ~(0X1 << (pos + 3));
 2153              		.loc 1 128 0
 2154 040c 74309FE5 		ldr	r3, .L42
 2155 0410 70209FE5 		ldr	r2, .L42
 2156 0414 001092E5 		ldr	r1, [r2, #0]
 2157 0418 14201BE5 		ldr	r2, [fp, #-20]
 2158 041c 032082E2 		add	r2, r2, #3
 2159 0420 0100A0E3 		mov	r0, #1
 2160 0424 1022A0E1 		mov	r2, r0, asl r2
 2161 0428 0220E0E1 		mvn	r2, r2
 2162 042c 022001E0 		and	r2, r1, r2
 2163 0430 002083E5 		str	r2, [r3, #0]
 2164 0434 0E0000EA 		b	.L40
 2165              	.L39:
 129:../timer.c    **** 	else if (mode == RELOAD)
 2166              		.loc 1 129 0
 2167 0438 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2168 043c 010053E3 		cmp	r3, #1
 2169 0440 0900001A 		bne	.L41
 130:../timer.c    **** 		//COMPLETAR: poner a 1 el bit autoreload a partir de la posición pos (es
 131:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 132:../timer.c    **** 		rTCON |= (0X1 << (pos + 3));
 2170              		.loc 1 132 0
 2171 0444 3C309FE5 		ldr	r3, .L42
 2172 0448 38209FE5 		ldr	r2, .L42
 2173 044c 001092E5 		ldr	r1, [r2, #0]
 2174 0450 14201BE5 		ldr	r2, [fp, #-20]
 2175 0454 032082E2 		add	r2, r2, #3
 2176 0458 0100A0E3 		mov	r0, #1
 2177 045c 1022A0E1 		mov	r2, r0, asl r2
 2178 0460 022081E1 		orr	r2, r1, r2
 2179 0464 002083E5 		str	r2, [r3, #0]
 2180 0468 010000EA 		b	.L40
 2181              	.L41:
 133:../timer.c    **** 	else
 134:../timer.c    **** 		err = -1;
 2182              		.loc 1 134 0
 2183 046c 0030E0E3 		mvn	r3, #0
 2184 0470 10300BE5 		str	r3, [fp, #-16]
 2185              	.L40:
 135:../timer.c    **** 
 136:../timer.c    **** 	return err;
 2186              		.loc 1 136 0
 2187 0474 10301BE5 		ldr	r3, [fp, #-16]
 2188              	.L38:
 137:../timer.c    **** }
 2189              		.loc 1 137 0
 2190 0478 0300A0E1 		mov	r0, r3
 2191 047c 0CD04BE2 		sub	sp, fp, #12
 2192 0480 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2193 0484 1EFF2FE1 		bx	lr
 2194              	.L43:
 2195              		.align	2
 2196              	.L42:
 2197 0488 0800D501 		.word	30736392
 2198              		.cfi_endproc
 2199              	.LFE4:
 2201              		.align	2
 2202              		.global	tmr_start
 2204              	tmr_start:
 2205              	.LFB5:
 138:../timer.c    **** 
 139:../timer.c    **** int tmr_start(enum tmr_timer t)
 140:../timer.c    **** {
 2206              		.loc 1 140 0
 2207              		.cfi_startproc
 2208              		@ Function supports interworking.
 2209              		@ args = 0, pretend = 0, frame = 16
 2210              		@ frame_needed = 1, uses_anonymous_args = 0
 2211 048c 0DC0A0E1 		mov	ip, sp
 2212              	.LCFI10:
 2213              		.cfi_def_cfa_register 12
 2214 0490 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2215 0494 04B04CE2 		sub	fp, ip, #4
 2216              		.cfi_offset 14, -8
 2217              		.cfi_offset 13, -12
 2218              		.cfi_offset 11, -16
 2219              	.LCFI11:
 2220              		.cfi_def_cfa 11, 4
 2221 0498 10D04DE2 		sub	sp, sp, #16
 2222 049c 0030A0E1 		mov	r3, r0
 2223 04a0 15304BE5 		strb	r3, [fp, #-21]
 141:../timer.c    **** 	int pos = t*4;
 2224              		.loc 1 141 0
 2225 04a4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2226 04a8 0331A0E1 		mov	r3, r3, asl #2
 2227 04ac 10300BE5 		str	r3, [fp, #-16]
 142:../timer.c    **** 	if (t > 0)
 2228              		.loc 1 142 0
 2229 04b0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2230 04b4 000053E3 		cmp	r3, #0
 2231 04b8 0200000A 		beq	.L45
 143:../timer.c    **** 		pos += 4;
 2232              		.loc 1 143 0
 2233 04bc 10301BE5 		ldr	r3, [fp, #-16]
 2234 04c0 043083E2 		add	r3, r3, #4
 2235 04c4 10300BE5 		str	r3, [fp, #-16]
 2236              	.L45:
 144:../timer.c    **** 
 145:../timer.c    **** 	if (t < 0 || t > 5)
 2237              		.loc 1 145 0
 2238 04c8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2239 04cc 050053E3 		cmp	r3, #5
 2240 04d0 0100009A 		bls	.L46
 146:../timer.c    **** 		return -1;
 2241              		.loc 1 146 0
 2242 04d4 0030E0E3 		mvn	r3, #0
 2243 04d8 080000EA 		b	.L47
 2244              	.L46:
 147:../timer.c    **** 
 148:../timer.c    **** 	//COMPLETAR: poner a 1 el bit de start a partir de la posición pos en el
 149:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 150:../timer.c    **** 	rTCON |= (0x1 << pos);
 2245              		.loc 1 150 0
 2246 04dc 2C309FE5 		ldr	r3, .L48
 2247 04e0 28209FE5 		ldr	r2, .L48
 2248 04e4 001092E5 		ldr	r1, [r2, #0]
 2249 04e8 0100A0E3 		mov	r0, #1
 2250 04ec 10201BE5 		ldr	r2, [fp, #-16]
 2251 04f0 1022A0E1 		mov	r2, r0, asl r2
 2252 04f4 022081E1 		orr	r2, r1, r2
 2253 04f8 002083E5 		str	r2, [r3, #0]
 151:../timer.c    **** 	return 0;
 2254              		.loc 1 151 0
 2255 04fc 0030A0E3 		mov	r3, #0
 2256              	.L47:
 152:../timer.c    **** }
 2257              		.loc 1 152 0
 2258 0500 0300A0E1 		mov	r0, r3
 2259 0504 0CD04BE2 		sub	sp, fp, #12
 2260 0508 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2261 050c 1EFF2FE1 		bx	lr
 2262              	.L49:
 2263              		.align	2
 2264              	.L48:
 2265 0510 0800D501 		.word	30736392
 2266              		.cfi_endproc
 2267              	.LFE5:
 2269              		.align	2
 2270              		.global	tmr_stop
 2272              	tmr_stop:
 2273              	.LFB6:
 153:../timer.c    **** 
 154:../timer.c    **** int tmr_stop(enum tmr_timer t)
 155:../timer.c    **** {
 2274              		.loc 1 155 0
 2275              		.cfi_startproc
 2276              		@ Function supports interworking.
 2277              		@ args = 0, pretend = 0, frame = 16
 2278              		@ frame_needed = 1, uses_anonymous_args = 0
 2279 0514 0DC0A0E1 		mov	ip, sp
 2280              	.LCFI12:
 2281              		.cfi_def_cfa_register 12
 2282 0518 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2283 051c 04B04CE2 		sub	fp, ip, #4
 2284              		.cfi_offset 14, -8
 2285              		.cfi_offset 13, -12
 2286              		.cfi_offset 11, -16
 2287              	.LCFI13:
 2288              		.cfi_def_cfa 11, 4
 2289 0520 10D04DE2 		sub	sp, sp, #16
 2290 0524 0030A0E1 		mov	r3, r0
 2291 0528 15304BE5 		strb	r3, [fp, #-21]
 156:../timer.c    **** 	int pos = t*4;
 2292              		.loc 1 156 0
 2293 052c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2294 0530 0331A0E1 		mov	r3, r3, asl #2
 2295 0534 10300BE5 		str	r3, [fp, #-16]
 157:../timer.c    **** 	if (t > 0)
 2296              		.loc 1 157 0
 2297 0538 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2298 053c 000053E3 		cmp	r3, #0
 2299 0540 0200000A 		beq	.L51
 158:../timer.c    **** 		pos += 4;
 2300              		.loc 1 158 0
 2301 0544 10301BE5 		ldr	r3, [fp, #-16]
 2302 0548 043083E2 		add	r3, r3, #4
 2303 054c 10300BE5 		str	r3, [fp, #-16]
 2304              	.L51:
 159:../timer.c    **** 
 160:../timer.c    **** 	if (t < 0 || t > 5)
 2305              		.loc 1 160 0
 2306 0550 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2307 0554 050053E3 		cmp	r3, #5
 2308 0558 0100009A 		bls	.L52
 161:../timer.c    **** 		return -1;
 2309              		.loc 1 161 0
 2310 055c 0030E0E3 		mvn	r3, #0
 2311 0560 090000EA 		b	.L53
 2312              	.L52:
 162:../timer.c    **** 
 163:../timer.c    **** 	//COMPLETAR: poner a 0 el bit de start a partir de la posición pos en el
 164:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 165:../timer.c    **** 	rTCON &= ~(0x1 << pos);
 2313              		.loc 1 165 0
 2314 0564 30309FE5 		ldr	r3, .L54
 2315 0568 2C209FE5 		ldr	r2, .L54
 2316 056c 001092E5 		ldr	r1, [r2, #0]
 2317 0570 0100A0E3 		mov	r0, #1
 2318 0574 10201BE5 		ldr	r2, [fp, #-16]
 2319 0578 1022A0E1 		mov	r2, r0, asl r2
 2320 057c 0220E0E1 		mvn	r2, r2
 2321 0580 022001E0 		and	r2, r1, r2
 2322 0584 002083E5 		str	r2, [r3, #0]
 166:../timer.c    **** 	return 0;
 2323              		.loc 1 166 0
 2324 0588 0030A0E3 		mov	r3, #0
 2325              	.L53:
 167:../timer.c    **** }
 2326              		.loc 1 167 0
 2327 058c 0300A0E1 		mov	r0, r3
 2328 0590 0CD04BE2 		sub	sp, fp, #12
 2329 0594 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2330 0598 1EFF2FE1 		bx	lr
 2331              	.L55:
 2332              		.align	2
 2333              	.L54:
 2334 059c 0800D501 		.word	30736392
 2335              		.cfi_endproc
 2336              	.LFE6:
 2338              		.align	2
 2339              		.global	tmr_isrunning
 2341              	tmr_isrunning:
 2342              	.LFB7:
 168:../timer.c    **** 
 169:../timer.c    **** int tmr_isrunning(enum tmr_timer t)
 170:../timer.c    **** {
 2343              		.loc 1 170 0
 2344              		.cfi_startproc
 2345              		@ Function supports interworking.
 2346              		@ args = 0, pretend = 0, frame = 16
 2347              		@ frame_needed = 1, uses_anonymous_args = 0
 2348 05a0 0DC0A0E1 		mov	ip, sp
 2349              	.LCFI14:
 2350              		.cfi_def_cfa_register 12
 2351 05a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2352 05a8 04B04CE2 		sub	fp, ip, #4
 2353              		.cfi_offset 14, -8
 2354              		.cfi_offset 13, -12
 2355              		.cfi_offset 11, -16
 2356              	.LCFI15:
 2357              		.cfi_def_cfa 11, 4
 2358 05ac 10D04DE2 		sub	sp, sp, #16
 2359 05b0 0030A0E1 		mov	r3, r0
 2360 05b4 15304BE5 		strb	r3, [fp, #-21]
 171:../timer.c    **** 	int ret = 0;
 2361              		.loc 1 171 0
 2362 05b8 0030A0E3 		mov	r3, #0
 2363 05bc 10300BE5 		str	r3, [fp, #-16]
 172:../timer.c    **** 	int pos = t*4;
 2364              		.loc 1 172 0
 2365 05c0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2366 05c4 0331A0E1 		mov	r3, r3, asl #2
 2367 05c8 14300BE5 		str	r3, [fp, #-20]
 173:../timer.c    **** 	if (t > 0)
 2368              		.loc 1 173 0
 2369 05cc 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2370 05d0 000053E3 		cmp	r3, #0
 2371 05d4 0200000A 		beq	.L57
 174:../timer.c    **** 		pos += 4;
 2372              		.loc 1 174 0
 2373 05d8 14301BE5 		ldr	r3, [fp, #-20]
 2374 05dc 043083E2 		add	r3, r3, #4
 2375 05e0 14300BE5 		str	r3, [fp, #-20]
 2376              	.L57:
 175:../timer.c    **** 
 176:../timer.c    **** 	if ((t >= 0) && (t <= 5) 
 2377              		.loc 1 176 0
 2378 05e4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2379 05e8 050053E3 		cmp	r3, #5
 2380 05ec 0900008A 		bhi	.L58
 177:../timer.c    **** 			&& (rTCON & (0x1 << pos)))
 2381              		.loc 1 177 0
 2382 05f0 34309FE5 		ldr	r3, .L59
 2383 05f4 002093E5 		ldr	r2, [r3, #0]
 2384 05f8 0110A0E3 		mov	r1, #1
 2385 05fc 14301BE5 		ldr	r3, [fp, #-20]
 2386 0600 1133A0E1 		mov	r3, r1, asl r3
 2387 0604 033002E0 		and	r3, r2, r3
 2388 0608 000053E3 		cmp	r3, #0
 2389 060c 0100000A 		beq	.L58
 178:../timer.c    **** 		ret = 1;
 2390              		.loc 1 178 0
 2391 0610 0130A0E3 		mov	r3, #1
 2392 0614 10300BE5 		str	r3, [fp, #-16]
 2393              	.L58:
 179:../timer.c    **** 
 180:../timer.c    **** 	return ret;
 2394              		.loc 1 180 0
 2395 0618 10301BE5 		ldr	r3, [fp, #-16]
 181:../timer.c    **** }
 2396              		.loc 1 181 0
 2397 061c 0300A0E1 		mov	r0, r3
 2398 0620 0CD04BE2 		sub	sp, fp, #12
 2399 0624 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2400 0628 1EFF2FE1 		bx	lr
 2401              	.L60:
 2402              		.align	2
 2403              	.L59:
 2404 062c 0800D501 		.word	30736392
 2405              		.cfi_endproc
 2406              	.LFE7:
 2408              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1698   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1701   .text:00000000 tmr_set_prescaler
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1772   .text:000000a8 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1776   .text:000000ac $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1779   .text:000000ac tmr_set_divider
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1885   .text:000001b4 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1889   .text:000001b8 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1892   .text:000001b8 tmr_set_count
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1923   .text:000001f0 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:1931   .text:00000208 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2006   .text:000002c0 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2020   .text:000002ec $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2023   .text:000002ec tmr_update
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2096   .text:0000039c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2100   .text:000003a0 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2103   .text:000003a0 tmr_set_mode
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2197   .text:00000488 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2201   .text:0000048c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2204   .text:0000048c tmr_start
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2265   .text:00000510 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2269   .text:00000514 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2272   .text:00000514 tmr_stop
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2334   .text:0000059c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2338   .text:000005a0 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2341   .text:000005a0 tmr_isrunning
C:\Users\USUARI~1\AppData\Local\Temp\ccWZZsQS.s:2404   .text:0000062c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
