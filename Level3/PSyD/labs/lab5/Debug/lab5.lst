
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017e4  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000694  0c1017e4  0c1017e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_abbrev 000002f3  00000000  00000000  00009e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000925  00000000  00000000  0000a16b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   00000487  00000000  00000000  0000aa90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_macinfo 00012c3e  00000000  00000000  0000af17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00000948  00000000  00000000  0001db55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000003d1  00000000  00000000  0001e49d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubtypes 000000cd  00000000  00000000  0001e86e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000080  00000000  00000000  0001e93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  0001e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000002a  00000000  00000000  0001eddb  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000032  00000000  00000000  0001ee05  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00000890  00000000  00000000  0001ee38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
#include <rtc.h>

void isr_tick( void ) __attribute__ ((interrupt ("IRQ")));

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
    rtc_time_t rtc_time;
    
    sys_init();
 c100010:	eb000266 	bl	c1009b0 <sys_init>
    uart0_init();
 c100014:	eb0004c1 	bl	c101320 <uart0_init>
    rtc_init();
 c100018:	eb0000b6 	bl	c1002f8 <rtc_init>

    /************************************/

    rtc_gettime( &rtc_time );
 c10001c:	e24b3014 	sub	r3, fp, #20
 c100020:	e1a00003 	mov	r0, r3
 c100024:	eb0001b2 	bl	c1006f4 <rtc_gettime>

    uart0_puts( "\n\nFecha y hora iniciales: " );
 c100028:	e59f012c 	ldr	r0, [pc, #300]	; c10015c <main+0x15c>
 c10002c:	eb0004fa 	bl	c10141c <uart0_puts>
    uart0_putint( rtc_time.mday );
 c100030:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100034:	e1a00003 	mov	r0, r3
 c100038:	eb00050b 	bl	c10146c <uart0_putint>
    uart0_putchar( '/' );
 c10003c:	e3a0002f 	mov	r0, #47	; 0x2f
 c100040:	eb0004cf 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.mon );
 c100044:	e55b300f 	ldrb	r3, [fp, #-15]
 c100048:	e1a00003 	mov	r0, r3
 c10004c:	eb000506 	bl	c10146c <uart0_putint>
    uart0_putchar( '/' );
 c100050:	e3a0002f 	mov	r0, #47	; 0x2f
 c100054:	eb0004ca 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.year );
 c100058:	e55b300e 	ldrb	r3, [fp, #-14]
 c10005c:	e1a00003 	mov	r0, r3
 c100060:	eb000501 	bl	c10146c <uart0_putint>
    uart0_putchar( ' ' );
 c100064:	e3a00020 	mov	r0, #32
 c100068:	eb0004c5 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.hour );
 c10006c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c100070:	e1a00003 	mov	r0, r3
 c100074:	eb0004fc 	bl	c10146c <uart0_putint>
    uart0_putchar( ':' );
 c100078:	e3a0003a 	mov	r0, #58	; 0x3a
 c10007c:	eb0004c0 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.min );
 c100080:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 c100084:	e1a00003 	mov	r0, r3
 c100088:	eb0004f7 	bl	c10146c <uart0_putint>
    uart0_putchar( ':' );
 c10008c:	e3a0003a 	mov	r0, #58	; 0x3a
 c100090:	eb0004bb 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.sec );
 c100094:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
 c100098:	e1a00003 	mov	r0, r3
 c10009c:	eb0004f2 	bl	c10146c <uart0_putint>

    /************************************/

    uart0_puts( "\nIntroduzca nueva fecha\n" );
 c1000a0:	e59f00b8 	ldr	r0, [pc, #184]	; c100160 <main+0x160>
 c1000a4:	eb0004dc 	bl	c10141c <uart0_puts>
    uart0_puts( "  - Dia: " );
 c1000a8:	e59f00b4 	ldr	r0, [pc, #180]	; c100164 <main+0x164>
 c1000ac:	eb0004da 	bl	c10141c <uart0_puts>
    rtc_time.mday = (uint8) uart0_getint();
 c1000b0:	eb00057a 	bl	c1016a0 <uart0_getint>
 c1000b4:	e1a03000 	mov	r3, r0
 c1000b8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    uart0_puts( "  - Mes: " );
 c1000c0:	e59f00a0 	ldr	r0, [pc, #160]	; c100168 <main+0x168>
 c1000c4:	eb0004d4 	bl	c10141c <uart0_puts>
    rtc_time.mon = (uint8) uart0_getint();
 c1000c8:	eb000574 	bl	c1016a0 <uart0_getint>
 c1000cc:	e1a03000 	mov	r3, r0
 c1000d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000d4:	e54b300f 	strb	r3, [fp, #-15]
    uart0_puts( "  - Año (2 digitos): " );
 c1000d8:	e59f008c 	ldr	r0, [pc, #140]	; c10016c <main+0x16c>
 c1000dc:	eb0004ce 	bl	c10141c <uart0_puts>
    rtc_time.year = (uint8) uart0_getint();
 c1000e0:	eb00056e 	bl	c1016a0 <uart0_getint>
 c1000e4:	e1a03000 	mov	r3, r0
 c1000e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000ec:	e54b300e 	strb	r3, [fp, #-14]
    uart0_puts( "Introduzca nueva hora\n" );
 c1000f0:	e59f0078 	ldr	r0, [pc, #120]	; c100170 <main+0x170>
 c1000f4:	eb0004c8 	bl	c10141c <uart0_puts>
    uart0_puts( "  - Hora: " );
 c1000f8:	e59f0074 	ldr	r0, [pc, #116]	; c100174 <main+0x174>
 c1000fc:	eb0004c6 	bl	c10141c <uart0_puts>
    rtc_time.hour = (uint8) uart0_getint();
 c100100:	eb000566 	bl	c1016a0 <uart0_getint>
 c100104:	e1a03000 	mov	r3, r0
 c100108:	e20330ff 	and	r3, r3, #255	; 0xff
 c10010c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    uart0_puts( "  - Minuto: " );
 c100110:	e59f0060 	ldr	r0, [pc, #96]	; c100178 <main+0x178>
 c100114:	eb0004c0 	bl	c10141c <uart0_puts>
    rtc_time.min = (uint8) uart0_getint();
 c100118:	eb000560 	bl	c1016a0 <uart0_getint>
 c10011c:	e1a03000 	mov	r3, r0
 c100120:	e20330ff 	and	r3, r3, #255	; 0xff
 c100124:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    uart0_puts( "  - Segundo: " );
 c100128:	e59f004c 	ldr	r0, [pc, #76]	; c10017c <main+0x17c>
 c10012c:	eb0004ba 	bl	c10141c <uart0_puts>
    rtc_time.sec = (uint8) uart0_getint();
 c100130:	eb00055a 	bl	c1016a0 <uart0_getint>
 c100134:	e1a03000 	mov	r3, r0
 c100138:	e20330ff 	and	r3, r3, #255	; 0xff
 c10013c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec

    rtc_puttime( &rtc_time );
 c100140:	e24b3014 	sub	r3, fp, #20
 c100144:	e1a00003 	mov	r0, r3
 c100148:	eb0000bb 	bl	c10043c <rtc_puttime>

    /************************************/

    rtc_open( isr_tick, 127 );
 c10014c:	e59f002c 	ldr	r0, [pc, #44]	; c100180 <main+0x180>
 c100150:	e3a0107f 	mov	r1, #127	; 0x7f
 c100154:	eb0001df 	bl	c1008d8 <rtc_open>

    /************************************/
    
    while( 1 );
 c100158:	eafffffe 	b	c100158 <main+0x158>
 c10015c:	0c1017e4 	.word	0x0c1017e4
 c100160:	0c101800 	.word	0x0c101800
 c100164:	0c10181c 	.word	0x0c10181c
 c100168:	0c101828 	.word	0x0c101828
 c10016c:	0c101834 	.word	0x0c101834
 c100170:	0c10184c 	.word	0x0c10184c
 c100174:	0c101864 	.word	0x0c101864
 c100178:	0c101870 	.word	0x0c101870
 c10017c:	0c101880 	.word	0x0c101880
 c100180:	0c100184 	.word	0x0c100184

0c100184 <isr_tick>:
}

void isr_tick( void )
{
 c100184:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100188:	e1a0c00d 	mov	ip, sp
 c10018c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100190:	e24cb004 	sub	fp, ip, #4
 c100194:	e24dd008 	sub	sp, sp, #8
    rtc_time_t rtc_time;
    
    rtc_gettime( &rtc_time );
 c100198:	e24b3024 	sub	r3, fp, #36	; 0x24
 c10019c:	e1a00003 	mov	r0, r3
 c1001a0:	eb000153 	bl	c1006f4 <rtc_gettime>

    uart0_puts( "\nFecha y hora: " );
 c1001a4:	e59f008c 	ldr	r0, [pc, #140]	; c100238 <isr_tick+0xb4>
 c1001a8:	eb00049b 	bl	c10141c <uart0_puts>
    uart0_putint( rtc_time.mday );
 c1001ac:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c1001b0:	e1a00003 	mov	r0, r3
 c1001b4:	eb0004ac 	bl	c10146c <uart0_putint>
    uart0_putchar( '/' );
 c1001b8:	e3a0002f 	mov	r0, #47	; 0x2f
 c1001bc:	eb000470 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.mon );
 c1001c0:	e55b301f 	ldrb	r3, [fp, #-31]	; 0xffffffe1
 c1001c4:	e1a00003 	mov	r0, r3
 c1001c8:	eb0004a7 	bl	c10146c <uart0_putint>
    uart0_putchar( '/' );
 c1001cc:	e3a0002f 	mov	r0, #47	; 0x2f
 c1001d0:	eb00046b 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.year );
 c1001d4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
 c1001d8:	e1a00003 	mov	r0, r3
 c1001dc:	eb0004a2 	bl	c10146c <uart0_putint>
    uart0_putchar( ' ' );
 c1001e0:	e3a00020 	mov	r0, #32
 c1001e4:	eb000466 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.hour );
 c1001e8:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c1001ec:	e1a00003 	mov	r0, r3
 c1001f0:	eb00049d 	bl	c10146c <uart0_putint>
    uart0_putchar( ':' );
 c1001f4:	e3a0003a 	mov	r0, #58	; 0x3a
 c1001f8:	eb000461 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.min );
 c1001fc:	e55b3023 	ldrb	r3, [fp, #-35]	; 0xffffffdd
 c100200:	e1a00003 	mov	r0, r3
 c100204:	eb000498 	bl	c10146c <uart0_putint>
    uart0_putchar( ':' );
 c100208:	e3a0003a 	mov	r0, #58	; 0x3a
 c10020c:	eb00045c 	bl	c101384 <uart0_putchar>
    uart0_putint( rtc_time.sec );
 c100210:	e55b3024 	ldrb	r3, [fp, #-36]	; 0xffffffdc
 c100214:	e1a00003 	mov	r0, r3
 c100218:	eb000493 	bl	c10146c <uart0_putint>

    I_ISPC = BIT_TICK;
 c10021c:	e59f3018 	ldr	r3, [pc, #24]	; c10023c <isr_tick+0xb8>
 c100220:	e3a02601 	mov	r2, #1048576	; 0x100000
 c100224:	e5832000 	str	r2, [r3]
}
 c100228:	e24bd01c 	sub	sp, fp, #28
 c10022c:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c100230:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100234:	e25ef004 	subs	pc, lr, #4
 c100238:	0c101890 	.word	0x0c101890
 c10023c:	01e00024 	.word	0x01e00024

0c100240 <BCDtoI>:
#include <s3cev40.h>
#include <rtc.h>

extern void isr_TICK_dummy( void );

unsigned int BCDtoI(unsigned int BCD){
 c100240:	e1a0c00d 	mov	ip, sp
 c100244:	e92dd800 	push	{fp, ip, lr, pc}
 c100248:	e24cb004 	sub	fp, ip, #4
 c10024c:	e24dd010 	sub	sp, sp, #16
 c100250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
unsigned int result;
    result=(BCD>>12)*1000;
 c100254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100258:	e1a02623 	lsr	r2, r3, #12
 c10025c:	e1a03002 	mov	r3, r2
 c100260:	e1a03283 	lsl	r3, r3, #5
 c100264:	e0623003 	rsb	r3, r2, r3
 c100268:	e1a03103 	lsl	r3, r3, #2
 c10026c:	e0833002 	add	r3, r3, r2
 c100270:	e1a03183 	lsl	r3, r3, #3
 c100274:	e50b3010 	str	r3, [fp, #-16]
    result+=((BCD>>8)&0x0f)*100;
 c100278:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10027c:	e1a03423 	lsr	r3, r3, #8
 c100280:	e203200f 	and	r2, r3, #15
 c100284:	e1a03002 	mov	r3, r2
 c100288:	e1a03103 	lsl	r3, r3, #2
 c10028c:	e0833002 	add	r3, r3, r2
 c100290:	e1a02103 	lsl	r2, r3, #2
 c100294:	e0833002 	add	r3, r3, r2
 c100298:	e1a03103 	lsl	r3, r3, #2
 c10029c:	e51b2010 	ldr	r2, [fp, #-16]
 c1002a0:	e0823003 	add	r3, r2, r3
 c1002a4:	e50b3010 	str	r3, [fp, #-16]
    result+=((BCD>>4)&0x0f)*10;
 c1002a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002ac:	e1a03223 	lsr	r3, r3, #4
 c1002b0:	e203200f 	and	r2, r3, #15
 c1002b4:	e1a03002 	mov	r3, r2
 c1002b8:	e1a03103 	lsl	r3, r3, #2
 c1002bc:	e0833002 	add	r3, r3, r2
 c1002c0:	e1a03083 	lsl	r3, r3, #1
 c1002c4:	e51b2010 	ldr	r2, [fp, #-16]
 c1002c8:	e0823003 	add	r3, r2, r3
 c1002cc:	e50b3010 	str	r3, [fp, #-16]
    result+=((BCD)&0x0f);
 c1002d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002d4:	e203300f 	and	r3, r3, #15
 c1002d8:	e51b2010 	ldr	r2, [fp, #-16]
 c1002dc:	e0823003 	add	r3, r2, r3
 c1002e0:	e50b3010 	str	r3, [fp, #-16]
    return result;
 c1002e4:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1002e8:	e1a00003 	mov	r0, r3
 c1002ec:	e24bd00c 	sub	sp, fp, #12
 c1002f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1002f4:	e12fff1e 	bx	lr

0c1002f8 <rtc_init>:

void rtc_init( void )
{
 c1002f8:	e1a0c00d 	mov	ip, sp
 c1002fc:	e92dd800 	push	{fp, ip, lr, pc}
 c100300:	e24cb004 	sub	fp, ip, #4
    TICNT   = 0x0;
 c100304:	e59f30ec 	ldr	r3, [pc, #236]	; c1003f8 <rtc_init+0x100>
 c100308:	e3a02000 	mov	r2, #0
 c10030c:	e5832000 	str	r2, [r3]
    RTCALM  = 0x0;
 c100310:	e59f30e4 	ldr	r3, [pc, #228]	; c1003fc <rtc_init+0x104>
 c100314:	e3a02000 	mov	r2, #0
 c100318:	e5832000 	str	r2, [r3]
    RTCRST  = 0x0;
 c10031c:	e59f30dc 	ldr	r3, [pc, #220]	; c100400 <rtc_init+0x108>
 c100320:	e3a02000 	mov	r2, #0
 c100324:	e5832000 	str	r2, [r3]
        
    RTCCON  |= (1<<0);
 c100328:	e59f30d4 	ldr	r3, [pc, #212]	; c100404 <rtc_init+0x10c>
 c10032c:	e59f20d0 	ldr	r2, [pc, #208]	; c100404 <rtc_init+0x10c>
 c100330:	e5922000 	ldr	r2, [r2]
 c100334:	e3822001 	orr	r2, r2, #1
 c100338:	e5832000 	str	r2, [r3]
    
    BCDYEAR = 0x13;
 c10033c:	e59f30c4 	ldr	r3, [pc, #196]	; c100408 <rtc_init+0x110>
 c100340:	e3a02013 	mov	r2, #19
 c100344:	e5832000 	str	r2, [r3]
    BCDMON  = 0x01;
 c100348:	e59f30bc 	ldr	r3, [pc, #188]	; c10040c <rtc_init+0x114>
 c10034c:	e3a02001 	mov	r2, #1
 c100350:	e5832000 	str	r2, [r3]
    BCDDAY  = 0x01;
 c100354:	e59f30b4 	ldr	r3, [pc, #180]	; c100410 <rtc_init+0x118>
 c100358:	e3a02001 	mov	r2, #1
 c10035c:	e5832000 	str	r2, [r3]
    BCDDATE = 0x02;
 c100360:	e59f30ac 	ldr	r3, [pc, #172]	; c100414 <rtc_init+0x11c>
 c100364:	e3a02002 	mov	r2, #2
 c100368:	e5832000 	str	r2, [r3]
    BCDHOUR = 0x00;
 c10036c:	e59f30a4 	ldr	r3, [pc, #164]	; c100418 <rtc_init+0x120>
 c100370:	e3a02000 	mov	r2, #0
 c100374:	e5832000 	str	r2, [r3]
    BCDMIN  = 0x00;
 c100378:	e59f309c 	ldr	r3, [pc, #156]	; c10041c <rtc_init+0x124>
 c10037c:	e3a02000 	mov	r2, #0
 c100380:	e5832000 	str	r2, [r3]
    BCDSEC  = 0x00;
 c100384:	e59f3094 	ldr	r3, [pc, #148]	; c100420 <rtc_init+0x128>
 c100388:	e3a02000 	mov	r2, #0
 c10038c:	e5832000 	str	r2, [r3]

    ALMYEAR = 0x00;
 c100390:	e59f308c 	ldr	r3, [pc, #140]	; c100424 <rtc_init+0x12c>
 c100394:	e3a02000 	mov	r2, #0
 c100398:	e5832000 	str	r2, [r3]
    ALMMON  = 0x00;
 c10039c:	e59f3084 	ldr	r3, [pc, #132]	; c100428 <rtc_init+0x130>
 c1003a0:	e3a02000 	mov	r2, #0
 c1003a4:	e5832000 	str	r2, [r3]
    ALMDAY  = 0x00;
 c1003a8:	e59f307c 	ldr	r3, [pc, #124]	; c10042c <rtc_init+0x134>
 c1003ac:	e3a02000 	mov	r2, #0
 c1003b0:	e5832000 	str	r2, [r3]
    ALMHOUR = 0x00;
 c1003b4:	e59f3074 	ldr	r3, [pc, #116]	; c100430 <rtc_init+0x138>
 c1003b8:	e3a02000 	mov	r2, #0
 c1003bc:	e5832000 	str	r2, [r3]
    ALMMIN  = 0x00;
 c1003c0:	e59f306c 	ldr	r3, [pc, #108]	; c100434 <rtc_init+0x13c>
 c1003c4:	e3a02000 	mov	r2, #0
 c1003c8:	e5832000 	str	r2, [r3]
    ALMSEC  = 0x00;
 c1003cc:	e59f3064 	ldr	r3, [pc, #100]	; c100438 <rtc_init+0x140>
 c1003d0:	e3a02000 	mov	r2, #0
 c1003d4:	e5832000 	str	r2, [r3]

    RTCCON &= 0x0;
 c1003d8:	e59f3024 	ldr	r3, [pc, #36]	; c100404 <rtc_init+0x10c>
 c1003dc:	e5933000 	ldr	r3, [r3]
 c1003e0:	e59f301c 	ldr	r3, [pc, #28]	; c100404 <rtc_init+0x10c>
 c1003e4:	e3a02000 	mov	r2, #0
 c1003e8:	e5832000 	str	r2, [r3]
}
 c1003ec:	e24bd00c 	sub	sp, fp, #12
 c1003f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003f4:	e12fff1e 	bx	lr
 c1003f8:	01d7008c 	.word	0x01d7008c
 c1003fc:	01d70050 	.word	0x01d70050
 c100400:	01d7006c 	.word	0x01d7006c
 c100404:	01d70040 	.word	0x01d70040
 c100408:	01d70088 	.word	0x01d70088
 c10040c:	01d70084 	.word	0x01d70084
 c100410:	01d7007c 	.word	0x01d7007c
 c100414:	01d70080 	.word	0x01d70080
 c100418:	01d70078 	.word	0x01d70078
 c10041c:	01d70074 	.word	0x01d70074
 c100420:	01d70070 	.word	0x01d70070
 c100424:	01d70068 	.word	0x01d70068
 c100428:	01d70064 	.word	0x01d70064
 c10042c:	01d70060 	.word	0x01d70060
 c100430:	01d7005c 	.word	0x01d7005c
 c100434:	01d70058 	.word	0x01d70058
 c100438:	01d70054 	.word	0x01d70054

0c10043c <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c10043c:	e1a0c00d 	mov	ip, sp
 c100440:	e92dd800 	push	{fp, ip, lr, pc}
 c100444:	e24cb004 	sub	fp, ip, #4
 c100448:	e24dd008 	sub	sp, sp, #8
 c10044c:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= 0x1;
 c100450:	e59f3278 	ldr	r3, [pc, #632]	; c1006d0 <rtc_puttime+0x294>
 c100454:	e59f2274 	ldr	r2, [pc, #628]	; c1006d0 <rtc_puttime+0x294>
 c100458:	e5922000 	ldr	r2, [r2]
 c10045c:	e3822001 	orr	r2, r2, #1
 c100460:	e5832000 	str	r2, [r3]

    BCDYEAR = ((rtc_time->year / 10) << 4) | (rtc_time->year % 10);
 c100464:	e59f0268 	ldr	r0, [pc, #616]	; c1006d4 <rtc_puttime+0x298>
 c100468:	e51b3010 	ldr	r3, [fp, #-16]
 c10046c:	e5d32006 	ldrb	r2, [r3, #6]
 c100470:	e59f3260 	ldr	r3, [pc, #608]	; c1006d8 <rtc_puttime+0x29c>
 c100474:	e0831392 	umull	r1, r3, r2, r3
 c100478:	e1a031a3 	lsr	r3, r3, #3
 c10047c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100480:	e1a0c203 	lsl	ip, r3, #4
 c100484:	e51b3010 	ldr	r3, [fp, #-16]
 c100488:	e5d32006 	ldrb	r2, [r3, #6]
 c10048c:	e59f3244 	ldr	r3, [pc, #580]	; c1006d8 <rtc_puttime+0x29c>
 c100490:	e0831392 	umull	r1, r3, r2, r3
 c100494:	e1a011a3 	lsr	r1, r3, #3
 c100498:	e1a03001 	mov	r3, r1
 c10049c:	e1a03103 	lsl	r3, r3, #2
 c1004a0:	e0833001 	add	r3, r3, r1
 c1004a4:	e1a03083 	lsl	r3, r3, #1
 c1004a8:	e0633002 	rsb	r3, r3, r2
 c1004ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1004b0:	e18c3003 	orr	r3, ip, r3
 c1004b4:	e5803000 	str	r3, [r0]
    BCDMON  = ((rtc_time->mon / 10) << 4) | (rtc_time->mon % 10);
 c1004b8:	e59f021c 	ldr	r0, [pc, #540]	; c1006dc <rtc_puttime+0x2a0>
 c1004bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1004c0:	e5d32005 	ldrb	r2, [r3, #5]
 c1004c4:	e59f320c 	ldr	r3, [pc, #524]	; c1006d8 <rtc_puttime+0x29c>
 c1004c8:	e0831392 	umull	r1, r3, r2, r3
 c1004cc:	e1a031a3 	lsr	r3, r3, #3
 c1004d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1004d4:	e1a0c203 	lsl	ip, r3, #4
 c1004d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1004dc:	e5d32005 	ldrb	r2, [r3, #5]
 c1004e0:	e59f31f0 	ldr	r3, [pc, #496]	; c1006d8 <rtc_puttime+0x29c>
 c1004e4:	e0831392 	umull	r1, r3, r2, r3
 c1004e8:	e1a011a3 	lsr	r1, r3, #3
 c1004ec:	e1a03001 	mov	r3, r1
 c1004f0:	e1a03103 	lsl	r3, r3, #2
 c1004f4:	e0833001 	add	r3, r3, r1
 c1004f8:	e1a03083 	lsl	r3, r3, #1
 c1004fc:	e0633002 	rsb	r3, r3, r2
 c100500:	e20330ff 	and	r3, r3, #255	; 0xff
 c100504:	e18c3003 	orr	r3, ip, r3
 c100508:	e5803000 	str	r3, [r0]
    BCDDAY  = ((rtc_time->mday / 10) << 4) | (rtc_time->mday % 10);
 c10050c:	e59f01cc 	ldr	r0, [pc, #460]	; c1006e0 <rtc_puttime+0x2a4>
 c100510:	e51b3010 	ldr	r3, [fp, #-16]
 c100514:	e5d32003 	ldrb	r2, [r3, #3]
 c100518:	e59f31b8 	ldr	r3, [pc, #440]	; c1006d8 <rtc_puttime+0x29c>
 c10051c:	e0831392 	umull	r1, r3, r2, r3
 c100520:	e1a031a3 	lsr	r3, r3, #3
 c100524:	e20330ff 	and	r3, r3, #255	; 0xff
 c100528:	e1a0c203 	lsl	ip, r3, #4
 c10052c:	e51b3010 	ldr	r3, [fp, #-16]
 c100530:	e5d32003 	ldrb	r2, [r3, #3]
 c100534:	e59f319c 	ldr	r3, [pc, #412]	; c1006d8 <rtc_puttime+0x29c>
 c100538:	e0831392 	umull	r1, r3, r2, r3
 c10053c:	e1a011a3 	lsr	r1, r3, #3
 c100540:	e1a03001 	mov	r3, r1
 c100544:	e1a03103 	lsl	r3, r3, #2
 c100548:	e0833001 	add	r3, r3, r1
 c10054c:	e1a03083 	lsl	r3, r3, #1
 c100550:	e0633002 	rsb	r3, r3, r2
 c100554:	e20330ff 	and	r3, r3, #255	; 0xff
 c100558:	e18c3003 	orr	r3, ip, r3
 c10055c:	e5803000 	str	r3, [r0]
    BCDDATE = ((rtc_time->wday / 10) << 4) | (rtc_time->wday % 10);
 c100560:	e59f017c 	ldr	r0, [pc, #380]	; c1006e4 <rtc_puttime+0x2a8>
 c100564:	e51b3010 	ldr	r3, [fp, #-16]
 c100568:	e5d32004 	ldrb	r2, [r3, #4]
 c10056c:	e59f3164 	ldr	r3, [pc, #356]	; c1006d8 <rtc_puttime+0x29c>
 c100570:	e0831392 	umull	r1, r3, r2, r3
 c100574:	e1a031a3 	lsr	r3, r3, #3
 c100578:	e20330ff 	and	r3, r3, #255	; 0xff
 c10057c:	e1a0c203 	lsl	ip, r3, #4
 c100580:	e51b3010 	ldr	r3, [fp, #-16]
 c100584:	e5d32004 	ldrb	r2, [r3, #4]
 c100588:	e59f3148 	ldr	r3, [pc, #328]	; c1006d8 <rtc_puttime+0x29c>
 c10058c:	e0831392 	umull	r1, r3, r2, r3
 c100590:	e1a011a3 	lsr	r1, r3, #3
 c100594:	e1a03001 	mov	r3, r1
 c100598:	e1a03103 	lsl	r3, r3, #2
 c10059c:	e0833001 	add	r3, r3, r1
 c1005a0:	e1a03083 	lsl	r3, r3, #1
 c1005a4:	e0633002 	rsb	r3, r3, r2
 c1005a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1005ac:	e18c3003 	orr	r3, ip, r3
 c1005b0:	e5803000 	str	r3, [r0]
    BCDHOUR = ((rtc_time->hour / 10) << 4) | (rtc_time->hour % 10);
 c1005b4:	e59f012c 	ldr	r0, [pc, #300]	; c1006e8 <rtc_puttime+0x2ac>
 c1005b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1005bc:	e5d32002 	ldrb	r2, [r3, #2]
 c1005c0:	e59f3110 	ldr	r3, [pc, #272]	; c1006d8 <rtc_puttime+0x29c>
 c1005c4:	e0831392 	umull	r1, r3, r2, r3
 c1005c8:	e1a031a3 	lsr	r3, r3, #3
 c1005cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1005d0:	e1a0c203 	lsl	ip, r3, #4
 c1005d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1005d8:	e5d32002 	ldrb	r2, [r3, #2]
 c1005dc:	e59f30f4 	ldr	r3, [pc, #244]	; c1006d8 <rtc_puttime+0x29c>
 c1005e0:	e0831392 	umull	r1, r3, r2, r3
 c1005e4:	e1a011a3 	lsr	r1, r3, #3
 c1005e8:	e1a03001 	mov	r3, r1
 c1005ec:	e1a03103 	lsl	r3, r3, #2
 c1005f0:	e0833001 	add	r3, r3, r1
 c1005f4:	e1a03083 	lsl	r3, r3, #1
 c1005f8:	e0633002 	rsb	r3, r3, r2
 c1005fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c100600:	e18c3003 	orr	r3, ip, r3
 c100604:	e5803000 	str	r3, [r0]
    BCDMIN  = ((rtc_time->min / 10) << 4) | (rtc_time->min % 10);
 c100608:	e59f00dc 	ldr	r0, [pc, #220]	; c1006ec <rtc_puttime+0x2b0>
 c10060c:	e51b3010 	ldr	r3, [fp, #-16]
 c100610:	e5d32001 	ldrb	r2, [r3, #1]
 c100614:	e59f30bc 	ldr	r3, [pc, #188]	; c1006d8 <rtc_puttime+0x29c>
 c100618:	e0831392 	umull	r1, r3, r2, r3
 c10061c:	e1a031a3 	lsr	r3, r3, #3
 c100620:	e20330ff 	and	r3, r3, #255	; 0xff
 c100624:	e1a0c203 	lsl	ip, r3, #4
 c100628:	e51b3010 	ldr	r3, [fp, #-16]
 c10062c:	e5d32001 	ldrb	r2, [r3, #1]
 c100630:	e59f30a0 	ldr	r3, [pc, #160]	; c1006d8 <rtc_puttime+0x29c>
 c100634:	e0831392 	umull	r1, r3, r2, r3
 c100638:	e1a011a3 	lsr	r1, r3, #3
 c10063c:	e1a03001 	mov	r3, r1
 c100640:	e1a03103 	lsl	r3, r3, #2
 c100644:	e0833001 	add	r3, r3, r1
 c100648:	e1a03083 	lsl	r3, r3, #1
 c10064c:	e0633002 	rsb	r3, r3, r2
 c100650:	e20330ff 	and	r3, r3, #255	; 0xff
 c100654:	e18c3003 	orr	r3, ip, r3
 c100658:	e5803000 	str	r3, [r0]
    BCDSEC  = ((rtc_time->sec / 10) << 4) | (rtc_time->sec % 10);
 c10065c:	e59f008c 	ldr	r0, [pc, #140]	; c1006f0 <rtc_puttime+0x2b4>
 c100660:	e51b3010 	ldr	r3, [fp, #-16]
 c100664:	e5d32000 	ldrb	r2, [r3]
 c100668:	e59f3068 	ldr	r3, [pc, #104]	; c1006d8 <rtc_puttime+0x29c>
 c10066c:	e0831392 	umull	r1, r3, r2, r3
 c100670:	e1a031a3 	lsr	r3, r3, #3
 c100674:	e20330ff 	and	r3, r3, #255	; 0xff
 c100678:	e1a0c203 	lsl	ip, r3, #4
 c10067c:	e51b3010 	ldr	r3, [fp, #-16]
 c100680:	e5d32000 	ldrb	r2, [r3]
 c100684:	e59f304c 	ldr	r3, [pc, #76]	; c1006d8 <rtc_puttime+0x29c>
 c100688:	e0831392 	umull	r1, r3, r2, r3
 c10068c:	e1a011a3 	lsr	r1, r3, #3
 c100690:	e1a03001 	mov	r3, r1
 c100694:	e1a03103 	lsl	r3, r3, #2
 c100698:	e0833001 	add	r3, r3, r1
 c10069c:	e1a03083 	lsl	r3, r3, #1
 c1006a0:	e0633002 	rsb	r3, r3, r2
 c1006a4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1006a8:	e18c3003 	orr	r3, ip, r3
 c1006ac:	e5803000 	str	r3, [r0]
        
    RTCCON &= 0x0;
 c1006b0:	e59f3018 	ldr	r3, [pc, #24]	; c1006d0 <rtc_puttime+0x294>
 c1006b4:	e5933000 	ldr	r3, [r3]
 c1006b8:	e59f3010 	ldr	r3, [pc, #16]	; c1006d0 <rtc_puttime+0x294>
 c1006bc:	e3a02000 	mov	r2, #0
 c1006c0:	e5832000 	str	r2, [r3]
}
 c1006c4:	e24bd00c 	sub	sp, fp, #12
 c1006c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006cc:	e12fff1e 	bx	lr
 c1006d0:	01d70040 	.word	0x01d70040
 c1006d4:	01d70088 	.word	0x01d70088
 c1006d8:	cccccccd 	.word	0xcccccccd
 c1006dc:	01d70084 	.word	0x01d70084
 c1006e0:	01d7007c 	.word	0x01d7007c
 c1006e4:	01d70080 	.word	0x01d70080
 c1006e8:	01d70078 	.word	0x01d70078
 c1006ec:	01d70074 	.word	0x01d70074
 c1006f0:	01d70070 	.word	0x01d70070

0c1006f4 <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c1006f4:	e1a0c00d 	mov	ip, sp
 c1006f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1006fc:	e24cb004 	sub	fp, ip, #4
 c100700:	e24dd008 	sub	sp, sp, #8
 c100704:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= 0x1;
 c100708:	e59f31a8 	ldr	r3, [pc, #424]	; c1008b8 <rtc_gettime+0x1c4>
 c10070c:	e59f21a4 	ldr	r2, [pc, #420]	; c1008b8 <rtc_gettime+0x1c4>
 c100710:	e5922000 	ldr	r2, [r2]
 c100714:	e3822001 	orr	r2, r2, #1
 c100718:	e5832000 	str	r2, [r3]
    
    rtc_time->year = BCDtoI(BCDYEAR);
 c10071c:	e59f3198 	ldr	r3, [pc, #408]	; c1008bc <rtc_gettime+0x1c8>
 c100720:	e5933000 	ldr	r3, [r3]
 c100724:	e1a00003 	mov	r0, r3
 c100728:	ebfffec4 	bl	c100240 <BCDtoI>
 c10072c:	e1a03000 	mov	r3, r0
 c100730:	e20320ff 	and	r2, r3, #255	; 0xff
 c100734:	e51b3010 	ldr	r3, [fp, #-16]
 c100738:	e5c32006 	strb	r2, [r3, #6]
    rtc_time->mon  = BCDtoI(BCDMON);
 c10073c:	e59f317c 	ldr	r3, [pc, #380]	; c1008c0 <rtc_gettime+0x1cc>
 c100740:	e5933000 	ldr	r3, [r3]
 c100744:	e1a00003 	mov	r0, r3
 c100748:	ebfffebc 	bl	c100240 <BCDtoI>
 c10074c:	e1a03000 	mov	r3, r0
 c100750:	e20320ff 	and	r2, r3, #255	; 0xff
 c100754:	e51b3010 	ldr	r3, [fp, #-16]
 c100758:	e5c32005 	strb	r2, [r3, #5]
    rtc_time->mday = BCDtoI(BCDDAY);
 c10075c:	e59f3160 	ldr	r3, [pc, #352]	; c1008c4 <rtc_gettime+0x1d0>
 c100760:	e5933000 	ldr	r3, [r3]
 c100764:	e1a00003 	mov	r0, r3
 c100768:	ebfffeb4 	bl	c100240 <BCDtoI>
 c10076c:	e1a03000 	mov	r3, r0
 c100770:	e20320ff 	and	r2, r3, #255	; 0xff
 c100774:	e51b3010 	ldr	r3, [fp, #-16]
 c100778:	e5c32003 	strb	r2, [r3, #3]
    rtc_time->wday = BCDtoI(BCDDATE);
 c10077c:	e59f3144 	ldr	r3, [pc, #324]	; c1008c8 <rtc_gettime+0x1d4>
 c100780:	e5933000 	ldr	r3, [r3]
 c100784:	e1a00003 	mov	r0, r3
 c100788:	ebfffeac 	bl	c100240 <BCDtoI>
 c10078c:	e1a03000 	mov	r3, r0
 c100790:	e20320ff 	and	r2, r3, #255	; 0xff
 c100794:	e51b3010 	ldr	r3, [fp, #-16]
 c100798:	e5c32004 	strb	r2, [r3, #4]
    rtc_time->hour = BCDtoI(BCDHOUR);
 c10079c:	e59f3128 	ldr	r3, [pc, #296]	; c1008cc <rtc_gettime+0x1d8>
 c1007a0:	e5933000 	ldr	r3, [r3]
 c1007a4:	e1a00003 	mov	r0, r3
 c1007a8:	ebfffea4 	bl	c100240 <BCDtoI>
 c1007ac:	e1a03000 	mov	r3, r0
 c1007b0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1007b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1007b8:	e5c32002 	strb	r2, [r3, #2]
    rtc_time->min  = BCDtoI(BCDMIN);
 c1007bc:	e59f310c 	ldr	r3, [pc, #268]	; c1008d0 <rtc_gettime+0x1dc>
 c1007c0:	e5933000 	ldr	r3, [r3]
 c1007c4:	e1a00003 	mov	r0, r3
 c1007c8:	ebfffe9c 	bl	c100240 <BCDtoI>
 c1007cc:	e1a03000 	mov	r3, r0
 c1007d0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1007d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1007d8:	e5c32001 	strb	r2, [r3, #1]
    rtc_time->sec  = BCDtoI(BCDSEC);
 c1007dc:	e59f30f0 	ldr	r3, [pc, #240]	; c1008d4 <rtc_gettime+0x1e0>
 c1007e0:	e5933000 	ldr	r3, [r3]
 c1007e4:	e1a00003 	mov	r0, r3
 c1007e8:	ebfffe94 	bl	c100240 <BCDtoI>
 c1007ec:	e1a03000 	mov	r3, r0
 c1007f0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1007f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1007f8:	e5c32000 	strb	r2, [r3]
    if( ! rtc_time->sec ){
 c1007fc:	e51b3010 	ldr	r3, [fp, #-16]
 c100800:	e5d33000 	ldrb	r3, [r3]
 c100804:	e3530000 	cmp	r3, #0
 c100808:	1a000022 	bne	c100898 <rtc_gettime+0x1a4>
        rtc_time->year = BCDYEAR;
 c10080c:	e59f30a8 	ldr	r3, [pc, #168]	; c1008bc <rtc_gettime+0x1c8>
 c100810:	e5933000 	ldr	r3, [r3]
 c100814:	e20320ff 	and	r2, r3, #255	; 0xff
 c100818:	e51b3010 	ldr	r3, [fp, #-16]
 c10081c:	e5c32006 	strb	r2, [r3, #6]
        rtc_time->mon  = BCDMON;
 c100820:	e59f3098 	ldr	r3, [pc, #152]	; c1008c0 <rtc_gettime+0x1cc>
 c100824:	e5933000 	ldr	r3, [r3]
 c100828:	e20320ff 	and	r2, r3, #255	; 0xff
 c10082c:	e51b3010 	ldr	r3, [fp, #-16]
 c100830:	e5c32005 	strb	r2, [r3, #5]
        rtc_time->mday = BCDDAY;
 c100834:	e59f3088 	ldr	r3, [pc, #136]	; c1008c4 <rtc_gettime+0x1d0>
 c100838:	e5933000 	ldr	r3, [r3]
 c10083c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100840:	e51b3010 	ldr	r3, [fp, #-16]
 c100844:	e5c32003 	strb	r2, [r3, #3]
        rtc_time->wday = BCDDATE;
 c100848:	e59f3078 	ldr	r3, [pc, #120]	; c1008c8 <rtc_gettime+0x1d4>
 c10084c:	e5933000 	ldr	r3, [r3]
 c100850:	e20320ff 	and	r2, r3, #255	; 0xff
 c100854:	e51b3010 	ldr	r3, [fp, #-16]
 c100858:	e5c32004 	strb	r2, [r3, #4]
        rtc_time->hour = BCDHOUR;
 c10085c:	e59f3068 	ldr	r3, [pc, #104]	; c1008cc <rtc_gettime+0x1d8>
 c100860:	e5933000 	ldr	r3, [r3]
 c100864:	e20320ff 	and	r2, r3, #255	; 0xff
 c100868:	e51b3010 	ldr	r3, [fp, #-16]
 c10086c:	e5c32002 	strb	r2, [r3, #2]
        rtc_time->min  = BCDMIN;
 c100870:	e59f3058 	ldr	r3, [pc, #88]	; c1008d0 <rtc_gettime+0x1dc>
 c100874:	e5933000 	ldr	r3, [r3]
 c100878:	e20320ff 	and	r2, r3, #255	; 0xff
 c10087c:	e51b3010 	ldr	r3, [fp, #-16]
 c100880:	e5c32001 	strb	r2, [r3, #1]
        rtc_time->sec  = BCDSEC;
 c100884:	e59f3048 	ldr	r3, [pc, #72]	; c1008d4 <rtc_gettime+0x1e0>
 c100888:	e5933000 	ldr	r3, [r3]
 c10088c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100890:	e51b3010 	ldr	r3, [fp, #-16]
 c100894:	e5c32000 	strb	r2, [r3]
    };

    RTCCON &= 0x0;
 c100898:	e59f3018 	ldr	r3, [pc, #24]	; c1008b8 <rtc_gettime+0x1c4>
 c10089c:	e5933000 	ldr	r3, [r3]
 c1008a0:	e59f3010 	ldr	r3, [pc, #16]	; c1008b8 <rtc_gettime+0x1c4>
 c1008a4:	e3a02000 	mov	r2, #0
 c1008a8:	e5832000 	str	r2, [r3]
}
 c1008ac:	e24bd00c 	sub	sp, fp, #12
 c1008b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008b4:	e12fff1e 	bx	lr
 c1008b8:	01d70040 	.word	0x01d70040
 c1008bc:	01d70088 	.word	0x01d70088
 c1008c0:	01d70084 	.word	0x01d70084
 c1008c4:	01d7007c 	.word	0x01d7007c
 c1008c8:	01d70080 	.word	0x01d70080
 c1008cc:	01d70078 	.word	0x01d70078
 c1008d0:	01d70074 	.word	0x01d70074
 c1008d4:	01d70070 	.word	0x01d70070

0c1008d8 <rtc_open>:


void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c1008d8:	e1a0c00d 	mov	ip, sp
 c1008dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1008e0:	e24cb004 	sub	fp, ip, #4
 c1008e4:	e24dd008 	sub	sp, sp, #8
 c1008e8:	e50b0010 	str	r0, [fp, #-16]
 c1008ec:	e1a03001 	mov	r3, r1
 c1008f0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pISR_TICK =  (uint32) isr;
 c1008f4:	e59f3050 	ldr	r3, [pc, #80]	; c10094c <rtc_open+0x74>
 c1008f8:	e51b2010 	ldr	r2, [fp, #-16]
 c1008fc:	e5832000 	str	r2, [r3]
    I_ISPC    |= BIT_TICK;
 c100900:	e59f3048 	ldr	r3, [pc, #72]	; c100950 <rtc_open+0x78>
 c100904:	e59f2044 	ldr	r2, [pc, #68]	; c100950 <rtc_open+0x78>
 c100908:	e5922000 	ldr	r2, [r2]
 c10090c:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c100910:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_TICK | BIT_GLOBAL);
 c100914:	e59f3038 	ldr	r3, [pc, #56]	; c100954 <rtc_open+0x7c>
 c100918:	e59f2034 	ldr	r2, [pc, #52]	; c100954 <rtc_open+0x7c>
 c10091c:	e5922000 	ldr	r2, [r2]
 c100920:	e3c22641 	bic	r2, r2, #68157440	; 0x4100000
 c100924:	e5832000 	str	r2, [r3]
    TICNT     = ((1 << 7) | tick_count);
 c100928:	e59f2028 	ldr	r2, [pc, #40]	; c100958 <rtc_open+0x80>
 c10092c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100930:	e1e03c83 	mvn	r3, r3, lsl #25
 c100934:	e1e03ca3 	mvn	r3, r3, lsr #25
 c100938:	e20330ff 	and	r3, r3, #255	; 0xff
 c10093c:	e5823000 	str	r3, [r2]
}
 c100940:	e24bd00c 	sub	sp, fp, #12
 c100944:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100948:	e12fff1e 	bx	lr
 c10094c:	0c7fff70 	.word	0x0c7fff70
 c100950:	01e00024 	.word	0x01e00024
 c100954:	01e0000c 	.word	0x01e0000c
 c100958:	01d7008c 	.word	0x01d7008c

0c10095c <rtc_close>:

void rtc_close( void )
{
 c10095c:	e1a0c00d 	mov	ip, sp
 c100960:	e92dd800 	push	{fp, ip, lr, pc}
 c100964:	e24cb004 	sub	fp, ip, #4
    TICNT     = 0x0;
 c100968:	e59f3030 	ldr	r3, [pc, #48]	; c1009a0 <rtc_close+0x44>
 c10096c:	e3a02000 	mov	r2, #0
 c100970:	e5832000 	str	r2, [r3]
    INTMSK   |= BIT_TICK;
 c100974:	e59f3028 	ldr	r3, [pc, #40]	; c1009a4 <rtc_close+0x48>
 c100978:	e59f2024 	ldr	r2, [pc, #36]	; c1009a4 <rtc_close+0x48>
 c10097c:	e5922000 	ldr	r2, [r2]
 c100980:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c100984:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32) isr_TICK_dummy;
 c100988:	e59f3018 	ldr	r3, [pc, #24]	; c1009a8 <rtc_close+0x4c>
 c10098c:	e59f2018 	ldr	r2, [pc, #24]	; c1009ac <rtc_close+0x50>
 c100990:	e5832000 	str	r2, [r3]
}
 c100994:	e24bd00c 	sub	sp, fp, #12
 c100998:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10099c:	e12fff1e 	bx	lr
 c1009a0:	01d7008c 	.word	0x01d7008c
 c1009a4:	01e0000c 	.word	0x01e0000c
 c1009a8:	0c7fff70 	.word	0x0c7fff70
 c1009ac:	0c1011d0 	.word	0x0c1011d0

0c1009b0 <sys_init>:
void isr_TS_dummy( void )        __attribute__ ((interrupt ("IRQ")));
void isr_KEYPAD_dummy( void )    __attribute__ ((interrupt ("IRQ")));
void isr_USB_dummy( void )       __attribute__ ((interrupt ("IRQ")));

void sys_init( void )
{
 c1009b0:	e1a0c00d 	mov	ip, sp
 c1009b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1009b8:	e24cb004 	sub	fp, ip, #4
    WTCON  = 0;    
 c1009bc:	e59f30ec 	ldr	r3, [pc, #236]	; c100ab0 <sys_init+0x100>
 c1009c0:	e3a02000 	mov	r2, #0
 c1009c4:	e5832000 	str	r2, [r3]
    INTMSK = ~0;
 c1009c8:	e59f30e4 	ldr	r3, [pc, #228]	; c100ab4 <sys_init+0x104>
 c1009cc:	e3e02000 	mvn	r2, #0
 c1009d0:	e5832000 	str	r2, [r3]

    LOCKTIME = 0xFFF;
 c1009d4:	e59f30dc 	ldr	r3, [pc, #220]	; c100ab8 <sys_init+0x108>
 c1009d8:	e59f20dc 	ldr	r2, [pc, #220]	; c100abc <sys_init+0x10c>
 c1009dc:	e5832000 	str	r2, [r3]
    PLLCON   = 0x38021;
 c1009e0:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c1009e4:	e59f20d4 	ldr	r2, [pc, #212]	; c100ac0 <sys_init+0x110>
 c1009e8:	e5832000 	str	r2, [r3]
    CLKSLOW  = 0x8;
 c1009ec:	e59f30d0 	ldr	r3, [pc, #208]	; c100ac4 <sys_init+0x114>
 c1009f0:	e3a02008 	mov	r2, #8
 c1009f4:	e5832000 	str	r2, [r3]
    CLKCON   = 0x7FF8;
 c1009f8:	e59f30c8 	ldr	r3, [pc, #200]	; c100ac8 <sys_init+0x118>
 c1009fc:	e59f20c8 	ldr	r2, [pc, #200]	; c100acc <sys_init+0x11c>
 c100a00:	e5832000 	str	r2, [r3]
    
    SBUSCON = 0x8000001B;
 c100a04:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c100a08:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c100a0c:	e5832000 	str	r2, [r3]
    
    SYSCFG = 0xE;
 c100a10:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c100a14:	e3a0200e 	mov	r2, #14
 c100a18:	e5832000 	str	r2, [r3]
    
    I_PMST = 0x1F1B;
 c100a1c:	e59f30ac 	ldr	r3, [pc, #172]	; c100ad0 <sys_init+0x120>
 c100a20:	e59f20ac 	ldr	r2, [pc, #172]	; c100ad4 <sys_init+0x124>
 c100a24:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1B1B1B1B;
 c100a28:	e59f30a8 	ldr	r3, [pc, #168]	; c100ad8 <sys_init+0x128>
 c100a2c:	e59f20a8 	ldr	r2, [pc, #168]	; c100adc <sys_init+0x12c>
 c100a30:	e5832000 	str	r2, [r3]
    INTMOD = 0x0;
 c100a34:	e59f30a4 	ldr	r3, [pc, #164]	; c100ae0 <sys_init+0x130>
 c100a38:	e3a02000 	mov	r2, #0
 c100a3c:	e5832000 	str	r2, [r3]
    install_dummy_isr();
 c100a40:	eb00008c 	bl	c100c78 <install_dummy_isr>
    EXTINTPND = ~0x0;
 c100a44:	e59f3098 	ldr	r3, [pc, #152]	; c100ae4 <sys_init+0x134>
 c100a48:	e3e02000 	mvn	r2, #0
 c100a4c:	e5832000 	str	r2, [r3]
    I_ISPC = ~0x0;
 c100a50:	e59f3090 	ldr	r3, [pc, #144]	; c100ae8 <sys_init+0x138>
 c100a54:	e3e02000 	mvn	r2, #0
 c100a58:	e5832000 	str	r2, [r3]
    INTCON = 0x1;
 c100a5c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100a60:	e3a02001 	mov	r2, #1
 c100a64:	e5832000 	str	r2, [r3]

    SET_OPMODE( SVCMODE );
 c100a68:	e10f0000 	mrs	r0, CPSR
 c100a6c:	e3c0001f 	bic	r0, r0, #31
 c100a70:	e3800013 	orr	r0, r0, #19
 c100a74:	e121f000 	msr	CPSR_c, r0
    SET_IRQFLAG( 0 );
 c100a78:	e10f0000 	mrs	r0, CPSR
 c100a7c:	e3c00080 	bic	r0, r0, #128	; 0x80
 c100a80:	e3800000 	orr	r0, r0, #0
 c100a84:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG( 1 );
 c100a88:	e10f0000 	mrs	r0, CPSR
 c100a8c:	e3c00040 	bic	r0, r0, #64	; 0x40
 c100a90:	e3800040 	orr	r0, r0, #64	; 0x40
 c100a94:	e121f000 	msr	CPSR_c, r0

    port_init();
 c100a98:	eb000013 	bl	c100aec <port_init>
    uart0_init();
 c100a9c:	eb00021f 	bl	c101320 <uart0_init>

    show_sys_info();
 c100aa0:	eb00020c 	bl	c1012d8 <show_sys_info>
}
 c100aa4:	e24bd00c 	sub	sp, fp, #12
 c100aa8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100aac:	e12fff1e 	bx	lr
 c100ab0:	01d30000 	.word	0x01d30000
 c100ab4:	01e0000c 	.word	0x01e0000c
 c100ab8:	01d8000c 	.word	0x01d8000c
 c100abc:	00000fff 	.word	0x00000fff
 c100ac0:	00038021 	.word	0x00038021
 c100ac4:	01d80008 	.word	0x01d80008
 c100ac8:	01d80004 	.word	0x01d80004
 c100acc:	00007ff8 	.word	0x00007ff8
 c100ad0:	01e00014 	.word	0x01e00014
 c100ad4:	00001f1b 	.word	0x00001f1b
 c100ad8:	01e00010 	.word	0x01e00010
 c100adc:	1b1b1b1b 	.word	0x1b1b1b1b
 c100ae0:	01e00008 	.word	0x01e00008
 c100ae4:	01d20054 	.word	0x01d20054
 c100ae8:	01e00024 	.word	0x01e00024

0c100aec <port_init>:

static void port_init( void )
{
 c100aec:	e1a0c00d 	mov	ip, sp
 c100af0:	e92dd800 	push	{fp, ip, lr, pc}
 c100af4:	e24cb004 	sub	fp, ip, #4
    PDATA = ~0;
 c100af8:	e59f3100 	ldr	r3, [pc, #256]	; c100c00 <port_init+0x114>
 c100afc:	e3e02000 	mvn	r2, #0
 c100b00:	e5832000 	str	r2, [r3]
    PCONA = 0xFE;
 c100b04:	e59f30f8 	ldr	r3, [pc, #248]	; c100c04 <port_init+0x118>
 c100b08:	e3a020fe 	mov	r2, #254	; 0xfe
 c100b0c:	e5832000 	str	r2, [r3]

    PDATB = ~0;
 c100b10:	e59f30f0 	ldr	r3, [pc, #240]	; c100c08 <port_init+0x11c>
 c100b14:	e3e02000 	mvn	r2, #0
 c100b18:	e5832000 	str	r2, [r3]
	PCONB = 0x14F;
 c100b1c:	e59f30e8 	ldr	r3, [pc, #232]	; c100c0c <port_init+0x120>
 c100b20:	e59f20e8 	ldr	r2, [pc, #232]	; c100c10 <port_init+0x124>
 c100b24:	e5832000 	str	r2, [r3]

    PDATC = ~0;
 c100b28:	e59f30e4 	ldr	r3, [pc, #228]	; c100c14 <port_init+0x128>
 c100b2c:	e3e02000 	mvn	r2, #0
 c100b30:	e5832000 	str	r2, [r3]
    PCONC = 0x5FF555FF;
 c100b34:	e59f30dc 	ldr	r3, [pc, #220]	; c100c18 <port_init+0x12c>
 c100b38:	e59f20dc 	ldr	r2, [pc, #220]	; c100c1c <port_init+0x130>
 c100b3c:	e5832000 	str	r2, [r3]
    PUPC  = 0x94FB;
 c100b40:	e59f30d8 	ldr	r3, [pc, #216]	; c100c20 <port_init+0x134>
 c100b44:	e59f20d8 	ldr	r2, [pc, #216]	; c100c24 <port_init+0x138>
 c100b48:	e5832000 	str	r2, [r3]

    PDATD = ~0;
 c100b4c:	e59f30d4 	ldr	r3, [pc, #212]	; c100c28 <port_init+0x13c>
 c100b50:	e3e02000 	mvn	r2, #0
 c100b54:	e5832000 	str	r2, [r3]
    PCOND = 0xAAAA;
 c100b58:	e59f30cc 	ldr	r3, [pc, #204]	; c100c2c <port_init+0x140>
 c100b5c:	e59f20cc 	ldr	r2, [pc, #204]	; c100c30 <port_init+0x144>
 c100b60:	e5832000 	str	r2, [r3]
    PUPD  = 0xFF;
 c100b64:	e59f30c8 	ldr	r3, [pc, #200]	; c100c34 <port_init+0x148>
 c100b68:	e3a020ff 	mov	r2, #255	; 0xff
 c100b6c:	e5832000 	str	r2, [r3]

    PDATE = ~0;
 c100b70:	e59f30c0 	ldr	r3, [pc, #192]	; c100c38 <port_init+0x14c>
 c100b74:	e3e02000 	mvn	r2, #0
 c100b78:	e5832000 	str	r2, [r3]
    PCONE = 0x255A9;
 c100b7c:	e59f30b8 	ldr	r3, [pc, #184]	; c100c3c <port_init+0x150>
 c100b80:	e59f20b8 	ldr	r2, [pc, #184]	; c100c40 <port_init+0x154>
 c100b84:	e5832000 	str	r2, [r3]
    PUPE  = 0x1FB;
 c100b88:	e59f30b4 	ldr	r3, [pc, #180]	; c100c44 <port_init+0x158>
 c100b8c:	e59f20b4 	ldr	r2, [pc, #180]	; c100c48 <port_init+0x15c>
 c100b90:	e5832000 	str	r2, [r3]

    PDATF = ~0;
 c100b94:	e59f30b0 	ldr	r3, [pc, #176]	; c100c4c <port_init+0x160>
 c100b98:	e3e02000 	mvn	r2, #0
 c100b9c:	e5832000 	str	r2, [r3]
    PCONF = 0x251A;
 c100ba0:	e59f30a8 	ldr	r3, [pc, #168]	; c100c50 <port_init+0x164>
 c100ba4:	e59f20a8 	ldr	r2, [pc, #168]	; c100c54 <port_init+0x168>
 c100ba8:	e5832000 	str	r2, [r3]
    PUPF  = 0x74;
 c100bac:	e59f30a4 	ldr	r3, [pc, #164]	; c100c58 <port_init+0x16c>
 c100bb0:	e3a02074 	mov	r2, #116	; 0x74
 c100bb4:	e5832000 	str	r2, [r3]

    PDATG = ~0;
 c100bb8:	e59f309c 	ldr	r3, [pc, #156]	; c100c5c <port_init+0x170>
 c100bbc:	e3e02000 	mvn	r2, #0
 c100bc0:	e5832000 	str	r2, [r3]
    PCONG = 0xF5FF;
 c100bc4:	e59f3094 	ldr	r3, [pc, #148]	; c100c60 <port_init+0x174>
 c100bc8:	e59f2094 	ldr	r2, [pc, #148]	; c100c64 <port_init+0x178>
 c100bcc:	e5832000 	str	r2, [r3]
    PUPG  = 0x30;
 c100bd0:	e59f3090 	ldr	r3, [pc, #144]	; c100c68 <port_init+0x17c>
 c100bd4:	e3a02030 	mov	r2, #48	; 0x30
 c100bd8:	e5832000 	str	r2, [r3]

    SPUCR = 0x7;
 c100bdc:	e59f3088 	ldr	r3, [pc, #136]	; c100c6c <port_init+0x180>
 c100be0:	e3a02007 	mov	r2, #7
 c100be4:	e5832000 	str	r2, [r3]

    EXTINT = 0x22000220;
 c100be8:	e59f3080 	ldr	r3, [pc, #128]	; c100c70 <port_init+0x184>
 c100bec:	e59f2080 	ldr	r2, [pc, #128]	; c100c74 <port_init+0x188>
 c100bf0:	e5832000 	str	r2, [r3]
}
 c100bf4:	e24bd00c 	sub	sp, fp, #12
 c100bf8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100bfc:	e12fff1e 	bx	lr
 c100c00:	01d20004 	.word	0x01d20004
 c100c04:	01d20000 	.word	0x01d20000
 c100c08:	01d2000c 	.word	0x01d2000c
 c100c0c:	01d20008 	.word	0x01d20008
 c100c10:	0000014f 	.word	0x0000014f
 c100c14:	01d20014 	.word	0x01d20014
 c100c18:	01d20010 	.word	0x01d20010
 c100c1c:	5ff555ff 	.word	0x5ff555ff
 c100c20:	01d20018 	.word	0x01d20018
 c100c24:	000094fb 	.word	0x000094fb
 c100c28:	01d20020 	.word	0x01d20020
 c100c2c:	01d2001c 	.word	0x01d2001c
 c100c30:	0000aaaa 	.word	0x0000aaaa
 c100c34:	01d20024 	.word	0x01d20024
 c100c38:	01d2002c 	.word	0x01d2002c
 c100c3c:	01d20028 	.word	0x01d20028
 c100c40:	000255a9 	.word	0x000255a9
 c100c44:	01d20030 	.word	0x01d20030
 c100c48:	000001fb 	.word	0x000001fb
 c100c4c:	01d20038 	.word	0x01d20038
 c100c50:	01d20034 	.word	0x01d20034
 c100c54:	0000251a 	.word	0x0000251a
 c100c58:	01d2003c 	.word	0x01d2003c
 c100c5c:	01d20044 	.word	0x01d20044
 c100c60:	01d20040 	.word	0x01d20040
 c100c64:	0000f5ff 	.word	0x0000f5ff
 c100c68:	01d20048 	.word	0x01d20048
 c100c6c:	01d2004c 	.word	0x01d2004c
 c100c70:	01d20050 	.word	0x01d20050
 c100c74:	22000220 	.word	0x22000220

0c100c78 <install_dummy_isr>:

static void install_dummy_isr( void )
{ 
 c100c78:	e1a0c00d 	mov	ip, sp
 c100c7c:	e92dd800 	push	{fp, ip, lr, pc}
 c100c80:	e24cb004 	sub	fp, ip, #4
	pISR_SWI = (uint32) isr_SWI_dummy;
 c100c84:	e59f307c 	ldr	r3, [pc, #124]	; c100d08 <install_dummy_isr+0x90>
 c100c88:	e59f207c 	ldr	r2, [pc, #124]	; c100d0c <install_dummy_isr+0x94>
 c100c8c:	e5832000 	str	r2, [r3]
	pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c100c90:	e59f3078 	ldr	r3, [pc, #120]	; c100d10 <install_dummy_isr+0x98>
 c100c94:	e59f2078 	ldr	r2, [pc, #120]	; c100d14 <install_dummy_isr+0x9c>
 c100c98:	e5832000 	str	r2, [r3]
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c100c9c:	e59f3074 	ldr	r3, [pc, #116]	; c100d18 <install_dummy_isr+0xa0>
 c100ca0:	e59f2074 	ldr	r2, [pc, #116]	; c100d1c <install_dummy_isr+0xa4>
 c100ca4:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c100ca8:	e59f3070 	ldr	r3, [pc, #112]	; c100d20 <install_dummy_isr+0xa8>
 c100cac:	e59f2070 	ldr	r2, [pc, #112]	; c100d24 <install_dummy_isr+0xac>
 c100cb0:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c100cb4:	e59f306c 	ldr	r3, [pc, #108]	; c100d28 <install_dummy_isr+0xb0>
 c100cb8:	e59f206c 	ldr	r2, [pc, #108]	; c100d2c <install_dummy_isr+0xb4>
 c100cbc:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c100cc0:	e59f3068 	ldr	r3, [pc, #104]	; c100d30 <install_dummy_isr+0xb8>
 c100cc4:	e59f2068 	ldr	r2, [pc, #104]	; c100d34 <install_dummy_isr+0xbc>
 c100cc8:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c100ccc:	e59f3064 	ldr	r3, [pc, #100]	; c100d38 <install_dummy_isr+0xc0>
 c100cd0:	e59f2064 	ldr	r2, [pc, #100]	; c100d3c <install_dummy_isr+0xc4>
 c100cd4:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c100cd8:	e59f3060 	ldr	r3, [pc, #96]	; c100d40 <install_dummy_isr+0xc8>
 c100cdc:	e59f2060 	ldr	r2, [pc, #96]	; c100d44 <install_dummy_isr+0xcc>
 c100ce0:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32) isr_TICK_dummy;
 c100ce4:	e59f305c 	ldr	r3, [pc, #92]	; c100d48 <install_dummy_isr+0xd0>
 c100ce8:	e59f205c 	ldr	r2, [pc, #92]	; c100d4c <install_dummy_isr+0xd4>
 c100cec:	e5832000 	str	r2, [r3]
	pISR_USB = (uint32) isr_USB_dummy;
 c100cf0:	e59f3058 	ldr	r3, [pc, #88]	; c100d50 <install_dummy_isr+0xd8>
 c100cf4:	e59f2058 	ldr	r2, [pc, #88]	; c100d54 <install_dummy_isr+0xdc>
 c100cf8:	e5832000 	str	r2, [r3]
}        
 c100cfc:	e24bd00c 	sub	sp, fp, #12
 c100d00:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d04:	e12fff1e 	bx	lr
 c100d08:	0c7fff08 	.word	0x0c7fff08
 c100d0c:	0c100d58 	.word	0x0c100d58
 c100d10:	0c7fff04 	.word	0x0c7fff04
 c100d14:	0c100d84 	.word	0x0c100d84
 c100d18:	0c7fff18 	.word	0x0c7fff18
 c100d1c:	0c100db0 	.word	0x0c100db0
 c100d20:	0c7fff1c 	.word	0x0c7fff1c
 c100d24:	0c100ddc 	.word	0x0c100ddc
 c100d28:	0c7fff0c 	.word	0x0c7fff0c
 c100d2c:	0c100e08 	.word	0x0c100e08
 c100d30:	0c7fff10 	.word	0x0c7fff10
 c100d34:	0c100e34 	.word	0x0c100e34
 c100d38:	0c7fff20 	.word	0x0c7fff20
 c100d3c:	0c100e60 	.word	0x0c100e60
 c100d40:	0c7fff24 	.word	0x0c7fff24
 c100d44:	0c100e8c 	.word	0x0c100e8c
 c100d48:	0c7fff70 	.word	0x0c7fff70
 c100d4c:	0c1011d0 	.word	0x0c1011d0
 c100d50:	0c7fff84 	.word	0x0c7fff84
 c100d54:	0c1012ac 	.word	0x0c1012ac

0c100d58 <isr_SWI_dummy>:

void isr_SWI_dummy( void )
{
 c100d58:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100d5c:	e1a0c00d 	mov	ip, sp
 c100d60:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100d64:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy" );
 c100d68:	e59f0010 	ldr	r0, [pc, #16]	; c100d80 <isr_SWI_dummy+0x28>
 c100d6c:	eb0001aa 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100d70:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100d74:	e3a02075 	mov	r2, #117	; 0x75
 c100d78:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100d7c:	eafffffe 	b	c100d7c <isr_SWI_dummy+0x24>
 c100d80:	0c1018a0 	.word	0x0c1018a0

0c100d84 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void )
{
 c100d84:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100d88:	e1a0c00d 	mov	ip, sp
 c100d8c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100d90:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy" );
 c100d94:	e59f0010 	ldr	r0, [pc, #16]	; c100dac <isr_UNDEF_dummy+0x28>
 c100d98:	eb00019f 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100d9c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100da0:	e3a02075 	mov	r2, #117	; 0x75
 c100da4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100da8:	eafffffe 	b	c100da8 <isr_UNDEF_dummy+0x24>
 c100dac:	0c1018cc 	.word	0x0c1018cc

0c100db0 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void )
{
 c100db0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100db4:	e1a0c00d 	mov	ip, sp
 c100db8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100dbc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy" );
 c100dc0:	e59f0010 	ldr	r0, [pc, #16]	; c100dd8 <isr_IRQ_dummy+0x28>
 c100dc4:	eb000194 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100dc8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100dcc:	e3a02075 	mov	r2, #117	; 0x75
 c100dd0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100dd4:	eafffffe 	b	c100dd4 <isr_IRQ_dummy+0x24>
 c100dd8:	0c1018fc 	.word	0x0c1018fc

0c100ddc <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void )
{
 c100ddc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100de0:	e1a0c00d 	mov	ip, sp
 c100de4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100de8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy" );
 c100dec:	e59f0010 	ldr	r0, [pc, #16]	; c100e04 <isr_FIQ_dummy+0x28>
 c100df0:	eb000189 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100df4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100df8:	e3a02075 	mov	r2, #117	; 0x75
 c100dfc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100e00:	eafffffe 	b	c100e00 <isr_FIQ_dummy+0x24>
 c100e04:	0c101928 	.word	0x0c101928

0c100e08 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void )
{
 c100e08:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100e0c:	e1a0c00d 	mov	ip, sp
 c100e10:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100e14:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy" );
 c100e18:	e59f0010 	ldr	r0, [pc, #16]	; c100e30 <isr_PABORT_dummy+0x28>
 c100e1c:	eb00017e 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100e20:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100e24:	e3a02075 	mov	r2, #117	; 0x75
 c100e28:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100e2c:	eafffffe 	b	c100e2c <isr_PABORT_dummy+0x24>
 c100e30:	0c101954 	.word	0x0c101954

0c100e34 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void )
{
 c100e34:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100e38:	e1a0c00d 	mov	ip, sp
 c100e3c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100e40:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy" );
 c100e44:	e59f0010 	ldr	r0, [pc, #16]	; c100e5c <isr_DABORT_dummy+0x28>
 c100e48:	eb000173 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100e4c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100e50:	e3a02075 	mov	r2, #117	; 0x75
 c100e54:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100e58:	eafffffe 	b	c100e58 <isr_DABORT_dummy+0x24>
 c100e5c:	0c101984 	.word	0x0c101984

0c100e60 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void )
{
 c100e60:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100e64:	e1a0c00d 	mov	ip, sp
 c100e68:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100e6c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy" );
 c100e70:	e59f0010 	ldr	r0, [pc, #16]	; c100e88 <isr_ADC_dummy+0x28>
 c100e74:	eb000168 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100e78:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100e7c:	e3a02075 	mov	r2, #117	; 0x75
 c100e80:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100e84:	eafffffe 	b	c100e84 <isr_ADC_dummy+0x24>
 c100e88:	0c1019b4 	.word	0x0c1019b4

0c100e8c <isr_RTC_dummy>:
}

void isr_RTC_dummy( void )
{
 c100e8c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100e90:	e1a0c00d 	mov	ip, sp
 c100e94:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100e98:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy" );
 c100e9c:	e59f0010 	ldr	r0, [pc, #16]	; c100eb4 <isr_RTC_dummy+0x28>
 c100ea0:	eb00015d 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100ea4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100ea8:	e3a02075 	mov	r2, #117	; 0x75
 c100eac:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100eb0:	eafffffe 	b	c100eb0 <isr_RTC_dummy+0x24>
 c100eb4:	0c1019e0 	.word	0x0c1019e0

0c100eb8 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void )
{
 c100eb8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100ebc:	e1a0c00d 	mov	ip, sp
 c100ec0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100ec4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy" );
 c100ec8:	e59f0010 	ldr	r0, [pc, #16]	; c100ee0 <isr_UTXD1_dummy+0x28>
 c100ecc:	eb000152 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100ed0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100ed4:	e3a02075 	mov	r2, #117	; 0x75
 c100ed8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100edc:	eafffffe 	b	c100edc <isr_UTXD1_dummy+0x24>
 c100ee0:	0c101a0c 	.word	0x0c101a0c

0c100ee4 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void )
{
 c100ee4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100ee8:	e1a0c00d 	mov	ip, sp
 c100eec:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100ef0:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy" );
 c100ef4:	e59f0010 	ldr	r0, [pc, #16]	; c100f0c <isr_UTXD0_dummy+0x28>
 c100ef8:	eb000147 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100efc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100f00:	e3a02075 	mov	r2, #117	; 0x75
 c100f04:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100f08:	eafffffe 	b	c100f08 <isr_UTXD0_dummy+0x24>
 c100f0c:	0c101a3c 	.word	0x0c101a3c

0c100f10 <isr_SIO_dummy>:
}

void isr_SIO_dummy( void )
{
 c100f10:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100f14:	e1a0c00d 	mov	ip, sp
 c100f18:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100f1c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy" );
 c100f20:	e59f0010 	ldr	r0, [pc, #16]	; c100f38 <isr_SIO_dummy+0x28>
 c100f24:	eb00013c 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100f28:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100f2c:	e3a02075 	mov	r2, #117	; 0x75
 c100f30:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100f34:	eafffffe 	b	c100f34 <isr_SIO_dummy+0x24>
 c100f38:	0c101a6c 	.word	0x0c101a6c

0c100f3c <isr_IIC_dummy>:
}

void isr_IIC_dummy( void )
{
 c100f3c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100f40:	e1a0c00d 	mov	ip, sp
 c100f44:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100f48:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy" );
 c100f4c:	e59f0010 	ldr	r0, [pc, #16]	; c100f64 <isr_IIC_dummy+0x28>
 c100f50:	eb000131 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100f54:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100f58:	e3a02075 	mov	r2, #117	; 0x75
 c100f5c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100f60:	eafffffe 	b	c100f60 <isr_IIC_dummy+0x24>
 c100f64:	0c101a98 	.word	0x0c101a98

0c100f68 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void )
{
 c100f68:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100f6c:	e1a0c00d 	mov	ip, sp
 c100f70:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100f74:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URCD1_dummy" );
 c100f78:	e59f0010 	ldr	r0, [pc, #16]	; c100f90 <isr_URXD1_dummy+0x28>
 c100f7c:	eb000126 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100f80:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100f84:	e3a02075 	mov	r2, #117	; 0x75
 c100f88:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100f8c:	eafffffe 	b	c100f8c <isr_URXD1_dummy+0x24>
 c100f90:	0c101ac4 	.word	0x0c101ac4

0c100f94 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void )
{
 c100f94:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100f98:	e1a0c00d 	mov	ip, sp
 c100f9c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100fa0:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URCD0_dummy" );
 c100fa4:	e59f0010 	ldr	r0, [pc, #16]	; c100fbc <isr_URXD0_dummy+0x28>
 c100fa8:	eb00011b 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100fac:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100fb0:	e3a02075 	mov	r2, #117	; 0x75
 c100fb4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100fb8:	eafffffe 	b	c100fb8 <isr_URXD0_dummy+0x24>
 c100fbc:	0c101af4 	.word	0x0c101af4

0c100fc0 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void )
{
 c100fc0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100fc4:	e1a0c00d 	mov	ip, sp
 c100fc8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100fcc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy" );
 c100fd0:	e59f0010 	ldr	r0, [pc, #16]	; c100fe8 <isr_TIMER5_dummy+0x28>
 c100fd4:	eb000110 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c100fd8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100fdc:	e3a02075 	mov	r2, #117	; 0x75
 c100fe0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c100fe4:	eafffffe 	b	c100fe4 <isr_TIMER5_dummy+0x24>
 c100fe8:	0c101b24 	.word	0x0c101b24

0c100fec <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void )
{
 c100fec:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100ff0:	e1a0c00d 	mov	ip, sp
 c100ff4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100ff8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy" );
 c100ffc:	e59f0010 	ldr	r0, [pc, #16]	; c101014 <isr_TIMER4_dummy+0x28>
 c101000:	eb000105 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101004:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101008:	e3a02075 	mov	r2, #117	; 0x75
 c10100c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101010:	eafffffe 	b	c101010 <isr_TIMER4_dummy+0x24>
 c101014:	0c101b54 	.word	0x0c101b54

0c101018 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void )
{
 c101018:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10101c:	e1a0c00d 	mov	ip, sp
 c101020:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101024:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy" );
 c101028:	e59f0010 	ldr	r0, [pc, #16]	; c101040 <isr_TIMER3_dummy+0x28>
 c10102c:	eb0000fa 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101030:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101034:	e3a02075 	mov	r2, #117	; 0x75
 c101038:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10103c:	eafffffe 	b	c10103c <isr_TIMER3_dummy+0x24>
 c101040:	0c101b84 	.word	0x0c101b84

0c101044 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void )
{
 c101044:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101048:	e1a0c00d 	mov	ip, sp
 c10104c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101050:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy" );
 c101054:	e59f0010 	ldr	r0, [pc, #16]	; c10106c <isr_TIMER2_dummy+0x28>
 c101058:	eb0000ef 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c10105c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101060:	e3a02075 	mov	r2, #117	; 0x75
 c101064:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101068:	eafffffe 	b	c101068 <isr_TIMER2_dummy+0x24>
 c10106c:	0c101bb4 	.word	0x0c101bb4

0c101070 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void )
{
 c101070:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101074:	e1a0c00d 	mov	ip, sp
 c101078:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10107c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy" );
 c101080:	e59f0010 	ldr	r0, [pc, #16]	; c101098 <isr_TIMER1_dummy+0x28>
 c101084:	eb0000e4 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101088:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10108c:	e3a02075 	mov	r2, #117	; 0x75
 c101090:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101094:	eafffffe 	b	c101094 <isr_TIMER1_dummy+0x24>
 c101098:	0c101be4 	.word	0x0c101be4

0c10109c <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void )
{
 c10109c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1010a0:	e1a0c00d 	mov	ip, sp
 c1010a4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1010a8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy" );
 c1010ac:	e59f0010 	ldr	r0, [pc, #16]	; c1010c4 <isr_TIMER0_dummy+0x28>
 c1010b0:	eb0000d9 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c1010b4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1010b8:	e3a02075 	mov	r2, #117	; 0x75
 c1010bc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1010c0:	eafffffe 	b	c1010c0 <isr_TIMER0_dummy+0x24>
 c1010c4:	0c101c14 	.word	0x0c101c14

0c1010c8 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void )
{
 c1010c8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1010cc:	e1a0c00d 	mov	ip, sp
 c1010d0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1010d4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy" );
 c1010d8:	e59f0010 	ldr	r0, [pc, #16]	; c1010f0 <isr_UERR01_dummy+0x28>
 c1010dc:	eb0000ce 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c1010e0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1010e4:	e3a02075 	mov	r2, #117	; 0x75
 c1010e8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1010ec:	eafffffe 	b	c1010ec <isr_UERR01_dummy+0x24>
 c1010f0:	0c101c44 	.word	0x0c101c44

0c1010f4 <isr_WDT_dummy>:
}

void isr_WDT_dummy( void )
{
 c1010f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1010f8:	e1a0c00d 	mov	ip, sp
 c1010fc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101100:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy" );
 c101104:	e59f0010 	ldr	r0, [pc, #16]	; c10111c <isr_WDT_dummy+0x28>
 c101108:	eb0000c3 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c10110c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101110:	e3a02075 	mov	r2, #117	; 0x75
 c101114:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101118:	eafffffe 	b	c101118 <isr_WDT_dummy+0x24>
 c10111c:	0c101c74 	.word	0x0c101c74

0c101120 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void )
{
 c101120:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101124:	e1a0c00d 	mov	ip, sp
 c101128:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10112c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy" );
 c101130:	e59f0010 	ldr	r0, [pc, #16]	; c101148 <isr_BDMA1_dummy+0x28>
 c101134:	eb0000b8 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101138:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10113c:	e3a02075 	mov	r2, #117	; 0x75
 c101140:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101144:	eafffffe 	b	c101144 <isr_BDMA1_dummy+0x24>
 c101148:	0c101ca0 	.word	0x0c101ca0

0c10114c <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void )
{
 c10114c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101150:	e1a0c00d 	mov	ip, sp
 c101154:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101158:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy" );
 c10115c:	e59f0010 	ldr	r0, [pc, #16]	; c101174 <isr_BDMA0_dummy+0x28>
 c101160:	eb0000ad 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101164:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101168:	e3a02075 	mov	r2, #117	; 0x75
 c10116c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101170:	eafffffe 	b	c101170 <isr_BDMA0_dummy+0x24>
 c101174:	0c101cd0 	.word	0x0c101cd0

0c101178 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void )
{
 c101178:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10117c:	e1a0c00d 	mov	ip, sp
 c101180:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101184:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy" );
 c101188:	e59f0010 	ldr	r0, [pc, #16]	; c1011a0 <isr_ZDMA1_dummy+0x28>
 c10118c:	eb0000a2 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101190:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101194:	e3a02075 	mov	r2, #117	; 0x75
 c101198:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10119c:	eafffffe 	b	c10119c <isr_ZDMA1_dummy+0x24>
 c1011a0:	0c101d00 	.word	0x0c101d00

0c1011a4 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void )
{
 c1011a4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011a8:	e1a0c00d 	mov	ip, sp
 c1011ac:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1011b0:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy" );
 c1011b4:	e59f0010 	ldr	r0, [pc, #16]	; c1011cc <isr_ZDMA0_dummy+0x28>
 c1011b8:	eb000097 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c1011bc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1011c0:	e3a02075 	mov	r2, #117	; 0x75
 c1011c4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1011c8:	eafffffe 	b	c1011c8 <isr_ZDMA0_dummy+0x24>
 c1011cc:	0c101d30 	.word	0x0c101d30

0c1011d0 <isr_TICK_dummy>:
}

void isr_TICK_dummy( void )
{
 c1011d0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011d4:	e1a0c00d 	mov	ip, sp
 c1011d8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1011dc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c1011e0:	e59f0010 	ldr	r0, [pc, #16]	; c1011f8 <isr_TICK_dummy+0x28>
 c1011e4:	eb00008c 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c1011e8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1011ec:	e3a02075 	mov	r2, #117	; 0x75
 c1011f0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1011f4:	eafffffe 	b	c1011f4 <isr_TICK_dummy+0x24>
 c1011f8:	0c101d60 	.word	0x0c101d60

0c1011fc <isr_PB_dummy>:
}

void isr_PB_dummy( void )
{
 c1011fc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101200:	e1a0c00d 	mov	ip, sp
 c101204:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101208:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PB_dummy" );
 c10120c:	e59f0010 	ldr	r0, [pc, #16]	; c101224 <isr_PB_dummy+0x28>
 c101210:	eb000081 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101214:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101218:	e3a02075 	mov	r2, #117	; 0x75
 c10121c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101220:	eafffffe 	b	c101220 <isr_PB_dummy+0x24>
 c101224:	0c101d90 	.word	0x0c101d90

0c101228 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void )
{
 c101228:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10122c:	e1a0c00d 	mov	ip, sp
 c101230:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101234:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy" );
 c101238:	e59f0010 	ldr	r0, [pc, #16]	; c101250 <isr_ETHERNET_dummy+0x28>
 c10123c:	eb000076 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101240:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101244:	e3a02075 	mov	r2, #117	; 0x75
 c101248:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10124c:	eafffffe 	b	c10124c <isr_ETHERNET_dummy+0x24>
 c101250:	0c101dbc 	.word	0x0c101dbc

0c101254 <isr_TS_dummy>:
}

void isr_TS_dummy( void )
{
 c101254:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101258:	e1a0c00d 	mov	ip, sp
 c10125c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101260:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TS_dummy" );
 c101264:	e59f0010 	ldr	r0, [pc, #16]	; c10127c <isr_TS_dummy+0x28>
 c101268:	eb00006b 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c10126c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101270:	e3a02075 	mov	r2, #117	; 0x75
 c101274:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101278:	eafffffe 	b	c101278 <isr_TS_dummy+0x24>
 c10127c:	0c101df0 	.word	0x0c101df0

0c101280 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void )
{
 c101280:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101284:	e1a0c00d 	mov	ip, sp
 c101288:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10128c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy" );
 c101290:	e59f0010 	ldr	r0, [pc, #16]	; c1012a8 <isr_KEYPAD_dummy+0x28>
 c101294:	eb000060 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c101298:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10129c:	e3a02075 	mov	r2, #117	; 0x75
 c1012a0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1012a4:	eafffffe 	b	c1012a4 <isr_KEYPAD_dummy+0x24>
 c1012a8:	0c101e1c 	.word	0x0c101e1c

0c1012ac <isr_USB_dummy>:
}

void isr_USB_dummy( void )
{
 c1012ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1012b0:	e1a0c00d 	mov	ip, sp
 c1012b4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1012b8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_USB_dummy" );
 c1012bc:	e59f0010 	ldr	r0, [pc, #16]	; c1012d4 <isr_USB_dummy+0x28>
 c1012c0:	eb000055 	bl	c10141c <uart0_puts>
    SEGS = 0x75;
 c1012c4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1012c8:	e3a02075 	mov	r2, #117	; 0x75
 c1012cc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1012d0:	eafffffe 	b	c1012d0 <isr_USB_dummy+0x24>
 c1012d4:	0c101e4c 	.word	0x0c101e4c

0c1012d8 <show_sys_info>:
}

static void show_sys_info( void )
{
 c1012d8:	e1a0c00d 	mov	ip, sp
 c1012dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1012e0:	e24cb004 	sub	fp, ip, #4
    //
}
 c1012e4:	e24bd00c 	sub	sp, fp, #12
 c1012e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012ec:	e12fff1e 	bx	lr

0c1012f0 <sleep>:

inline void sleep( void )
{
 c1012f0:	e1a0c00d 	mov	ip, sp
 c1012f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1012f8:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c1012fc:	e59f3018 	ldr	r3, [pc, #24]	; c10131c <sleep+0x2c>
 c101300:	e59f2014 	ldr	r2, [pc, #20]	; c10131c <sleep+0x2c>
 c101304:	e5922000 	ldr	r2, [r2]
 c101308:	e3822004 	orr	r2, r2, #4
 c10130c:	e5832000 	str	r2, [r3]
}
 c101310:	e24bd00c 	sub	sp, fp, #12
 c101314:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101318:	e12fff1e 	bx	lr
 c10131c:	01d80004 	.word	0x01d80004

0c101320 <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c101320:	e1a0c00d 	mov	ip, sp
 c101324:	e92dd800 	push	{fp, ip, lr, pc}
 c101328:	e24cb004 	sub	fp, ip, #4
    UFCON0 = 0x1;
 c10132c:	e59f3040 	ldr	r3, [pc, #64]	; c101374 <uart0_init+0x54>
 c101330:	e3a02001 	mov	r2, #1
 c101334:	e5832000 	str	r2, [r3]
    UMCON0 = 0x0;
 c101338:	e59f3038 	ldr	r3, [pc, #56]	; c101378 <uart0_init+0x58>
 c10133c:	e3a02000 	mov	r2, #0
 c101340:	e5832000 	str	r2, [r3]
    ULCON0 = 0x3;
 c101344:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c101348:	e3a02003 	mov	r2, #3
 c10134c:	e5832000 	str	r2, [r3]
    UBRDIV0 = 0x22;
 c101350:	e59f3024 	ldr	r3, [pc, #36]	; c10137c <uart0_init+0x5c>
 c101354:	e3a02022 	mov	r2, #34	; 0x22
 c101358:	e5832000 	str	r2, [r3]
    UCON0 = 0x5;
 c10135c:	e59f301c 	ldr	r3, [pc, #28]	; c101380 <uart0_init+0x60>
 c101360:	e3a02005 	mov	r2, #5
 c101364:	e5832000 	str	r2, [r3]
}
 c101368:	e24bd00c 	sub	sp, fp, #12
 c10136c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101370:	e12fff1e 	bx	lr
 c101374:	01d00008 	.word	0x01d00008
 c101378:	01d0000c 	.word	0x01d0000c
 c10137c:	01d00028 	.word	0x01d00028
 c101380:	01d00004 	.word	0x01d00004

0c101384 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c101384:	e1a0c00d 	mov	ip, sp
 c101388:	e92dd800 	push	{fp, ip, lr, pc}
 c10138c:	e24cb004 	sub	fp, ip, #4
 c101390:	e24dd008 	sub	sp, sp, #8
 c101394:	e1a03000 	mov	r3, r0
 c101398:	e54b300d 	strb	r3, [fp, #-13]
    while( UFSTAT0 & (1<<9) ); // leemos del bit 9 full
 c10139c:	e1a00000 	nop			; (mov r0, r0)
 c1013a0:	e59f3024 	ldr	r3, [pc, #36]	; c1013cc <uart0_putchar+0x48>
 c1013a4:	e5933000 	ldr	r3, [r3]
 c1013a8:	e2033c02 	and	r3, r3, #512	; 0x200
 c1013ac:	e3530000 	cmp	r3, #0
 c1013b0:	1afffffa 	bne	c1013a0 <uart0_putchar+0x1c>
    UTXH0 = ch;
 c1013b4:	e59f3014 	ldr	r3, [pc, #20]	; c1013d0 <uart0_putchar+0x4c>
 c1013b8:	e55b200d 	ldrb	r2, [fp, #-13]
 c1013bc:	e5832000 	str	r2, [r3]
}        
 c1013c0:	e24bd00c 	sub	sp, fp, #12
 c1013c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1013c8:	e12fff1e 	bx	lr
 c1013cc:	01d00018 	.word	0x01d00018
 c1013d0:	01d00020 	.word	0x01d00020

0c1013d4 <uart0_getchar>:

char uart0_getchar( void )
{
 c1013d4:	e1a0c00d 	mov	ip, sp
 c1013d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1013dc:	e24cb004 	sub	fp, ip, #4
    while( (UFSTAT0 & 0xf) == 0 ); // leemos del URx fifo
 c1013e0:	e1a00000 	nop			; (mov r0, r0)
 c1013e4:	e59f3028 	ldr	r3, [pc, #40]	; c101414 <uart0_getchar+0x40>
 c1013e8:	e5933000 	ldr	r3, [r3]
 c1013ec:	e203300f 	and	r3, r3, #15
 c1013f0:	e3530000 	cmp	r3, #0
 c1013f4:	0afffffa 	beq	c1013e4 <uart0_getchar+0x10>
    return URXH0;
 c1013f8:	e59f3018 	ldr	r3, [pc, #24]	; c101418 <uart0_getchar+0x44>
 c1013fc:	e5933000 	ldr	r3, [r3]
 c101400:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c101404:	e1a00003 	mov	r0, r3
 c101408:	e24bd00c 	sub	sp, fp, #12
 c10140c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101410:	e12fff1e 	bx	lr
 c101414:	01d00018 	.word	0x01d00018
 c101418:	01d00024 	.word	0x01d00024

0c10141c <uart0_puts>:

void uart0_puts( char *s )
{
 c10141c:	e1a0c00d 	mov	ip, sp
 c101420:	e92dd800 	push	{fp, ip, lr, pc}
 c101424:	e24cb004 	sub	fp, ip, #4
 c101428:	e24dd008 	sub	sp, sp, #8
 c10142c:	e50b0010 	str	r0, [fp, #-16]
	while( *s  ) uart0_putchar( *s++ );
 c101430:	ea000006 	b	c101450 <uart0_puts+0x34>
 c101434:	e51b3010 	ldr	r3, [fp, #-16]
 c101438:	e5d33000 	ldrb	r3, [r3]
 c10143c:	e51b2010 	ldr	r2, [fp, #-16]
 c101440:	e2822001 	add	r2, r2, #1
 c101444:	e50b2010 	str	r2, [fp, #-16]
 c101448:	e1a00003 	mov	r0, r3
 c10144c:	ebffffcc 	bl	c101384 <uart0_putchar>
 c101450:	e51b3010 	ldr	r3, [fp, #-16]
 c101454:	e5d33000 	ldrb	r3, [r3]
 c101458:	e3530000 	cmp	r3, #0
 c10145c:	1afffff4 	bne	c101434 <uart0_puts+0x18>
}
 c101460:	e24bd00c 	sub	sp, fp, #12
 c101464:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101468:	e12fff1e 	bx	lr

0c10146c <uart0_putint>:

void uart0_putint( int32 i )
{
 c10146c:	e1a0c00d 	mov	ip, sp
 c101470:	e92dd800 	push	{fp, ip, lr, pc}
 c101474:	e24cb004 	sub	fp, ip, #4
 c101478:	e24dd020 	sub	sp, sp, #32
 c10147c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
	int8 num = 1;
 c101480:	e3a03001 	mov	r3, #1
 c101484:	e54b300d 	strb	r3, [fp, #-13]
	if(i < 0) {
 c101488:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10148c:	e3530000 	cmp	r3, #0
 c101490:	aa000004 	bge	c1014a8 <uart0_putint+0x3c>
		num = -1;
 c101494:	e3e03000 	mvn	r3, #0
 c101498:	e54b300d 	strb	r3, [fp, #-13]
		i *= -1;
 c10149c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1014a0:	e2633000 	rsb	r3, r3, #0
 c1014a4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	}

    char buf[8 + 1];
    char *p = buf + 8;
 c1014a8:	e24b3020 	sub	r3, fp, #32
 c1014ac:	e2833008 	add	r3, r3, #8
 c1014b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int8 c;

    *p = '\0';
 c1014b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1014b8:	e3a02000 	mov	r2, #0
 c1014bc:	e5c32000 	strb	r2, [r3]

    do {
        c = i % 10;
 c1014c0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c1014c4:	e59f30a8 	ldr	r3, [pc, #168]	; c101574 <uart0_putint+0x108>
 c1014c8:	e0c32391 	smull	r2, r3, r1, r3
 c1014cc:	e1a02143 	asr	r2, r3, #2
 c1014d0:	e1a03fc1 	asr	r3, r1, #31
 c1014d4:	e0632002 	rsb	r2, r3, r2
 c1014d8:	e1a03002 	mov	r3, r2
 c1014dc:	e1a03103 	lsl	r3, r3, #2
 c1014e0:	e0833002 	add	r3, r3, r2
 c1014e4:	e1a03083 	lsl	r3, r3, #1
 c1014e8:	e0632001 	rsb	r2, r3, r1
 c1014ec:	e1a03002 	mov	r3, r2
 c1014f0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        *--p = '0' + c;
 c1014f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1014f8:	e2433001 	sub	r3, r3, #1
 c1014fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c101500:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101504:	e2833030 	add	r3, r3, #48	; 0x30
 c101508:	e20320ff 	and	r2, r3, #255	; 0xff
 c10150c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101510:	e5c32000 	strb	r2, [r3]
        i /= 10;
 c101514:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c101518:	e59f2054 	ldr	r2, [pc, #84]	; c101574 <uart0_putint+0x108>
 c10151c:	e0c21293 	smull	r1, r2, r3, r2
 c101520:	e1a02142 	asr	r2, r2, #2
 c101524:	e1a03fc3 	asr	r3, r3, #31
 c101528:	e0633002 	rsb	r3, r3, r2
 c10152c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i > 0 );
 c101530:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c101534:	e3530000 	cmp	r3, #0
 c101538:	caffffe0 	bgt	c1014c0 <uart0_putint+0x54>

    if(num == -1) *--p = '-';
 c10153c:	e15b30dd 	ldrsb	r3, [fp, #-13]
 c101540:	e3730001 	cmn	r3, #1
 c101544:	1a000005 	bne	c101560 <uart0_putint+0xf4>
 c101548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10154c:	e2433001 	sub	r3, r3, #1
 c101550:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c101554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101558:	e3a0202d 	mov	r2, #45	; 0x2d
 c10155c:	e5c32000 	strb	r2, [r3]

    uart0_puts( p );
 c101560:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 c101564:	ebffffac 	bl	c10141c <uart0_puts>
}
 c101568:	e24bd00c 	sub	sp, fp, #12
 c10156c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101570:	e12fff1e 	bx	lr
 c101574:	66666667 	.word	0x66666667

0c101578 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c101578:	e1a0c00d 	mov	ip, sp
 c10157c:	e92dd800 	push	{fp, ip, lr, pc}
 c101580:	e24cb004 	sub	fp, ip, #4
 c101584:	e24dd018 	sub	sp, sp, #24
 c101588:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c10158c:	e24b301c 	sub	r3, fp, #28
 c101590:	e2833008 	add	r3, r3, #8
 c101594:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c101598:	e51b3010 	ldr	r3, [fp, #-16]
 c10159c:	e3a02000 	mov	r2, #0
 c1015a0:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c1015a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1015a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1015ac:	e203300f 	and	r3, r3, #15
 c1015b0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c1015b4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1015b8:	e3530009 	cmp	r3, #9
 c1015bc:	8a000008 	bhi	c1015e4 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c1015c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1015c4:	e2433001 	sub	r3, r3, #1
 c1015c8:	e50b3010 	str	r3, [fp, #-16]
 c1015cc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1015d0:	e2833030 	add	r3, r3, #48	; 0x30
 c1015d4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1015d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1015dc:	e5c32000 	strb	r2, [r3]
 c1015e0:	ea000007 	b	c101604 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c1015e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1015e8:	e2433001 	sub	r3, r3, #1
 c1015ec:	e50b3010 	str	r3, [fp, #-16]
 c1015f0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1015f4:	e2833057 	add	r3, r3, #87	; 0x57
 c1015f8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1015fc:	e51b3010 	ldr	r3, [fp, #-16]
 c101600:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c101604:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101608:	e1a03223 	lsr	r3, r3, #4
 c10160c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c101610:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101614:	e3530000 	cmp	r3, #0
 c101618:	1affffe1 	bne	c1015a4 <uart0_puthex+0x2c>

    uart0_puts( p );
 c10161c:	e51b0010 	ldr	r0, [fp, #-16]
 c101620:	ebffff7d 	bl	c10141c <uart0_puts>
}
 c101624:	e24bd00c 	sub	sp, fp, #12
 c101628:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10162c:	e12fff1e 	bx	lr

0c101630 <uart0_gets>:

void uart0_gets( char *s )
{
 c101630:	e1a0c00d 	mov	ip, sp
 c101634:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c101638:	e24cb004 	sub	fp, ip, #4
 c10163c:	e24dd014 	sub	sp, sp, #20
 c101640:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	int i = 0;
 c101644:	e3a03000 	mov	r3, #0
 c101648:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	while( (s[i] = uart0_getchar( )) != '\n' ) i++;
 c10164c:	ea000002 	b	c10165c <uart0_gets+0x2c>
 c101650:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101654:	e2833001 	add	r3, r3, #1
 c101658:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10165c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101660:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101664:	e0824003 	add	r4, r2, r3
 c101668:	ebffff59 	bl	c1013d4 <uart0_getchar>
 c10166c:	e1a03000 	mov	r3, r0
 c101670:	e5c43000 	strb	r3, [r4]
 c101674:	e5d43000 	ldrb	r3, [r4]
 c101678:	e353000a 	cmp	r3, #10
 c10167c:	1afffff3 	bne	c101650 <uart0_gets+0x20>
	s[i] = '\0';
 c101680:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101684:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101688:	e0823003 	add	r3, r2, r3
 c10168c:	e3a02000 	mov	r2, #0
 c101690:	e5c32000 	strb	r2, [r3]
}
 c101694:	e24bd010 	sub	sp, fp, #16
 c101698:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10169c:	e12fff1e 	bx	lr

0c1016a0 <uart0_getint>:

int32 uart0_getint( void )
{
 c1016a0:	e1a0c00d 	mov	ip, sp
 c1016a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1016a8:	e24cb004 	sub	fp, ip, #4
 c1016ac:	e24dd008 	sub	sp, sp, #8
	int32 num = 0;
 c1016b0:	e3a03000 	mov	r3, #0
 c1016b4:	e50b3010 	str	r3, [fp, #-16]
	char n = uart0_getchar( );
 c1016b8:	ebffff45 	bl	c1013d4 <uart0_getchar>
 c1016bc:	e1a03000 	mov	r3, r0
 c1016c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	int8 neg = 1;
 c1016c4:	e3a03001 	mov	r3, #1
 c1016c8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

	while( n != '\n' ) {
 c1016cc:	ea000013 	b	c101720 <uart0_getint+0x80>
		if(n == '-') neg = -1;
 c1016d0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1016d4:	e353002d 	cmp	r3, #45	; 0x2d
 c1016d8:	1a000002 	bne	c1016e8 <uart0_getint+0x48>
 c1016dc:	e3e03000 	mvn	r3, #0
 c1016e0:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
 c1016e4:	ea00000a 	b	c101714 <uart0_getint+0x74>
		else {
			num *= 10;
 c1016e8:	e51b2010 	ldr	r2, [fp, #-16]
 c1016ec:	e1a03002 	mov	r3, r2
 c1016f0:	e1a03103 	lsl	r3, r3, #2
 c1016f4:	e0833002 	add	r3, r3, r2
 c1016f8:	e1a03083 	lsl	r3, r3, #1
 c1016fc:	e50b3010 	str	r3, [fp, #-16]
			num += (n - '0');
 c101700:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101704:	e2433030 	sub	r3, r3, #48	; 0x30
 c101708:	e51b2010 	ldr	r2, [fp, #-16]
 c10170c:	e0823003 	add	r3, r2, r3
 c101710:	e50b3010 	str	r3, [fp, #-16]
		}
		n = uart0_getchar( );
 c101714:	ebffff2e 	bl	c1013d4 <uart0_getchar>
 c101718:	e1a03000 	mov	r3, r0
 c10171c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
{
	int32 num = 0;
	char n = uart0_getchar( );
	int8 neg = 1;

	while( n != '\n' ) {
 c101720:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101724:	e353000a 	cmp	r3, #10
 c101728:	1affffe8 	bne	c1016d0 <uart0_getint+0x30>
			num *= 10;
			num += (n - '0');
		}
		n = uart0_getchar( );
	}
	return num * neg;
 c10172c:	e15b31d2 	ldrsb	r3, [fp, #-18]	; 0xffffffee
 c101730:	e51b2010 	ldr	r2, [fp, #-16]
 c101734:	e0030392 	mul	r3, r2, r3
}
 c101738:	e1a00003 	mov	r0, r3
 c10173c:	e24bd00c 	sub	sp, fp, #12
 c101740:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101744:	e12fff1e 	bx	lr

0c101748 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c101748:	e1a0c00d 	mov	ip, sp
 c10174c:	e92dd800 	push	{fp, ip, lr, pc}
 c101750:	e24cb004 	sub	fp, ip, #4
 c101754:	e24dd008 	sub	sp, sp, #8
	uint32 num = 0;
 c101758:	e3a03000 	mov	r3, #0
 c10175c:	e50b3010 	str	r3, [fp, #-16]
	char n = uart0_getchar( );
 c101760:	ebffff1b 	bl	c1013d4 <uart0_getchar>
 c101764:	e1a03000 	mov	r3, r0
 c101768:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	while( n != '\n' ) {
 c10176c:	ea000014 	b	c1017c4 <uart0_gethex+0x7c>
		num *= 16;
 c101770:	e51b3010 	ldr	r3, [fp, #-16]
 c101774:	e1a03203 	lsl	r3, r3, #4
 c101778:	e50b3010 	str	r3, [fp, #-16]
		if(n - '0' < 10) num += (n - '0');
 c10177c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101780:	e2433030 	sub	r3, r3, #48	; 0x30
 c101784:	e3530009 	cmp	r3, #9
 c101788:	ca000005 	bgt	c1017a4 <uart0_gethex+0x5c>
 c10178c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c101790:	e51b3010 	ldr	r3, [fp, #-16]
 c101794:	e0823003 	add	r3, r2, r3
 c101798:	e2433030 	sub	r3, r3, #48	; 0x30
 c10179c:	e50b3010 	str	r3, [fp, #-16]
 c1017a0:	ea000004 	b	c1017b8 <uart0_gethex+0x70>
		else num += ((n - 'A') + 10);
 c1017a4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1017a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1017ac:	e0823003 	add	r3, r2, r3
 c1017b0:	e2433037 	sub	r3, r3, #55	; 0x37
 c1017b4:	e50b3010 	str	r3, [fp, #-16]
		n = uart0_getchar( );
 c1017b8:	ebffff05 	bl	c1013d4 <uart0_getchar>
 c1017bc:	e1a03000 	mov	r3, r0
 c1017c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
uint32 uart0_gethex( void )
{
	uint32 num = 0;
	char n = uart0_getchar( );

	while( n != '\n' ) {
 c1017c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1017c8:	e353000a 	cmp	r3, #10
 c1017cc:	1affffe7 	bne	c101770 <uart0_gethex+0x28>
		num *= 16;
		if(n - '0' < 10) num += (n - '0');
		else num += ((n - 'A') + 10);
		n = uart0_getchar( );
	}
	return num;
 c1017d0:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1017d4:	e1a00003 	mov	r0, r3
 c1017d8:	e24bd00c 	sub	sp, fp, #12
 c1017dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017e0:	e12fff1e 	bx	lr
