
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004988  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000162c  0c104988  0c104988  0000c988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c105fb4  0c105fb4  0000dfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00009617  0c105fbc  0c105fbc  0000dfbc  2**2
                  ALLOC
  4 .debug_abbrev 0000062a  00000000  00000000  0000dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c4  00000000  00000000  0000e5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000aef  00000000  00000000  0000fcaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 00022fa9  00000000  00000000  00010799  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000115c  00000000  00000000  00033742  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000006df  00000000  00000000  0003489e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000180  00000000  00000000  00034f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e0  00000000  00000000  000350fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000727  00000000  00000000  000351dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  00035904  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000032  00000000  00000000  0003592e  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000fa8  00000000  00000000  00035960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
#include <ts.h>

void lcd_draw_grid( void );

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
    uint16 x, y, ms;

    sys_init();
 c100010:	eb0006b1 	bl	c101adc <sys_init>
    uart0_init();
 c100014:	eb000d7f 	bl	c103618 <uart0_init>
    timers_init();
 c100018:	eb00090b 	bl	c10244c <timers_init>
    lcd_init();
 c10001c:	eb0002a9 	bl	c100ac8 <lcd_init>
    ts_init();
 c100020:	eb000b8f 	bl	c102e64 <ts_init>
    
    lcd_clear();
 c100024:	eb000330 	bl	c100cec <lcd_clear>
    lcd_on();
 c100028:	eb000307 	bl	c100c4c <lcd_on>
    ts_on();
 c10002c:	eb000b9b 	bl	c102ea0 <ts_on>
    lcd_draw_grid();
 c100030:	eb0001bc 	bl	c100728 <lcd_draw_grid>
    
    uart0_puts( "\n\nPulse la pantalla LCD:\n" );
 c100034:	e59f06d4 	ldr	r0, [pc, #1748]	; c100710 <main+0x710>
 c100038:	eb000db5 	bl	c103714 <uart0_puts>
 c10003c:	ea000006 	b	c10005c <main+0x5c>
        {
            lcd_putchar_x2( 272, 196, WHITE, 'F' );
            sw_delay_ms( 200 );
            lcd_putchar_x2( 272, 196, BLACK, 'F' );
        }
    }
 c100040:	e1a00000 	nop			; (mov r0, r0)
 c100044:	ea000004 	b	c10005c <main+0x5c>
 c100048:	e1a00000 	nop			; (mov r0, r0)
 c10004c:	ea000002 	b	c10005c <main+0x5c>
 c100050:	e1a00000 	nop			; (mov r0, r0)
 c100054:	ea000000 	b	c10005c <main+0x5c>
 c100058:	e1a00000 	nop			; (mov r0, r0)
    
    uart0_puts( "\n\nPulse la pantalla LCD:\n" );

    while( 1 )
    {
        ts_getpostime( &x, &y, &ms );
 c10005c:	e24b100e 	sub	r1, fp, #14
 c100060:	e24b2010 	sub	r2, fp, #16
 c100064:	e24b3012 	sub	r3, fp, #18
 c100068:	e1a00001 	mov	r0, r1
 c10006c:	e1a01002 	mov	r1, r2
 c100070:	e1a02003 	mov	r2, r3
 c100074:	eb000c58 	bl	c1031dc <ts_getpostime>
        uart0_puts( "  - Ha pulsado en la posicion (" );
 c100078:	e59f0694 	ldr	r0, [pc, #1684]	; c100714 <main+0x714>
 c10007c:	eb000da4 	bl	c103714 <uart0_puts>
        uart0_putint( x );
 c100080:	e15b30be 	ldrh	r3, [fp, #-14]
 c100084:	e1a00003 	mov	r0, r3
 c100088:	eb000db5 	bl	c103764 <uart0_putint>
        uart0_puts( ", " );
 c10008c:	e59f0684 	ldr	r0, [pc, #1668]	; c100718 <main+0x718>
 c100090:	eb000d9f 	bl	c103714 <uart0_puts>
        uart0_putint( y );
 c100094:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100098:	e1a00003 	mov	r0, r3
 c10009c:	eb000db0 	bl	c103764 <uart0_putint>
        uart0_puts( ") durante " );
 c1000a0:	e59f0674 	ldr	r0, [pc, #1652]	; c10071c <main+0x71c>
 c1000a4:	eb000d9a 	bl	c103714 <uart0_puts>
        uart0_putint( ms );
 c1000a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1000ac:	e1a00003 	mov	r0, r3
 c1000b0:	eb000dab 	bl	c103764 <uart0_putint>
        uart0_puts( " ms\n" );
 c1000b4:	e59f0664 	ldr	r0, [pc, #1636]	; c100720 <main+0x720>
 c1000b8:	eb000d95 	bl	c103714 <uart0_puts>
        if( x>0 && y>0 && x<79 && y<59 )
 c1000bc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1000c0:	e3530000 	cmp	r3, #0
 c1000c4:	0a000015 	beq	c100120 <main+0x120>
 c1000c8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1000cc:	e3530000 	cmp	r3, #0
 c1000d0:	0a000012 	beq	c100120 <main+0x120>
 c1000d4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1000d8:	e353004e 	cmp	r3, #78	; 0x4e
 c1000dc:	8a00000f 	bhi	c100120 <main+0x120>
 c1000e0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1000e4:	e353003a 	cmp	r3, #58	; 0x3a
 c1000e8:	8a00000c 	bhi	c100120 <main+0x120>
        {
            lcd_putchar_x2(  32,  16, WHITE, '0' );    
 c1000ec:	e3a00020 	mov	r0, #32
 c1000f0:	e3a01010 	mov	r1, #16
 c1000f4:	e3a02000 	mov	r2, #0
 c1000f8:	e3a03030 	mov	r3, #48	; 0x30
 c1000fc:	eb0004f6 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100100:	e3a000c8 	mov	r0, #200	; 0xc8
 c100104:	eb000979 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2(  32,  16, BLACK, '0' );    
 c100108:	e3a00020 	mov	r0, #32
 c10010c:	e3a01010 	mov	r1, #16
 c100110:	e3a0200f 	mov	r2, #15
 c100114:	e3a03030 	mov	r3, #48	; 0x30
 c100118:	eb0004ef 	bl	c1014dc <lcd_putchar_x2>
 c10011c:	ea00017a 	b	c10070c <main+0x70c>
        } 
        else if( x>79 && y>0 && x<159 && y<59 )
 c100120:	e15b30be 	ldrh	r3, [fp, #-14]
 c100124:	e353004f 	cmp	r3, #79	; 0x4f
 c100128:	9a000015 	bls	c100184 <main+0x184>
 c10012c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100130:	e3530000 	cmp	r3, #0
 c100134:	0a000012 	beq	c100184 <main+0x184>
 c100138:	e15b30be 	ldrh	r3, [fp, #-14]
 c10013c:	e353009e 	cmp	r3, #158	; 0x9e
 c100140:	8a00000f 	bhi	c100184 <main+0x184>
 c100144:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100148:	e353003a 	cmp	r3, #58	; 0x3a
 c10014c:	8a00000c 	bhi	c100184 <main+0x184>
        {
            lcd_putchar_x2( 112,  16, WHITE, '1' );
 c100150:	e3a00070 	mov	r0, #112	; 0x70
 c100154:	e3a01010 	mov	r1, #16
 c100158:	e3a02000 	mov	r2, #0
 c10015c:	e3a03031 	mov	r3, #49	; 0x31
 c100160:	eb0004dd 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100164:	e3a000c8 	mov	r0, #200	; 0xc8
 c100168:	eb000960 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 112,  16, BLACK, '1' );
 c10016c:	e3a00070 	mov	r0, #112	; 0x70
 c100170:	e3a01010 	mov	r1, #16
 c100174:	e3a0200f 	mov	r2, #15
 c100178:	e3a03031 	mov	r3, #49	; 0x31
 c10017c:	eb0004d6 	bl	c1014dc <lcd_putchar_x2>
 c100180:	ea000161 	b	c10070c <main+0x70c>
        } 
        else if( x>159 && y>0 && x<239 && y<59 )
 c100184:	e15b30be 	ldrh	r3, [fp, #-14]
 c100188:	e353009f 	cmp	r3, #159	; 0x9f
 c10018c:	9a000015 	bls	c1001e8 <main+0x1e8>
 c100190:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100194:	e3530000 	cmp	r3, #0
 c100198:	0a000012 	beq	c1001e8 <main+0x1e8>
 c10019c:	e15b30be 	ldrh	r3, [fp, #-14]
 c1001a0:	e35300ee 	cmp	r3, #238	; 0xee
 c1001a4:	8a00000f 	bhi	c1001e8 <main+0x1e8>
 c1001a8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1001ac:	e353003a 	cmp	r3, #58	; 0x3a
 c1001b0:	8a00000c 	bhi	c1001e8 <main+0x1e8>
        {
            lcd_putchar_x2( 192,  16, WHITE, '2' );        
 c1001b4:	e3a000c0 	mov	r0, #192	; 0xc0
 c1001b8:	e3a01010 	mov	r1, #16
 c1001bc:	e3a02000 	mov	r2, #0
 c1001c0:	e3a03032 	mov	r3, #50	; 0x32
 c1001c4:	eb0004c4 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c1001c8:	e3a000c8 	mov	r0, #200	; 0xc8
 c1001cc:	eb000947 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 192,  16, BLACK, '2' );
 c1001d0:	e3a000c0 	mov	r0, #192	; 0xc0
 c1001d4:	e3a01010 	mov	r1, #16
 c1001d8:	e3a0200f 	mov	r2, #15
 c1001dc:	e3a03032 	mov	r3, #50	; 0x32
 c1001e0:	eb0004bd 	bl	c1014dc <lcd_putchar_x2>
 c1001e4:	ea000148 	b	c10070c <main+0x70c>
        }
        else if( x>239 && y>0 && x<319 && y<59 )
 c1001e8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1001ec:	e35300ef 	cmp	r3, #239	; 0xef
 c1001f0:	9a000016 	bls	c100250 <main+0x250>
 c1001f4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1001f8:	e3530000 	cmp	r3, #0
 c1001fc:	0a000013 	beq	c100250 <main+0x250>
 c100200:	e15b20be 	ldrh	r2, [fp, #-14]
 c100204:	e59f3518 	ldr	r3, [pc, #1304]	; c100724 <main+0x724>
 c100208:	e1520003 	cmp	r2, r3
 c10020c:	8a00000f 	bhi	c100250 <main+0x250>
 c100210:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100214:	e353003a 	cmp	r3, #58	; 0x3a
 c100218:	8a00000c 	bhi	c100250 <main+0x250>
        {        
            lcd_putchar_x2( 272,  16, WHITE, '3' );        
 c10021c:	e3a00e11 	mov	r0, #272	; 0x110
 c100220:	e3a01010 	mov	r1, #16
 c100224:	e3a02000 	mov	r2, #0
 c100228:	e3a03033 	mov	r3, #51	; 0x33
 c10022c:	eb0004aa 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100230:	e3a000c8 	mov	r0, #200	; 0xc8
 c100234:	eb00092d 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 272,  16, BLACK, '3' );
 c100238:	e3a00e11 	mov	r0, #272	; 0x110
 c10023c:	e3a01010 	mov	r1, #16
 c100240:	e3a0200f 	mov	r2, #15
 c100244:	e3a03033 	mov	r3, #51	; 0x33
 c100248:	eb0004a3 	bl	c1014dc <lcd_putchar_x2>
 c10024c:	ea00012e 	b	c10070c <main+0x70c>
        }
        else if( x>0 && y>59 && x<79 && y<119 )
 c100250:	e15b30be 	ldrh	r3, [fp, #-14]
 c100254:	e3530000 	cmp	r3, #0
 c100258:	0a000015 	beq	c1002b4 <main+0x2b4>
 c10025c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100260:	e353003b 	cmp	r3, #59	; 0x3b
 c100264:	9a000012 	bls	c1002b4 <main+0x2b4>
 c100268:	e15b30be 	ldrh	r3, [fp, #-14]
 c10026c:	e353004e 	cmp	r3, #78	; 0x4e
 c100270:	8a00000f 	bhi	c1002b4 <main+0x2b4>
 c100274:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100278:	e3530076 	cmp	r3, #118	; 0x76
 c10027c:	8a00000c 	bhi	c1002b4 <main+0x2b4>
        {                    
            lcd_putchar_x2(  32,  76, WHITE, '4' );
 c100280:	e3a00020 	mov	r0, #32
 c100284:	e3a0104c 	mov	r1, #76	; 0x4c
 c100288:	e3a02000 	mov	r2, #0
 c10028c:	e3a03034 	mov	r3, #52	; 0x34
 c100290:	eb000491 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100294:	e3a000c8 	mov	r0, #200	; 0xc8
 c100298:	eb000914 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2(  32,  76, BLACK, '4' );                            
 c10029c:	e3a00020 	mov	r0, #32
 c1002a0:	e3a0104c 	mov	r1, #76	; 0x4c
 c1002a4:	e3a0200f 	mov	r2, #15
 c1002a8:	e3a03034 	mov	r3, #52	; 0x34
 c1002ac:	eb00048a 	bl	c1014dc <lcd_putchar_x2>
 c1002b0:	ea000115 	b	c10070c <main+0x70c>
        }
        else if( x>79 && y>59 && x<159 && y<119 )
 c1002b4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1002b8:	e353004f 	cmp	r3, #79	; 0x4f
 c1002bc:	9a000015 	bls	c100318 <main+0x318>
 c1002c0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1002c4:	e353003b 	cmp	r3, #59	; 0x3b
 c1002c8:	9a000012 	bls	c100318 <main+0x318>
 c1002cc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1002d0:	e353009e 	cmp	r3, #158	; 0x9e
 c1002d4:	8a00000f 	bhi	c100318 <main+0x318>
 c1002d8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1002dc:	e3530076 	cmp	r3, #118	; 0x76
 c1002e0:	8a00000c 	bhi	c100318 <main+0x318>
        {    
            lcd_putchar_x2( 112,  76, WHITE, '5' );
 c1002e4:	e3a00070 	mov	r0, #112	; 0x70
 c1002e8:	e3a0104c 	mov	r1, #76	; 0x4c
 c1002ec:	e3a02000 	mov	r2, #0
 c1002f0:	e3a03035 	mov	r3, #53	; 0x35
 c1002f4:	eb000478 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c1002f8:	e3a000c8 	mov	r0, #200	; 0xc8
 c1002fc:	eb0008fb 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 112,  76, BLACK, '5' );
 c100300:	e3a00070 	mov	r0, #112	; 0x70
 c100304:	e3a0104c 	mov	r1, #76	; 0x4c
 c100308:	e3a0200f 	mov	r2, #15
 c10030c:	e3a03035 	mov	r3, #53	; 0x35
 c100310:	eb000471 	bl	c1014dc <lcd_putchar_x2>
 c100314:	ea0000fc 	b	c10070c <main+0x70c>
        }
        else if( x>159 && y>59 && x<239 && y<119 )
 c100318:	e15b30be 	ldrh	r3, [fp, #-14]
 c10031c:	e353009f 	cmp	r3, #159	; 0x9f
 c100320:	9a000015 	bls	c10037c <main+0x37c>
 c100324:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100328:	e353003b 	cmp	r3, #59	; 0x3b
 c10032c:	9a000012 	bls	c10037c <main+0x37c>
 c100330:	e15b30be 	ldrh	r3, [fp, #-14]
 c100334:	e35300ee 	cmp	r3, #238	; 0xee
 c100338:	8a00000f 	bhi	c10037c <main+0x37c>
 c10033c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100340:	e3530076 	cmp	r3, #118	; 0x76
 c100344:	8a00000c 	bhi	c10037c <main+0x37c>
        {
            lcd_putchar_x2( 192,  76, WHITE, '6' );
 c100348:	e3a000c0 	mov	r0, #192	; 0xc0
 c10034c:	e3a0104c 	mov	r1, #76	; 0x4c
 c100350:	e3a02000 	mov	r2, #0
 c100354:	e3a03036 	mov	r3, #54	; 0x36
 c100358:	eb00045f 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c10035c:	e3a000c8 	mov	r0, #200	; 0xc8
 c100360:	eb0008e2 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 192,  76, BLACK, '6' );
 c100364:	e3a000c0 	mov	r0, #192	; 0xc0
 c100368:	e3a0104c 	mov	r1, #76	; 0x4c
 c10036c:	e3a0200f 	mov	r2, #15
 c100370:	e3a03036 	mov	r3, #54	; 0x36
 c100374:	eb000458 	bl	c1014dc <lcd_putchar_x2>
 c100378:	ea0000e3 	b	c10070c <main+0x70c>
        }
        else if( x>239 && y>59 && x<319 && y<119 )
 c10037c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100380:	e35300ef 	cmp	r3, #239	; 0xef
 c100384:	9a000016 	bls	c1003e4 <main+0x3e4>
 c100388:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10038c:	e353003b 	cmp	r3, #59	; 0x3b
 c100390:	9a000013 	bls	c1003e4 <main+0x3e4>
 c100394:	e15b20be 	ldrh	r2, [fp, #-14]
 c100398:	e59f3384 	ldr	r3, [pc, #900]	; c100724 <main+0x724>
 c10039c:	e1520003 	cmp	r2, r3
 c1003a0:	8a00000f 	bhi	c1003e4 <main+0x3e4>
 c1003a4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1003a8:	e3530076 	cmp	r3, #118	; 0x76
 c1003ac:	8a00000c 	bhi	c1003e4 <main+0x3e4>
        {        
            lcd_putchar_x2( 272,  76, WHITE, '7' );
 c1003b0:	e3a00e11 	mov	r0, #272	; 0x110
 c1003b4:	e3a0104c 	mov	r1, #76	; 0x4c
 c1003b8:	e3a02000 	mov	r2, #0
 c1003bc:	e3a03037 	mov	r3, #55	; 0x37
 c1003c0:	eb000445 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c1003c4:	e3a000c8 	mov	r0, #200	; 0xc8
 c1003c8:	eb0008c8 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 272,  76, BLACK, '7' );
 c1003cc:	e3a00e11 	mov	r0, #272	; 0x110
 c1003d0:	e3a0104c 	mov	r1, #76	; 0x4c
 c1003d4:	e3a0200f 	mov	r2, #15
 c1003d8:	e3a03037 	mov	r3, #55	; 0x37
 c1003dc:	eb00043e 	bl	c1014dc <lcd_putchar_x2>
 c1003e0:	ea0000c9 	b	c10070c <main+0x70c>
        }
        else if( x>0 && y>119 && x<79 && y<179 )
 c1003e4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1003e8:	e3530000 	cmp	r3, #0
 c1003ec:	0a000015 	beq	c100448 <main+0x448>
 c1003f0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1003f4:	e3530077 	cmp	r3, #119	; 0x77
 c1003f8:	9a000012 	bls	c100448 <main+0x448>
 c1003fc:	e15b30be 	ldrh	r3, [fp, #-14]
 c100400:	e353004e 	cmp	r3, #78	; 0x4e
 c100404:	8a00000f 	bhi	c100448 <main+0x448>
 c100408:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10040c:	e35300b2 	cmp	r3, #178	; 0xb2
 c100410:	8a00000c 	bhi	c100448 <main+0x448>
        {        
            lcd_putchar_x2(  32, 136, WHITE, '8' );
 c100414:	e3a00020 	mov	r0, #32
 c100418:	e3a01088 	mov	r1, #136	; 0x88
 c10041c:	e3a02000 	mov	r2, #0
 c100420:	e3a03038 	mov	r3, #56	; 0x38
 c100424:	eb00042c 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100428:	e3a000c8 	mov	r0, #200	; 0xc8
 c10042c:	eb0008af 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2(  32, 136, BLACK, '8' );
 c100430:	e3a00020 	mov	r0, #32
 c100434:	e3a01088 	mov	r1, #136	; 0x88
 c100438:	e3a0200f 	mov	r2, #15
 c10043c:	e3a03038 	mov	r3, #56	; 0x38
 c100440:	eb000425 	bl	c1014dc <lcd_putchar_x2>
 c100444:	ea0000b0 	b	c10070c <main+0x70c>
        }
        else if( x>79 && y>119 && x<159 && y<179 )
 c100448:	e15b30be 	ldrh	r3, [fp, #-14]
 c10044c:	e353004f 	cmp	r3, #79	; 0x4f
 c100450:	9a000015 	bls	c1004ac <main+0x4ac>
 c100454:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100458:	e3530077 	cmp	r3, #119	; 0x77
 c10045c:	9a000012 	bls	c1004ac <main+0x4ac>
 c100460:	e15b30be 	ldrh	r3, [fp, #-14]
 c100464:	e353009e 	cmp	r3, #158	; 0x9e
 c100468:	8a00000f 	bhi	c1004ac <main+0x4ac>
 c10046c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100470:	e35300b2 	cmp	r3, #178	; 0xb2
 c100474:	8a00000c 	bhi	c1004ac <main+0x4ac>
        {
            lcd_putchar_x2( 112, 136, WHITE, '9' );        
 c100478:	e3a00070 	mov	r0, #112	; 0x70
 c10047c:	e3a01088 	mov	r1, #136	; 0x88
 c100480:	e3a02000 	mov	r2, #0
 c100484:	e3a03039 	mov	r3, #57	; 0x39
 c100488:	eb000413 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c10048c:	e3a000c8 	mov	r0, #200	; 0xc8
 c100490:	eb000896 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 112, 136, BLACK, '9' );        
 c100494:	e3a00070 	mov	r0, #112	; 0x70
 c100498:	e3a01088 	mov	r1, #136	; 0x88
 c10049c:	e3a0200f 	mov	r2, #15
 c1004a0:	e3a03039 	mov	r3, #57	; 0x39
 c1004a4:	eb00040c 	bl	c1014dc <lcd_putchar_x2>
 c1004a8:	ea000097 	b	c10070c <main+0x70c>
        }
        else if( x>159 && y>119 && x<239 && y<179 )
 c1004ac:	e15b30be 	ldrh	r3, [fp, #-14]
 c1004b0:	e353009f 	cmp	r3, #159	; 0x9f
 c1004b4:	9a000015 	bls	c100510 <main+0x510>
 c1004b8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1004bc:	e3530077 	cmp	r3, #119	; 0x77
 c1004c0:	9a000012 	bls	c100510 <main+0x510>
 c1004c4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1004c8:	e35300ee 	cmp	r3, #238	; 0xee
 c1004cc:	8a00000f 	bhi	c100510 <main+0x510>
 c1004d0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1004d4:	e35300b2 	cmp	r3, #178	; 0xb2
 c1004d8:	8a00000c 	bhi	c100510 <main+0x510>
        {
            lcd_putchar_x2( 192, 136, WHITE, 'A' );        
 c1004dc:	e3a000c0 	mov	r0, #192	; 0xc0
 c1004e0:	e3a01088 	mov	r1, #136	; 0x88
 c1004e4:	e3a02000 	mov	r2, #0
 c1004e8:	e3a03041 	mov	r3, #65	; 0x41
 c1004ec:	eb0003fa 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c1004f0:	e3a000c8 	mov	r0, #200	; 0xc8
 c1004f4:	eb00087d 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 192, 136, BLACK, 'A' );        
 c1004f8:	e3a000c0 	mov	r0, #192	; 0xc0
 c1004fc:	e3a01088 	mov	r1, #136	; 0x88
 c100500:	e3a0200f 	mov	r2, #15
 c100504:	e3a03041 	mov	r3, #65	; 0x41
 c100508:	eb0003f3 	bl	c1014dc <lcd_putchar_x2>
 c10050c:	ea00007e 	b	c10070c <main+0x70c>
        }
        else if( x>239 && y>119 && x<319 && y<179 )
 c100510:	e15b30be 	ldrh	r3, [fp, #-14]
 c100514:	e35300ef 	cmp	r3, #239	; 0xef
 c100518:	9a000016 	bls	c100578 <main+0x578>
 c10051c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100520:	e3530077 	cmp	r3, #119	; 0x77
 c100524:	9a000013 	bls	c100578 <main+0x578>
 c100528:	e15b20be 	ldrh	r2, [fp, #-14]
 c10052c:	e59f31f0 	ldr	r3, [pc, #496]	; c100724 <main+0x724>
 c100530:	e1520003 	cmp	r2, r3
 c100534:	8a00000f 	bhi	c100578 <main+0x578>
 c100538:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10053c:	e35300b2 	cmp	r3, #178	; 0xb2
 c100540:	8a00000c 	bhi	c100578 <main+0x578>
        {
            lcd_putchar_x2( 272, 136, WHITE, 'B' );
 c100544:	e3a00e11 	mov	r0, #272	; 0x110
 c100548:	e3a01088 	mov	r1, #136	; 0x88
 c10054c:	e3a02000 	mov	r2, #0
 c100550:	e3a03042 	mov	r3, #66	; 0x42
 c100554:	eb0003e0 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100558:	e3a000c8 	mov	r0, #200	; 0xc8
 c10055c:	eb000863 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 272, 136, BLACK, 'B' );
 c100560:	e3a00e11 	mov	r0, #272	; 0x110
 c100564:	e3a01088 	mov	r1, #136	; 0x88
 c100568:	e3a0200f 	mov	r2, #15
 c10056c:	e3a03042 	mov	r3, #66	; 0x42
 c100570:	eb0003d9 	bl	c1014dc <lcd_putchar_x2>
 c100574:	ea000064 	b	c10070c <main+0x70c>
        }
        else if( x>0 && y>179 && x<79 && y<239 )
 c100578:	e15b30be 	ldrh	r3, [fp, #-14]
 c10057c:	e3530000 	cmp	r3, #0
 c100580:	0a000015 	beq	c1005dc <main+0x5dc>
 c100584:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100588:	e35300b3 	cmp	r3, #179	; 0xb3
 c10058c:	9a000012 	bls	c1005dc <main+0x5dc>
 c100590:	e15b30be 	ldrh	r3, [fp, #-14]
 c100594:	e353004e 	cmp	r3, #78	; 0x4e
 c100598:	8a00000f 	bhi	c1005dc <main+0x5dc>
 c10059c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1005a0:	e35300ee 	cmp	r3, #238	; 0xee
 c1005a4:	8a00000c 	bhi	c1005dc <main+0x5dc>
        {
            lcd_putchar_x2(  32, 196, WHITE, 'C' );
 c1005a8:	e3a00020 	mov	r0, #32
 c1005ac:	e3a010c4 	mov	r1, #196	; 0xc4
 c1005b0:	e3a02000 	mov	r2, #0
 c1005b4:	e3a03043 	mov	r3, #67	; 0x43
 c1005b8:	eb0003c7 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c1005bc:	e3a000c8 	mov	r0, #200	; 0xc8
 c1005c0:	eb00084a 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2(  32, 196, BLACK, 'C' );
 c1005c4:	e3a00020 	mov	r0, #32
 c1005c8:	e3a010c4 	mov	r1, #196	; 0xc4
 c1005cc:	e3a0200f 	mov	r2, #15
 c1005d0:	e3a03043 	mov	r3, #67	; 0x43
 c1005d4:	eb0003c0 	bl	c1014dc <lcd_putchar_x2>
 c1005d8:	ea00004b 	b	c10070c <main+0x70c>
        }
        else if( x>79 && y>179 && x<159 && y<239 )
 c1005dc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1005e0:	e353004f 	cmp	r3, #79	; 0x4f
 c1005e4:	9a000015 	bls	c100640 <main+0x640>
 c1005e8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1005ec:	e35300b3 	cmp	r3, #179	; 0xb3
 c1005f0:	9a000012 	bls	c100640 <main+0x640>
 c1005f4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1005f8:	e353009e 	cmp	r3, #158	; 0x9e
 c1005fc:	8a00000f 	bhi	c100640 <main+0x640>
 c100600:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100604:	e35300ee 	cmp	r3, #238	; 0xee
 c100608:	8a00000c 	bhi	c100640 <main+0x640>
        {
            lcd_putchar_x2( 112, 196, WHITE, 'D' );
 c10060c:	e3a00070 	mov	r0, #112	; 0x70
 c100610:	e3a010c4 	mov	r1, #196	; 0xc4
 c100614:	e3a02000 	mov	r2, #0
 c100618:	e3a03044 	mov	r3, #68	; 0x44
 c10061c:	eb0003ae 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100620:	e3a000c8 	mov	r0, #200	; 0xc8
 c100624:	eb000831 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 112, 196, BLACK, 'D' );
 c100628:	e3a00070 	mov	r0, #112	; 0x70
 c10062c:	e3a010c4 	mov	r1, #196	; 0xc4
 c100630:	e3a0200f 	mov	r2, #15
 c100634:	e3a03044 	mov	r3, #68	; 0x44
 c100638:	eb0003a7 	bl	c1014dc <lcd_putchar_x2>
 c10063c:	ea000032 	b	c10070c <main+0x70c>
        }
        else if( x>159 && y>179 && x<239 && y<239 )
 c100640:	e15b30be 	ldrh	r3, [fp, #-14]
 c100644:	e353009f 	cmp	r3, #159	; 0x9f
 c100648:	9a000015 	bls	c1006a4 <main+0x6a4>
 c10064c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100650:	e35300b3 	cmp	r3, #179	; 0xb3
 c100654:	9a000012 	bls	c1006a4 <main+0x6a4>
 c100658:	e15b30be 	ldrh	r3, [fp, #-14]
 c10065c:	e35300ee 	cmp	r3, #238	; 0xee
 c100660:	8a00000f 	bhi	c1006a4 <main+0x6a4>
 c100664:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100668:	e35300ee 	cmp	r3, #238	; 0xee
 c10066c:	8a00000c 	bhi	c1006a4 <main+0x6a4>
        {
            lcd_putchar_x2( 192, 196, WHITE, 'E' );
 c100670:	e3a000c0 	mov	r0, #192	; 0xc0
 c100674:	e3a010c4 	mov	r1, #196	; 0xc4
 c100678:	e3a02000 	mov	r2, #0
 c10067c:	e3a03045 	mov	r3, #69	; 0x45
 c100680:	eb000395 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c100684:	e3a000c8 	mov	r0, #200	; 0xc8
 c100688:	eb000818 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 192, 196, BLACK, 'E' );
 c10068c:	e3a000c0 	mov	r0, #192	; 0xc0
 c100690:	e3a010c4 	mov	r1, #196	; 0xc4
 c100694:	e3a0200f 	mov	r2, #15
 c100698:	e3a03045 	mov	r3, #69	; 0x45
 c10069c:	eb00038e 	bl	c1014dc <lcd_putchar_x2>
 c1006a0:	ea000019 	b	c10070c <main+0x70c>
        }
        else if( x>239 && y>179 && x<319 && y<239 )
 c1006a4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1006a8:	e35300ef 	cmp	r3, #239	; 0xef
 c1006ac:	9afffe63 	bls	c100040 <main+0x40>
 c1006b0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1006b4:	e35300b3 	cmp	r3, #179	; 0xb3
 c1006b8:	9afffe62 	bls	c100048 <main+0x48>
 c1006bc:	e15b20be 	ldrh	r2, [fp, #-14]
 c1006c0:	e59f305c 	ldr	r3, [pc, #92]	; c100724 <main+0x724>
 c1006c4:	e1520003 	cmp	r2, r3
 c1006c8:	8afffe60 	bhi	c100050 <main+0x50>
 c1006cc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1006d0:	e35300ee 	cmp	r3, #238	; 0xee
 c1006d4:	8afffe5f 	bhi	c100058 <main+0x58>
        {
            lcd_putchar_x2( 272, 196, WHITE, 'F' );
 c1006d8:	e3a00e11 	mov	r0, #272	; 0x110
 c1006dc:	e3a010c4 	mov	r1, #196	; 0xc4
 c1006e0:	e3a02000 	mov	r2, #0
 c1006e4:	e3a03046 	mov	r3, #70	; 0x46
 c1006e8:	eb00037b 	bl	c1014dc <lcd_putchar_x2>
            sw_delay_ms( 200 );
 c1006ec:	e3a000c8 	mov	r0, #200	; 0xc8
 c1006f0:	eb0007fe 	bl	c1026f0 <sw_delay_ms>
            lcd_putchar_x2( 272, 196, BLACK, 'F' );
 c1006f4:	e3a00e11 	mov	r0, #272	; 0x110
 c1006f8:	e3a010c4 	mov	r1, #196	; 0xc4
 c1006fc:	e3a0200f 	mov	r2, #15
 c100700:	e3a03046 	mov	r3, #70	; 0x46
 c100704:	eb000374 	bl	c1014dc <lcd_putchar_x2>
        }
    }
 c100708:	eafffe53 	b	c10005c <main+0x5c>
 c10070c:	eafffe52 	b	c10005c <main+0x5c>
 c100710:	0c104988 	.word	0x0c104988
 c100714:	0c1049a4 	.word	0x0c1049a4
 c100718:	0c1049c4 	.word	0x0c1049c4
 c10071c:	0c1049c8 	.word	0x0c1049c8
 c100720:	0c1049d4 	.word	0x0c1049d4
 c100724:	0000013e 	.word	0x0000013e

0c100728 <lcd_draw_grid>:
}

void lcd_draw_grid(void)
{
 c100728:	e1a0c00d 	mov	ip, sp
 c10072c:	e92dd800 	push	{fp, ip, lr, pc}
 c100730:	e24cb004 	sub	fp, ip, #4
 c100734:	e24dd008 	sub	sp, sp, #8

    lcd_draw_box(   0,   0,  79,  59, BLACK, 1 ); /* Pinta cuadricula */
 c100738:	e3a0300f 	mov	r3, #15
 c10073c:	e58d3000 	str	r3, [sp]
 c100740:	e3a03001 	mov	r3, #1
 c100744:	e58d3004 	str	r3, [sp, #4]
 c100748:	e3a00000 	mov	r0, #0
 c10074c:	e3a01000 	mov	r1, #0
 c100750:	e3a0204f 	mov	r2, #79	; 0x4f
 c100754:	e3a0303b 	mov	r3, #59	; 0x3b
 c100758:	eb00023e 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(  79,   0, 159,  59, BLACK, 1 );
 c10075c:	e3a0300f 	mov	r3, #15
 c100760:	e58d3000 	str	r3, [sp]
 c100764:	e3a03001 	mov	r3, #1
 c100768:	e58d3004 	str	r3, [sp, #4]
 c10076c:	e3a0004f 	mov	r0, #79	; 0x4f
 c100770:	e3a01000 	mov	r1, #0
 c100774:	e3a0209f 	mov	r2, #159	; 0x9f
 c100778:	e3a0303b 	mov	r3, #59	; 0x3b
 c10077c:	eb000235 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 159,   0, 239,  59, BLACK, 1 );
 c100780:	e3a0300f 	mov	r3, #15
 c100784:	e58d3000 	str	r3, [sp]
 c100788:	e3a03001 	mov	r3, #1
 c10078c:	e58d3004 	str	r3, [sp, #4]
 c100790:	e3a0009f 	mov	r0, #159	; 0x9f
 c100794:	e3a01000 	mov	r1, #0
 c100798:	e3a020ef 	mov	r2, #239	; 0xef
 c10079c:	e3a0303b 	mov	r3, #59	; 0x3b
 c1007a0:	eb00022c 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 239,   0, 319,  59, BLACK, 1 );
 c1007a4:	e3a0300f 	mov	r3, #15
 c1007a8:	e58d3000 	str	r3, [sp]
 c1007ac:	e3a03001 	mov	r3, #1
 c1007b0:	e58d3004 	str	r3, [sp, #4]
 c1007b4:	e3a000ef 	mov	r0, #239	; 0xef
 c1007b8:	e3a01000 	mov	r1, #0
 c1007bc:	e59f2300 	ldr	r2, [pc, #768]	; c100ac4 <lcd_draw_grid+0x39c>
 c1007c0:	e3a0303b 	mov	r3, #59	; 0x3b
 c1007c4:	eb000223 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(   0,  59,  79, 119, BLACK, 1 );
 c1007c8:	e3a0300f 	mov	r3, #15
 c1007cc:	e58d3000 	str	r3, [sp]
 c1007d0:	e3a03001 	mov	r3, #1
 c1007d4:	e58d3004 	str	r3, [sp, #4]
 c1007d8:	e3a00000 	mov	r0, #0
 c1007dc:	e3a0103b 	mov	r1, #59	; 0x3b
 c1007e0:	e3a0204f 	mov	r2, #79	; 0x4f
 c1007e4:	e3a03077 	mov	r3, #119	; 0x77
 c1007e8:	eb00021a 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(  79,  59, 159, 119, BLACK, 1 );
 c1007ec:	e3a0300f 	mov	r3, #15
 c1007f0:	e58d3000 	str	r3, [sp]
 c1007f4:	e3a03001 	mov	r3, #1
 c1007f8:	e58d3004 	str	r3, [sp, #4]
 c1007fc:	e3a0004f 	mov	r0, #79	; 0x4f
 c100800:	e3a0103b 	mov	r1, #59	; 0x3b
 c100804:	e3a0209f 	mov	r2, #159	; 0x9f
 c100808:	e3a03077 	mov	r3, #119	; 0x77
 c10080c:	eb000211 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 159,  59, 239, 119, BLACK, 1 );
 c100810:	e3a0300f 	mov	r3, #15
 c100814:	e58d3000 	str	r3, [sp]
 c100818:	e3a03001 	mov	r3, #1
 c10081c:	e58d3004 	str	r3, [sp, #4]
 c100820:	e3a0009f 	mov	r0, #159	; 0x9f
 c100824:	e3a0103b 	mov	r1, #59	; 0x3b
 c100828:	e3a020ef 	mov	r2, #239	; 0xef
 c10082c:	e3a03077 	mov	r3, #119	; 0x77
 c100830:	eb000208 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 239,  59, 319, 119, BLACK, 1 );
 c100834:	e3a0300f 	mov	r3, #15
 c100838:	e58d3000 	str	r3, [sp]
 c10083c:	e3a03001 	mov	r3, #1
 c100840:	e58d3004 	str	r3, [sp, #4]
 c100844:	e3a000ef 	mov	r0, #239	; 0xef
 c100848:	e3a0103b 	mov	r1, #59	; 0x3b
 c10084c:	e59f2270 	ldr	r2, [pc, #624]	; c100ac4 <lcd_draw_grid+0x39c>
 c100850:	e3a03077 	mov	r3, #119	; 0x77
 c100854:	eb0001ff 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(   0, 119,  79, 179, BLACK, 1 );
 c100858:	e3a0300f 	mov	r3, #15
 c10085c:	e58d3000 	str	r3, [sp]
 c100860:	e3a03001 	mov	r3, #1
 c100864:	e58d3004 	str	r3, [sp, #4]
 c100868:	e3a00000 	mov	r0, #0
 c10086c:	e3a01077 	mov	r1, #119	; 0x77
 c100870:	e3a0204f 	mov	r2, #79	; 0x4f
 c100874:	e3a030b3 	mov	r3, #179	; 0xb3
 c100878:	eb0001f6 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(  79, 119, 159, 179, BLACK, 1 );
 c10087c:	e3a0300f 	mov	r3, #15
 c100880:	e58d3000 	str	r3, [sp]
 c100884:	e3a03001 	mov	r3, #1
 c100888:	e58d3004 	str	r3, [sp, #4]
 c10088c:	e3a0004f 	mov	r0, #79	; 0x4f
 c100890:	e3a01077 	mov	r1, #119	; 0x77
 c100894:	e3a0209f 	mov	r2, #159	; 0x9f
 c100898:	e3a030b3 	mov	r3, #179	; 0xb3
 c10089c:	eb0001ed 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 159, 119, 239, 179, BLACK, 1 );
 c1008a0:	e3a0300f 	mov	r3, #15
 c1008a4:	e58d3000 	str	r3, [sp]
 c1008a8:	e3a03001 	mov	r3, #1
 c1008ac:	e58d3004 	str	r3, [sp, #4]
 c1008b0:	e3a0009f 	mov	r0, #159	; 0x9f
 c1008b4:	e3a01077 	mov	r1, #119	; 0x77
 c1008b8:	e3a020ef 	mov	r2, #239	; 0xef
 c1008bc:	e3a030b3 	mov	r3, #179	; 0xb3
 c1008c0:	eb0001e4 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 239, 119, 319, 179, BLACK, 1 );
 c1008c4:	e3a0300f 	mov	r3, #15
 c1008c8:	e58d3000 	str	r3, [sp]
 c1008cc:	e3a03001 	mov	r3, #1
 c1008d0:	e58d3004 	str	r3, [sp, #4]
 c1008d4:	e3a000ef 	mov	r0, #239	; 0xef
 c1008d8:	e3a01077 	mov	r1, #119	; 0x77
 c1008dc:	e59f21e0 	ldr	r2, [pc, #480]	; c100ac4 <lcd_draw_grid+0x39c>
 c1008e0:	e3a030b3 	mov	r3, #179	; 0xb3
 c1008e4:	eb0001db 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(   0, 179,  79, 239, BLACK, 1 );
 c1008e8:	e3a0300f 	mov	r3, #15
 c1008ec:	e58d3000 	str	r3, [sp]
 c1008f0:	e3a03001 	mov	r3, #1
 c1008f4:	e58d3004 	str	r3, [sp, #4]
 c1008f8:	e3a00000 	mov	r0, #0
 c1008fc:	e3a010b3 	mov	r1, #179	; 0xb3
 c100900:	e3a0204f 	mov	r2, #79	; 0x4f
 c100904:	e3a030ef 	mov	r3, #239	; 0xef
 c100908:	eb0001d2 	bl	c101058 <lcd_draw_box>
    lcd_draw_box(  79, 179, 159, 239, BLACK, 1 );
 c10090c:	e3a0300f 	mov	r3, #15
 c100910:	e58d3000 	str	r3, [sp]
 c100914:	e3a03001 	mov	r3, #1
 c100918:	e58d3004 	str	r3, [sp, #4]
 c10091c:	e3a0004f 	mov	r0, #79	; 0x4f
 c100920:	e3a010b3 	mov	r1, #179	; 0xb3
 c100924:	e3a0209f 	mov	r2, #159	; 0x9f
 c100928:	e3a030ef 	mov	r3, #239	; 0xef
 c10092c:	eb0001c9 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 159, 179, 239, 239, BLACK, 1 );
 c100930:	e3a0300f 	mov	r3, #15
 c100934:	e58d3000 	str	r3, [sp]
 c100938:	e3a03001 	mov	r3, #1
 c10093c:	e58d3004 	str	r3, [sp, #4]
 c100940:	e3a0009f 	mov	r0, #159	; 0x9f
 c100944:	e3a010b3 	mov	r1, #179	; 0xb3
 c100948:	e3a020ef 	mov	r2, #239	; 0xef
 c10094c:	e3a030ef 	mov	r3, #239	; 0xef
 c100950:	eb0001c0 	bl	c101058 <lcd_draw_box>
    lcd_draw_box( 239, 179, 319, 239, BLACK, 1 );
 c100954:	e3a0300f 	mov	r3, #15
 c100958:	e58d3000 	str	r3, [sp]
 c10095c:	e3a03001 	mov	r3, #1
 c100960:	e58d3004 	str	r3, [sp, #4]
 c100964:	e3a000ef 	mov	r0, #239	; 0xef
 c100968:	e3a010b3 	mov	r1, #179	; 0xb3
 c10096c:	e59f2150 	ldr	r2, [pc, #336]	; c100ac4 <lcd_draw_grid+0x39c>
 c100970:	e3a030ef 	mov	r3, #239	; 0xef
 c100974:	eb0001b7 	bl	c101058 <lcd_draw_box>

    lcd_putchar_x2(  32,  16, BLACK, '0' );    /* Rotula cuadricula */
 c100978:	e3a00020 	mov	r0, #32
 c10097c:	e3a01010 	mov	r1, #16
 c100980:	e3a0200f 	mov	r2, #15
 c100984:	e3a03030 	mov	r3, #48	; 0x30
 c100988:	eb0002d3 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 112,  16, BLACK, '1' );
 c10098c:	e3a00070 	mov	r0, #112	; 0x70
 c100990:	e3a01010 	mov	r1, #16
 c100994:	e3a0200f 	mov	r2, #15
 c100998:	e3a03031 	mov	r3, #49	; 0x31
 c10099c:	eb0002ce 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 192,  16, BLACK, '2' );
 c1009a0:	e3a000c0 	mov	r0, #192	; 0xc0
 c1009a4:	e3a01010 	mov	r1, #16
 c1009a8:	e3a0200f 	mov	r2, #15
 c1009ac:	e3a03032 	mov	r3, #50	; 0x32
 c1009b0:	eb0002c9 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 272,  16, BLACK, '3' );
 c1009b4:	e3a00e11 	mov	r0, #272	; 0x110
 c1009b8:	e3a01010 	mov	r1, #16
 c1009bc:	e3a0200f 	mov	r2, #15
 c1009c0:	e3a03033 	mov	r3, #51	; 0x33
 c1009c4:	eb0002c4 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2(  32,  76, BLACK, '4' );
 c1009c8:	e3a00020 	mov	r0, #32
 c1009cc:	e3a0104c 	mov	r1, #76	; 0x4c
 c1009d0:	e3a0200f 	mov	r2, #15
 c1009d4:	e3a03034 	mov	r3, #52	; 0x34
 c1009d8:	eb0002bf 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 112,  76, BLACK, '5' );
 c1009dc:	e3a00070 	mov	r0, #112	; 0x70
 c1009e0:	e3a0104c 	mov	r1, #76	; 0x4c
 c1009e4:	e3a0200f 	mov	r2, #15
 c1009e8:	e3a03035 	mov	r3, #53	; 0x35
 c1009ec:	eb0002ba 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 192,  76, BLACK, '6' );
 c1009f0:	e3a000c0 	mov	r0, #192	; 0xc0
 c1009f4:	e3a0104c 	mov	r1, #76	; 0x4c
 c1009f8:	e3a0200f 	mov	r2, #15
 c1009fc:	e3a03036 	mov	r3, #54	; 0x36
 c100a00:	eb0002b5 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 272,  76, BLACK, '7' );
 c100a04:	e3a00e11 	mov	r0, #272	; 0x110
 c100a08:	e3a0104c 	mov	r1, #76	; 0x4c
 c100a0c:	e3a0200f 	mov	r2, #15
 c100a10:	e3a03037 	mov	r3, #55	; 0x37
 c100a14:	eb0002b0 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2(  32, 136, BLACK, '8' );
 c100a18:	e3a00020 	mov	r0, #32
 c100a1c:	e3a01088 	mov	r1, #136	; 0x88
 c100a20:	e3a0200f 	mov	r2, #15
 c100a24:	e3a03038 	mov	r3, #56	; 0x38
 c100a28:	eb0002ab 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 112, 136, BLACK, '9' );
 c100a2c:	e3a00070 	mov	r0, #112	; 0x70
 c100a30:	e3a01088 	mov	r1, #136	; 0x88
 c100a34:	e3a0200f 	mov	r2, #15
 c100a38:	e3a03039 	mov	r3, #57	; 0x39
 c100a3c:	eb0002a6 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 192, 136, BLACK, 'A' );
 c100a40:	e3a000c0 	mov	r0, #192	; 0xc0
 c100a44:	e3a01088 	mov	r1, #136	; 0x88
 c100a48:	e3a0200f 	mov	r2, #15
 c100a4c:	e3a03041 	mov	r3, #65	; 0x41
 c100a50:	eb0002a1 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 272, 136, BLACK, 'B' );
 c100a54:	e3a00e11 	mov	r0, #272	; 0x110
 c100a58:	e3a01088 	mov	r1, #136	; 0x88
 c100a5c:	e3a0200f 	mov	r2, #15
 c100a60:	e3a03042 	mov	r3, #66	; 0x42
 c100a64:	eb00029c 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2(  32, 196, BLACK, 'C' );
 c100a68:	e3a00020 	mov	r0, #32
 c100a6c:	e3a010c4 	mov	r1, #196	; 0xc4
 c100a70:	e3a0200f 	mov	r2, #15
 c100a74:	e3a03043 	mov	r3, #67	; 0x43
 c100a78:	eb000297 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 112, 196, BLACK, 'D' );
 c100a7c:	e3a00070 	mov	r0, #112	; 0x70
 c100a80:	e3a010c4 	mov	r1, #196	; 0xc4
 c100a84:	e3a0200f 	mov	r2, #15
 c100a88:	e3a03044 	mov	r3, #68	; 0x44
 c100a8c:	eb000292 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 192, 196, BLACK, 'E' );
 c100a90:	e3a000c0 	mov	r0, #192	; 0xc0
 c100a94:	e3a010c4 	mov	r1, #196	; 0xc4
 c100a98:	e3a0200f 	mov	r2, #15
 c100a9c:	e3a03045 	mov	r3, #69	; 0x45
 c100aa0:	eb00028d 	bl	c1014dc <lcd_putchar_x2>
    lcd_putchar_x2( 272, 196, BLACK, 'F' );
 c100aa4:	e3a00e11 	mov	r0, #272	; 0x110
 c100aa8:	e3a010c4 	mov	r1, #196	; 0xc4
 c100aac:	e3a0200f 	mov	r2, #15
 c100ab0:	e3a03046 	mov	r3, #70	; 0x46
 c100ab4:	eb000288 	bl	c1014dc <lcd_putchar_x2>

}
 c100ab8:	e24bd00c 	sub	sp, fp, #12
 c100abc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ac0:	e12fff1e 	bx	lr
 c100ac4:	0000013f 	.word	0x0000013f

0c100ac8 <lcd_init>:
static uint8 lcd_buffer[LCD_BUFFER_SIZE];

static uint8 state;

void lcd_init( void )
{      
 c100ac8:	e1a0c00d 	mov	ip, sp
 c100acc:	e92dd800 	push	{fp, ip, lr, pc}
 c100ad0:	e24cb004 	sub	fp, ip, #4
    DITHMODE = 0x12210;
 c100ad4:	e59f30fc 	ldr	r3, [pc, #252]	; c100bd8 <lcd_init+0x110>
 c100ad8:	e59f20fc 	ldr	r2, [pc, #252]	; c100bdc <lcd_init+0x114>
 c100adc:	e5832000 	str	r2, [r3]
    DP1_2    = 0xA5A5;
 c100ae0:	e59f30f8 	ldr	r3, [pc, #248]	; c100be0 <lcd_init+0x118>
 c100ae4:	e59f20f8 	ldr	r2, [pc, #248]	; c100be4 <lcd_init+0x11c>
 c100ae8:	e5832000 	str	r2, [r3]
    DP4_7    = 0xBA5DA65;
 c100aec:	e59f30f4 	ldr	r3, [pc, #244]	; c100be8 <lcd_init+0x120>
 c100af0:	e59f20f4 	ldr	r2, [pc, #244]	; c100bec <lcd_init+0x124>
 c100af4:	e5832000 	str	r2, [r3]
    DP3_5    = 0xA5A5F;
 c100af8:	e59f30f0 	ldr	r3, [pc, #240]	; c100bf0 <lcd_init+0x128>
 c100afc:	e59f20f0 	ldr	r2, [pc, #240]	; c100bf4 <lcd_init+0x12c>
 c100b00:	e5832000 	str	r2, [r3]
    DP2_3    = 0xD6B;
 c100b04:	e59f30ec 	ldr	r3, [pc, #236]	; c100bf8 <lcd_init+0x130>
 c100b08:	e59f20ec 	ldr	r2, [pc, #236]	; c100bfc <lcd_init+0x134>
 c100b0c:	e5832000 	str	r2, [r3]
    DP5_7    = 0xEB7B5ED;
 c100b10:	e59f30e8 	ldr	r3, [pc, #232]	; c100c00 <lcd_init+0x138>
 c100b14:	e59f20e8 	ldr	r2, [pc, #232]	; c100c04 <lcd_init+0x13c>
 c100b18:	e5832000 	str	r2, [r3]
    DP3_4    = 0x7DBE;
 c100b1c:	e59f30e4 	ldr	r3, [pc, #228]	; c100c08 <lcd_init+0x140>
 c100b20:	e59f20e4 	ldr	r2, [pc, #228]	; c100c0c <lcd_init+0x144>
 c100b24:	e5832000 	str	r2, [r3]
    DP4_5    = 0x7EBDF;
 c100b28:	e59f30e0 	ldr	r3, [pc, #224]	; c100c10 <lcd_init+0x148>
 c100b2c:	e59f20e0 	ldr	r2, [pc, #224]	; c100c14 <lcd_init+0x14c>
 c100b30:	e5832000 	str	r2, [r3]
    DP6_7    = 0x7FDFBFE;
 c100b34:	e59f30dc 	ldr	r3, [pc, #220]	; c100c18 <lcd_init+0x150>
 c100b38:	e59f20dc 	ldr	r2, [pc, #220]	; c100c1c <lcd_init+0x154>
 c100b3c:	e5832000 	str	r2, [r3]
    
    REDLUT   = 0x0;
 c100b40:	e59f30d8 	ldr	r3, [pc, #216]	; c100c20 <lcd_init+0x158>
 c100b44:	e3a02000 	mov	r2, #0
 c100b48:	e5832000 	str	r2, [r3]
    GREENLUT = 0x0;
 c100b4c:	e59f30d0 	ldr	r3, [pc, #208]	; c100c24 <lcd_init+0x15c>
 c100b50:	e3a02000 	mov	r2, #0
 c100b54:	e5832000 	str	r2, [r3]
    BLUELUT  = 0x0;
 c100b58:	e59f30c8 	ldr	r3, [pc, #200]	; c100c28 <lcd_init+0x160>
 c100b5c:	e3a02000 	mov	r2, #0
 c100b60:	e5832000 	str	r2, [r3]

    LCDCON1  = 0x1C020;
 c100b64:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c100b68:	e59f20bc 	ldr	r2, [pc, #188]	; c100c2c <lcd_init+0x164>
 c100b6c:	e5832000 	str	r2, [r3]
    LCDCON2  = 0x13CEF;
 c100b70:	e59f30b8 	ldr	r3, [pc, #184]	; c100c30 <lcd_init+0x168>
 c100b74:	e59f20b8 	ldr	r2, [pc, #184]	; c100c34 <lcd_init+0x16c>
 c100b78:	e5832000 	str	r2, [r3]
    LCDCON3  = 0x0;
 c100b7c:	e59f30b4 	ldr	r3, [pc, #180]	; c100c38 <lcd_init+0x170>
 c100b80:	e3a02000 	mov	r2, #0
 c100b84:	e5832000 	str	r2, [r3]

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c100b88:	e59f30ac 	ldr	r3, [pc, #172]	; c100c3c <lcd_init+0x174>
 c100b8c:	e59f20ac 	ldr	r2, [pc, #172]	; c100c40 <lcd_init+0x178>
 c100b90:	e1a020a2 	lsr	r2, r2, #1
 c100b94:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c100b98:	e5832000 	str	r2, [r3]
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c100b9c:	e59f20a0 	ldr	r2, [pc, #160]	; c100c44 <lcd_init+0x17c>
 c100ba0:	e59f3098 	ldr	r3, [pc, #152]	; c100c40 <lcd_init+0x178>
 c100ba4:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c100ba8:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c100bac:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c100bb0:	e1a030a3 	lsr	r3, r3, #1
 c100bb4:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c100bb8:	e5823000 	str	r3, [r2]
    LCDSADDR3 = 0x50;
 c100bbc:	e59f3084 	ldr	r3, [pc, #132]	; c100c48 <lcd_init+0x180>
 c100bc0:	e3a02050 	mov	r2, #80	; 0x50
 c100bc4:	e5832000 	str	r2, [r3]
    
    lcd_off();
 c100bc8:	eb00002e 	bl	c100c88 <lcd_off>
}
 c100bcc:	e24bd00c 	sub	sp, fp, #12
 c100bd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100bd4:	e12fff1e 	bx	lr
 c100bd8:	01f00044 	.word	0x01f00044
 c100bdc:	00012210 	.word	0x00012210
 c100be0:	01f00020 	.word	0x01f00020
 c100be4:	0000a5a5 	.word	0x0000a5a5
 c100be8:	01f00024 	.word	0x01f00024
 c100bec:	0ba5da65 	.word	0x0ba5da65
 c100bf0:	01f00028 	.word	0x01f00028
 c100bf4:	000a5a5f 	.word	0x000a5a5f
 c100bf8:	01f0002c 	.word	0x01f0002c
 c100bfc:	00000d6b 	.word	0x00000d6b
 c100c00:	01f00030 	.word	0x01f00030
 c100c04:	0eb7b5ed 	.word	0x0eb7b5ed
 c100c08:	01f00034 	.word	0x01f00034
 c100c0c:	00007dbe 	.word	0x00007dbe
 c100c10:	01f00038 	.word	0x01f00038
 c100c14:	0007ebdf 	.word	0x0007ebdf
 c100c18:	01f0003c 	.word	0x01f0003c
 c100c1c:	07fdfbfe 	.word	0x07fdfbfe
 c100c20:	01f00014 	.word	0x01f00014
 c100c24:	01f00018 	.word	0x01f00018
 c100c28:	01f0001c 	.word	0x01f0001c
 c100c2c:	0001c020 	.word	0x0001c020
 c100c30:	01f00004 	.word	0x01f00004
 c100c34:	00013cef 	.word	0x00013cef
 c100c38:	01f00040 	.word	0x01f00040
 c100c3c:	01f00008 	.word	0x01f00008
 c100c40:	0c105fbc 	.word	0x0c105fbc
 c100c44:	01f0000c 	.word	0x01f0000c
 c100c48:	01f00010 	.word	0x01f00010

0c100c4c <lcd_on>:

void lcd_on( void )
{
 c100c4c:	e1a0c00d 	mov	ip, sp
 c100c50:	e92dd800 	push	{fp, ip, lr, pc}
 c100c54:	e24cb004 	sub	fp, ip, #4
	state = 0x1;
 c100c58:	e59f3024 	ldr	r3, [pc, #36]	; c100c84 <lcd_on+0x38>
 c100c5c:	e3a02001 	mov	r2, #1
 c100c60:	e5c32000 	strb	r2, [r3]
	LCDCON1 |= 0x1;
 c100c64:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c100c68:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c100c6c:	e5922000 	ldr	r2, [r2]
 c100c70:	e3822001 	orr	r2, r2, #1
 c100c74:	e5832000 	str	r2, [r3]
}
 c100c78:	e24bd00c 	sub	sp, fp, #12
 c100c7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c80:	e12fff1e 	bx	lr
 c100c84:	0c10f5bc 	.word	0x0c10f5bc

0c100c88 <lcd_off>:

void lcd_off( void )
{
 c100c88:	e1a0c00d 	mov	ip, sp
 c100c8c:	e92dd800 	push	{fp, ip, lr, pc}
 c100c90:	e24cb004 	sub	fp, ip, #4
	state = 0x0;
 c100c94:	e59f3024 	ldr	r3, [pc, #36]	; c100cc0 <lcd_off+0x38>
 c100c98:	e3a02000 	mov	r2, #0
 c100c9c:	e5c32000 	strb	r2, [r3]
    LCDCON1 &= ~(1 << 0);
 c100ca0:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c100ca4:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c100ca8:	e5922000 	ldr	r2, [r2]
 c100cac:	e3c22001 	bic	r2, r2, #1
 c100cb0:	e5832000 	str	r2, [r3]
}
 c100cb4:	e24bd00c 	sub	sp, fp, #12
 c100cb8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100cbc:	e12fff1e 	bx	lr
 c100cc0:	0c10f5bc 	.word	0x0c10f5bc

0c100cc4 <lcd_status>:

uint8 lcd_status( void )
{
 c100cc4:	e1a0c00d 	mov	ip, sp
 c100cc8:	e92dd800 	push	{fp, ip, lr, pc}
 c100ccc:	e24cb004 	sub	fp, ip, #4
    return state;
 c100cd0:	e59f3010 	ldr	r3, [pc, #16]	; c100ce8 <lcd_status+0x24>
 c100cd4:	e5d33000 	ldrb	r3, [r3]
}
 c100cd8:	e1a00003 	mov	r0, r3
 c100cdc:	e24bd00c 	sub	sp, fp, #12
 c100ce0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ce4:	e12fff1e 	bx	lr
 c100ce8:	0c10f5bc 	.word	0x0c10f5bc

0c100cec <lcd_clear>:

void lcd_clear( void )
{
 c100cec:	e1a0c00d 	mov	ip, sp
 c100cf0:	e92dd800 	push	{fp, ip, lr, pc}
 c100cf4:	e24cb004 	sub	fp, ip, #4
 c100cf8:	e24dd008 	sub	sp, sp, #8
	uint16 line, row;

	for(line = 0; line < LCD_HEIGHT; ++line)
 c100cfc:	e3a03000 	mov	r3, #0
 c100d00:	e14b30be 	strh	r3, [fp, #-14]
 c100d04:	ea000012 	b	c100d54 <lcd_clear+0x68>
		for( row = 0; row < LCD_WIDTH; ++row)
 c100d08:	e3a03000 	mov	r3, #0
 c100d0c:	e14b31b0 	strh	r3, [fp, #-16]
 c100d10:	ea000008 	b	c100d38 <lcd_clear+0x4c>
			lcd_putpixel( row, line, WHITE);
 c100d14:	e15b21b0 	ldrh	r2, [fp, #-16]
 c100d18:	e15b30be 	ldrh	r3, [fp, #-14]
 c100d1c:	e1a00002 	mov	r0, r2
 c100d20:	e1a01003 	mov	r1, r3
 c100d24:	e3a02000 	mov	r2, #0
 c100d28:	eb000010 	bl	c100d70 <lcd_putpixel>
void lcd_clear( void )
{
	uint16 line, row;

	for(line = 0; line < LCD_HEIGHT; ++line)
		for( row = 0; row < LCD_WIDTH; ++row)
 c100d2c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100d30:	e2833001 	add	r3, r3, #1
 c100d34:	e14b31b0 	strh	r3, [fp, #-16]
 c100d38:	e15b21b0 	ldrh	r2, [fp, #-16]
 c100d3c:	e59f3028 	ldr	r3, [pc, #40]	; c100d6c <lcd_clear+0x80>
 c100d40:	e1520003 	cmp	r2, r3
 c100d44:	9afffff2 	bls	c100d14 <lcd_clear+0x28>

void lcd_clear( void )
{
	uint16 line, row;

	for(line = 0; line < LCD_HEIGHT; ++line)
 c100d48:	e15b30be 	ldrh	r3, [fp, #-14]
 c100d4c:	e2833001 	add	r3, r3, #1
 c100d50:	e14b30be 	strh	r3, [fp, #-14]
 c100d54:	e15b30be 	ldrh	r3, [fp, #-14]
 c100d58:	e35300ef 	cmp	r3, #239	; 0xef
 c100d5c:	9affffe9 	bls	c100d08 <lcd_clear+0x1c>
		for( row = 0; row < LCD_WIDTH; ++row)
			lcd_putpixel( row, line, WHITE);
}
 c100d60:	e24bd00c 	sub	sp, fp, #12
 c100d64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d68:	e12fff1e 	bx	lr
 c100d6c:	0000013f 	.word	0x0000013f

0c100d70 <lcd_putpixel>:

void lcd_putpixel( uint16 x, uint16 y, uint8 c)
{
 c100d70:	e1a0c00d 	mov	ip, sp
 c100d74:	e92dd800 	push	{fp, ip, lr, pc}
 c100d78:	e24cb004 	sub	fp, ip, #4
 c100d7c:	e24dd010 	sub	sp, sp, #16
 c100d80:	e1a03002 	mov	r3, r2
 c100d84:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c100d88:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100d8c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c100d90:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100d94:	e1a030a3 	lsr	r3, r3, #1
 c100d98:	e1a03803 	lsl	r3, r3, #16
 c100d9c:	e1a02823 	lsr	r2, r3, #16
 c100da0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100da4:	e1a01003 	mov	r1, r3
 c100da8:	e1a01101 	lsl	r1, r1, #2
 c100dac:	e0813003 	add	r3, r1, r3
 c100db0:	e1a03283 	lsl	r3, r3, #5
 c100db4:	e1a03803 	lsl	r3, r3, #16
 c100db8:	e1a03823 	lsr	r3, r3, #16
 c100dbc:	e0823003 	add	r3, r2, r3
 c100dc0:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c100dc4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100dc8:	e2033001 	and	r3, r3, #1
 c100dcc:	e3530000 	cmp	r3, #0
 c100dd0:	1a000001 	bne	c100ddc <lcd_putpixel+0x6c>
 c100dd4:	e3a03004 	mov	r3, #4
 c100dd8:	ea000000 	b	c100de0 <lcd_putpixel+0x70>
 c100ddc:	e3a03000 	mov	r3, #0
 c100de0:	e54b300f 	strb	r3, [fp, #-15]
    
    byte = lcd_buffer[i];
 c100de4:	e15b30be 	ldrh	r3, [fp, #-14]
 c100de8:	e59f2068 	ldr	r2, [pc, #104]	; c100e58 <lcd_putpixel+0xe8>
 c100dec:	e7d23003 	ldrb	r3, [r2, r3]
 c100df0:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c100df4:	e55b300f 	ldrb	r3, [fp, #-15]
 c100df8:	e3a0200f 	mov	r2, #15
 c100dfc:	e1a03312 	lsl	r3, r2, r3
 c100e00:	e20330ff 	and	r3, r3, #255	; 0xff
 c100e04:	e1e03003 	mvn	r3, r3
 c100e08:	e20320ff 	and	r2, r3, #255	; 0xff
 c100e0c:	e55b3010 	ldrb	r3, [fp, #-16]
 c100e10:	e0023003 	and	r3, r2, r3
 c100e14:	e20330ff 	and	r3, r3, #255	; 0xff
 c100e18:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c100e1c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c100e20:	e55b300f 	ldrb	r3, [fp, #-15]
 c100e24:	e1a03312 	lsl	r3, r2, r3
 c100e28:	e20320ff 	and	r2, r3, #255	; 0xff
 c100e2c:	e55b3010 	ldrb	r3, [fp, #-16]
 c100e30:	e1823003 	orr	r3, r2, r3
 c100e34:	e20330ff 	and	r3, r3, #255	; 0xff
 c100e38:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c100e3c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100e40:	e59f2010 	ldr	r2, [pc, #16]	; c100e58 <lcd_putpixel+0xe8>
 c100e44:	e55b1010 	ldrb	r1, [fp, #-16]
 c100e48:	e7c21003 	strb	r1, [r2, r3]
}
 c100e4c:	e24bd00c 	sub	sp, fp, #12
 c100e50:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e54:	e12fff1e 	bx	lr
 c100e58:	0c105fbc 	.word	0x0c105fbc

0c100e5c <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y )
{
 c100e5c:	e1a0c00d 	mov	ip, sp
 c100e60:	e92dd800 	push	{fp, ip, lr, pc}
 c100e64:	e24cb004 	sub	fp, ip, #4
 c100e68:	e24dd010 	sub	sp, sp, #16
 c100e6c:	e1a02000 	mov	r2, r0
 c100e70:	e1a03001 	mov	r3, r1
 c100e74:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c100e78:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c100e7c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100e80:	e1a030a3 	lsr	r3, r3, #1
 c100e84:	e1a03803 	lsl	r3, r3, #16
 c100e88:	e1a02823 	lsr	r2, r3, #16
 c100e8c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100e90:	e1a01003 	mov	r1, r3
 c100e94:	e1a01101 	lsl	r1, r1, #2
 c100e98:	e0813003 	add	r3, r1, r3
 c100e9c:	e1a03283 	lsl	r3, r3, #5
 c100ea0:	e1a03803 	lsl	r3, r3, #16
 c100ea4:	e1a03823 	lsr	r3, r3, #16
 c100ea8:	e0823003 	add	r3, r2, r3
 c100eac:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c100eb0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100eb4:	e2033001 	and	r3, r3, #1
 c100eb8:	e3530000 	cmp	r3, #0
 c100ebc:	1a000001 	bne	c100ec8 <lcd_getpixel+0x6c>
 c100ec0:	e3a03004 	mov	r3, #4
 c100ec4:	ea000000 	b	c100ecc <lcd_getpixel+0x70>
 c100ec8:	e3a03000 	mov	r3, #0
 c100ecc:	e54b300f 	strb	r3, [fp, #-15]

    byte = lcd_buffer[i];
 c100ed0:	e15b30be 	ldrh	r3, [fp, #-14]
 c100ed4:	e59f2038 	ldr	r2, [pc, #56]	; c100f14 <lcd_getpixel+0xb8>
 c100ed8:	e7d23003 	ldrb	r3, [r2, r3]
 c100edc:	e54b3010 	strb	r3, [fp, #-16]
    byte &= (0xF << bit);
 c100ee0:	e55b300f 	ldrb	r3, [fp, #-15]
 c100ee4:	e3a0200f 	mov	r2, #15
 c100ee8:	e1a03312 	lsl	r3, r2, r3
 c100eec:	e20320ff 	and	r2, r3, #255	; 0xff
 c100ef0:	e55b3010 	ldrb	r3, [fp, #-16]
 c100ef4:	e0023003 	and	r3, r2, r3
 c100ef8:	e20330ff 	and	r3, r3, #255	; 0xff
 c100efc:	e54b3010 	strb	r3, [fp, #-16]
    return byte;
 c100f00:	e55b3010 	ldrb	r3, [fp, #-16]

}
 c100f04:	e1a00003 	mov	r0, r3
 c100f08:	e24bd00c 	sub	sp, fp, #12
 c100f0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100f10:	e12fff1e 	bx	lr
 c100f14:	0c105fbc 	.word	0x0c105fbc

0c100f18 <lcd_draw_hline>:

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
 c100f18:	e1a0c00d 	mov	ip, sp
 c100f1c:	e92dd800 	push	{fp, ip, lr, pc}
 c100f20:	e24cb004 	sub	fp, ip, #4
 c100f24:	e24dd010 	sub	sp, sp, #16
 c100f28:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c100f2c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100f30:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c100f34:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 row, line;

	for(line = y; line < width+y; ++line)
 c100f38:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100f3c:	e14b31b0 	strh	r3, [fp, #-16]
 c100f40:	ea000013 	b	c100f94 <lcd_draw_hline+0x7c>
		for(row = xleft; row < xright; ++row)
 c100f44:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100f48:	e14b30be 	strh	r3, [fp, #-14]
 c100f4c:	ea000009 	b	c100f78 <lcd_draw_hline+0x60>
			lcd_putpixel( row, line, color );
 c100f50:	e15b10be 	ldrh	r1, [fp, #-14]
 c100f54:	e15b21b0 	ldrh	r2, [fp, #-16]
 c100f58:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c100f5c:	e1a00001 	mov	r0, r1
 c100f60:	e1a01002 	mov	r1, r2
 c100f64:	e1a02003 	mov	r2, r3
 c100f68:	ebffff80 	bl	c100d70 <lcd_putpixel>
void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	uint16 row, line;

	for(line = y; line < width+y; ++line)
		for(row = xleft; row < xright; ++row)
 c100f6c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100f70:	e2833001 	add	r3, r3, #1
 c100f74:	e14b30be 	strh	r3, [fp, #-14]
 c100f78:	e15b20be 	ldrh	r2, [fp, #-14]
 c100f7c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100f80:	e1520003 	cmp	r2, r3
 c100f84:	3afffff1 	bcc	c100f50 <lcd_draw_hline+0x38>

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	uint16 row, line;

	for(line = y; line < width+y; ++line)
 c100f88:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100f8c:	e2833001 	add	r3, r3, #1
 c100f90:	e14b31b0 	strh	r3, [fp, #-16]
 c100f94:	e15b21b0 	ldrh	r2, [fp, #-16]
 c100f98:	e1db10b4 	ldrh	r1, [fp, #4]
 c100f9c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100fa0:	e0813003 	add	r3, r1, r3
 c100fa4:	e1520003 	cmp	r2, r3
 c100fa8:	baffffe5 	blt	c100f44 <lcd_draw_hline+0x2c>
		for(row = xleft; row < xright; ++row)
			lcd_putpixel( row, line, color );
}
 c100fac:	e24bd00c 	sub	sp, fp, #12
 c100fb0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100fb4:	e12fff1e 	bx	lr

0c100fb8 <lcd_draw_vline>:

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
 c100fb8:	e1a0c00d 	mov	ip, sp
 c100fbc:	e92dd800 	push	{fp, ip, lr, pc}
 c100fc0:	e24cb004 	sub	fp, ip, #4
 c100fc4:	e24dd010 	sub	sp, sp, #16
 c100fc8:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c100fcc:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100fd0:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c100fd4:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 line, row;

	for(row =  x; row < width+x; ++row)
 c100fd8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100fdc:	e14b31b0 	strh	r3, [fp, #-16]
 c100fe0:	ea000013 	b	c101034 <lcd_draw_vline+0x7c>
		for(line = yup; line < ydown; ++line)
 c100fe4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100fe8:	e14b30be 	strh	r3, [fp, #-14]
 c100fec:	ea000009 	b	c101018 <lcd_draw_vline+0x60>
			lcd_putpixel( row, line, color );
 c100ff0:	e15b11b0 	ldrh	r1, [fp, #-16]
 c100ff4:	e15b20be 	ldrh	r2, [fp, #-14]
 c100ff8:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c100ffc:	e1a00001 	mov	r0, r1
 c101000:	e1a01002 	mov	r1, r2
 c101004:	e1a02003 	mov	r2, r3
 c101008:	ebffff58 	bl	c100d70 <lcd_putpixel>
void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	uint16 line, row;

	for(row =  x; row < width+x; ++row)
		for(line = yup; line < ydown; ++line)
 c10100c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101010:	e2833001 	add	r3, r3, #1
 c101014:	e14b30be 	strh	r3, [fp, #-14]
 c101018:	e15b20be 	ldrh	r2, [fp, #-14]
 c10101c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101020:	e1520003 	cmp	r2, r3
 c101024:	3afffff1 	bcc	c100ff0 <lcd_draw_vline+0x38>

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	uint16 line, row;

	for(row =  x; row < width+x; ++row)
 c101028:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10102c:	e2833001 	add	r3, r3, #1
 c101030:	e14b31b0 	strh	r3, [fp, #-16]
 c101034:	e15b21b0 	ldrh	r2, [fp, #-16]
 c101038:	e1db10b4 	ldrh	r1, [fp, #4]
 c10103c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101040:	e0813003 	add	r3, r1, r3
 c101044:	e1520003 	cmp	r2, r3
 c101048:	baffffe5 	blt	c100fe4 <lcd_draw_vline+0x2c>
		for(line = yup; line < ydown; ++line)
			lcd_putpixel( row, line, color );
}
 c10104c:	e24bd00c 	sub	sp, fp, #12
 c101050:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101054:	e12fff1e 	bx	lr

0c101058 <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width )
{
 c101058:	e1a0c00d 	mov	ip, sp
 c10105c:	e92dd800 	push	{fp, ip, lr, pc}
 c101060:	e24cb004 	sub	fp, ip, #4
 c101064:	e24dd010 	sub	sp, sp, #16
 c101068:	e14b00be 	strh	r0, [fp, #-14]
 c10106c:	e14b11b0 	strh	r1, [fp, #-16]
 c101070:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c101074:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_vline( yup, ydown, xleft, color, width );
 c101078:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10107c:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c101080:	e15b20be 	ldrh	r2, [fp, #-14]
 c101084:	e5db3004 	ldrb	r3, [fp, #4]
 c101088:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10108c:	e58dc000 	str	ip, [sp]
 c101090:	ebffffc8 	bl	c100fb8 <lcd_draw_vline>
	lcd_draw_vline( yup, ydown, xright, color, width );
 c101094:	e15b01b0 	ldrh	r0, [fp, #-16]
 c101098:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10109c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1010a0:	e5db3004 	ldrb	r3, [fp, #4]
 c1010a4:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1010a8:	e58dc000 	str	ip, [sp]
 c1010ac:	ebffffc1 	bl	c100fb8 <lcd_draw_vline>
	lcd_draw_hline( xleft, xright, yup, color, width );
 c1010b0:	e15b00be 	ldrh	r0, [fp, #-14]
 c1010b4:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c1010b8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1010bc:	e5db3004 	ldrb	r3, [fp, #4]
 c1010c0:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1010c4:	e58dc000 	str	ip, [sp]
 c1010c8:	ebffff92 	bl	c100f18 <lcd_draw_hline>
	lcd_draw_hline( xleft, xright+5, ydown, color, width );
 c1010cc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1010d0:	e2833005 	add	r3, r3, #5
 c1010d4:	e1a03803 	lsl	r3, r3, #16
 c1010d8:	e1a01823 	lsr	r1, r3, #16
 c1010dc:	e15b00be 	ldrh	r0, [fp, #-14]
 c1010e0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c1010e4:	e5db3004 	ldrb	r3, [fp, #4]
 c1010e8:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1010ec:	e58dc000 	str	ip, [sp]
 c1010f0:	ebffff88 	bl	c100f18 <lcd_draw_hline>
}
 c1010f4:	e24bd00c 	sub	sp, fp, #12
 c1010f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010fc:	e12fff1e 	bx	lr

0c101100 <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
{
 c101100:	e1a0c00d 	mov	ip, sp
 c101104:	e92dd800 	push	{fp, ip, lr, pc}
 c101108:	e24cb004 	sub	fp, ip, #4
 c10110c:	e24dd010 	sub	sp, sp, #16
 c101110:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c101114:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c101118:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c10111c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c101120:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c101124:	e1a03203 	lsl	r3, r3, #4
 c101128:	e1a02003 	mov	r2, r3
 c10112c:	e59f311c 	ldr	r3, [pc, #284]	; c101250 <lcd_putchar+0x150>
 c101130:	e0823003 	add	r3, r2, r3
 c101134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( line=0; line<16; line++ )
 c101138:	e3a03000 	mov	r3, #0
 c10113c:	e54b300d 	strb	r3, [fp, #-13]
 c101140:	ea00003c 	b	c101238 <lcd_putchar+0x138>
        for( row=0; row<8; row++ )                    
 c101144:	e3a03000 	mov	r3, #0
 c101148:	e54b300e 	strb	r3, [fp, #-14]
 c10114c:	ea000033 	b	c101220 <lcd_putchar+0x120>
            if( bitmap[line] & (0x80 >> row) )
 c101150:	e55b300d 	ldrb	r3, [fp, #-13]
 c101154:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101158:	e0823003 	add	r3, r2, r3
 c10115c:	e5d33000 	ldrb	r3, [r3]
 c101160:	e1a02003 	mov	r2, r3
 c101164:	e55b300e 	ldrb	r3, [fp, #-14]
 c101168:	e3a01080 	mov	r1, #128	; 0x80
 c10116c:	e1a03351 	asr	r3, r1, r3
 c101170:	e0023003 	and	r3, r2, r3
 c101174:	e3530000 	cmp	r3, #0
 c101178:	0a000013 	beq	c1011cc <lcd_putchar+0xcc>
                lcd_putpixel( x+row, y+line, color );
 c10117c:	e55b300e 	ldrb	r3, [fp, #-14]
 c101180:	e1a03803 	lsl	r3, r3, #16
 c101184:	e1a02823 	lsr	r2, r3, #16
 c101188:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10118c:	e0823003 	add	r3, r2, r3
 c101190:	e1a03803 	lsl	r3, r3, #16
 c101194:	e1a01823 	lsr	r1, r3, #16
 c101198:	e55b300d 	ldrb	r3, [fp, #-13]
 c10119c:	e1a03803 	lsl	r3, r3, #16
 c1011a0:	e1a02823 	lsr	r2, r3, #16
 c1011a4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1011a8:	e0823003 	add	r3, r2, r3
 c1011ac:	e1a03803 	lsl	r3, r3, #16
 c1011b0:	e1a02823 	lsr	r2, r3, #16
 c1011b4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1011b8:	e1a00001 	mov	r0, r1
 c1011bc:	e1a01002 	mov	r1, r2
 c1011c0:	e1a02003 	mov	r2, r3
 c1011c4:	ebfffee9 	bl	c100d70 <lcd_putpixel>
 c1011c8:	ea000011 	b	c101214 <lcd_putchar+0x114>
            else
                lcd_putpixel( x+row, y+line, WHITE );
 c1011cc:	e55b300e 	ldrb	r3, [fp, #-14]
 c1011d0:	e1a03803 	lsl	r3, r3, #16
 c1011d4:	e1a02823 	lsr	r2, r3, #16
 c1011d8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1011dc:	e0823003 	add	r3, r2, r3
 c1011e0:	e1a03803 	lsl	r3, r3, #16
 c1011e4:	e1a02823 	lsr	r2, r3, #16
 c1011e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1011ec:	e1a03803 	lsl	r3, r3, #16
 c1011f0:	e1a01823 	lsr	r1, r3, #16
 c1011f4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1011f8:	e0813003 	add	r3, r1, r3
 c1011fc:	e1a03803 	lsl	r3, r3, #16
 c101200:	e1a03823 	lsr	r3, r3, #16
 c101204:	e1a00002 	mov	r0, r2
 c101208:	e1a01003 	mov	r1, r3
 c10120c:	e3a02000 	mov	r2, #0
 c101210:	ebfffed6 	bl	c100d70 <lcd_putpixel>
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
        for( row=0; row<8; row++ )                    
 c101214:	e55b300e 	ldrb	r3, [fp, #-14]
 c101218:	e2833001 	add	r3, r3, #1
 c10121c:	e54b300e 	strb	r3, [fp, #-14]
 c101220:	e55b300e 	ldrb	r3, [fp, #-14]
 c101224:	e3530007 	cmp	r3, #7
 c101228:	9affffc8 	bls	c101150 <lcd_putchar+0x50>
{
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
 c10122c:	e55b300d 	ldrb	r3, [fp, #-13]
 c101230:	e2833001 	add	r3, r3, #1
 c101234:	e54b300d 	strb	r3, [fp, #-13]
 c101238:	e55b300d 	ldrb	r3, [fp, #-13]
 c10123c:	e353000f 	cmp	r3, #15
 c101240:	9affffbf 	bls	c101144 <lcd_putchar+0x44>
        for( row=0; row<8; row++ )                    
            if( bitmap[line] & (0x80 >> row) )
                lcd_putpixel( x+row, y+line, color );
            else
                lcd_putpixel( x+row, y+line, WHITE );
}
 c101244:	e24bd00c 	sub	sp, fp, #12
 c101248:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10124c:	e12fff1e 	bx	lr
 c101250:	0c104fb4 	.word	0x0c104fb4

0c101254 <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
 c101254:	e1a0c00d 	mov	ip, sp
 c101258:	e92dd800 	push	{fp, ip, lr, pc}
 c10125c:	e24cb004 	sub	fp, ip, #4
 c101260:	e24dd010 	sub	sp, sp, #16
 c101264:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101268:	e14b00be 	strh	r0, [fp, #-14]
 c10126c:	e14b11b0 	strh	r1, [fp, #-16]
 c101270:	e1a03002 	mov	r3, r2
 c101274:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	while( *s  ) {
 c101278:	ea00000b 	b	c1012ac <lcd_puts+0x58>
		lcd_putchar( x, y, color, *s++ );
 c10127c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101280:	e5d33000 	ldrb	r3, [r3]
 c101284:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101288:	e2822001 	add	r2, r2, #1
 c10128c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c101290:	e15b00be 	ldrh	r0, [fp, #-14]
 c101294:	e15b11b0 	ldrh	r1, [fp, #-16]
 c101298:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c10129c:	ebffff97 	bl	c101100 <lcd_putchar>
		x += 10;
 c1012a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1012a4:	e283300a 	add	r3, r3, #10
 c1012a8:	e14b30be 	strh	r3, [fp, #-14]
                lcd_putpixel( x+row, y+line, WHITE );
}

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
	while( *s  ) {
 c1012ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1012b0:	e5d33000 	ldrb	r3, [r3]
 c1012b4:	e3530000 	cmp	r3, #0
 c1012b8:	1affffef 	bne	c10127c <lcd_puts+0x28>
		lcd_putchar( x, y, color, *s++ );
		x += 10;
	}
}
 c1012bc:	e24bd00c 	sub	sp, fp, #12
 c1012c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012c4:	e12fff1e 	bx	lr

0c1012c8 <lcd_putint>:

void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
{
 c1012c8:	e1a0c00d 	mov	ip, sp
 c1012cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1012d0:	e24cb004 	sub	fp, ip, #4
 c1012d4:	e24dd028 	sub	sp, sp, #40	; 0x28
 c1012d8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c1012dc:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c1012e0:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c1012e4:	e1a03002 	mov	r3, r2
 c1012e8:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	int8 num = 1;
 c1012ec:	e3a03001 	mov	r3, #1
 c1012f0:	e54b300d 	strb	r3, [fp, #-13]
	if(i < 0) {
 c1012f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1012f8:	e3530000 	cmp	r3, #0
 c1012fc:	aa000004 	bge	c101314 <lcd_putint+0x4c>
		num = -1;
 c101300:	e3e03000 	mvn	r3, #0
 c101304:	e54b300d 	strb	r3, [fp, #-13]
		i *= -1;
 c101308:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10130c:	e2633000 	rsb	r3, r3, #0
 c101310:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

    char buf[10 + 1];
    char *p = buf + 10;
 c101314:	e24b3024 	sub	r3, fp, #36	; 0x24
 c101318:	e283300a 	add	r3, r3, #10
 c10131c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int32 c;

    *p = '\0';
 c101320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101324:	e3a02000 	mov	r2, #0
 c101328:	e5c32000 	strb	r2, [r3]

    do {
        c = i % 10;
 c10132c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 c101330:	e59f30c0 	ldr	r3, [pc, #192]	; c1013f8 <lcd_putint+0x130>
 c101334:	e0c31392 	smull	r1, r3, r2, r3
 c101338:	e1a01143 	asr	r1, r3, #2
 c10133c:	e1a03fc2 	asr	r3, r2, #31
 c101340:	e0631001 	rsb	r1, r3, r1
 c101344:	e1a03001 	mov	r3, r1
 c101348:	e1a03103 	lsl	r3, r3, #2
 c10134c:	e0833001 	add	r3, r3, r1
 c101350:	e1a03083 	lsl	r3, r3, #1
 c101354:	e0633002 	rsb	r3, r3, r2
 c101358:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        *--p = '0' + c;
 c10135c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101360:	e2433001 	sub	r3, r3, #1
 c101364:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c101368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10136c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101370:	e2833030 	add	r3, r3, #48	; 0x30
 c101374:	e20320ff 	and	r2, r3, #255	; 0xff
 c101378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10137c:	e5c32000 	strb	r2, [r3]
        i /= 10;
 c101380:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101384:	e59f206c 	ldr	r2, [pc, #108]	; c1013f8 <lcd_putint+0x130>
 c101388:	e0c21293 	smull	r1, r2, r3, r2
 c10138c:	e1a02142 	asr	r2, r2, #2
 c101390:	e1a03fc3 	asr	r3, r3, #31
 c101394:	e0633002 	rsb	r3, r3, r2
 c101398:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    } while( i > 0 );
 c10139c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1013a0:	e3530000 	cmp	r3, #0
 c1013a4:	caffffe0 	bgt	c10132c <lcd_putint+0x64>

    if(num == -1) *--p = '-';
 c1013a8:	e15b30dd 	ldrsb	r3, [fp, #-13]
 c1013ac:	e3730001 	cmn	r3, #1
 c1013b0:	1a000005 	bne	c1013cc <lcd_putint+0x104>
 c1013b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1013b8:	e2433001 	sub	r3, r3, #1
 c1013bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1013c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1013c4:	e3a0202d 	mov	r2, #45	; 0x2d
 c1013c8:	e5c32000 	strb	r2, [r3]

    lcd_puts( x, y, color, p );
 c1013cc:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c1013d0:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c1013d4:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c1013d8:	e1a00001 	mov	r0, r1
 c1013dc:	e1a01002 	mov	r1, r2
 c1013e0:	e1a02003 	mov	r2, r3
 c1013e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1013e8:	ebffff99 	bl	c101254 <lcd_puts>
}
 c1013ec:	e24bd00c 	sub	sp, fp, #12
 c1013f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1013f4:	e12fff1e 	bx	lr
 c1013f8:	66666667 	.word	0x66666667

0c1013fc <lcd_puthex>:

void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c1013fc:	e1a0c00d 	mov	ip, sp
 c101400:	e92dd800 	push	{fp, ip, lr, pc}
 c101404:	e24cb004 	sub	fp, ip, #4
 c101408:	e24dd020 	sub	sp, sp, #32
 c10140c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c101410:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c101414:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c101418:	e1a03002 	mov	r3, r2
 c10141c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c101420:	e24b301c 	sub	r3, fp, #28
 c101424:	e2833008 	add	r3, r3, #8
 c101428:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10142c:	e51b3010 	ldr	r3, [fp, #-16]
 c101430:	e3a02000 	mov	r2, #0
 c101434:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c101438:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10143c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101440:	e203300f 	and	r3, r3, #15
 c101444:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c101448:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10144c:	e3530009 	cmp	r3, #9
 c101450:	8a000008 	bhi	c101478 <lcd_puthex+0x7c>
            *--p = '0' + c;
 c101454:	e51b3010 	ldr	r3, [fp, #-16]
 c101458:	e2433001 	sub	r3, r3, #1
 c10145c:	e50b3010 	str	r3, [fp, #-16]
 c101460:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101464:	e2833030 	add	r3, r3, #48	; 0x30
 c101468:	e20320ff 	and	r2, r3, #255	; 0xff
 c10146c:	e51b3010 	ldr	r3, [fp, #-16]
 c101470:	e5c32000 	strb	r2, [r3]
 c101474:	ea000007 	b	c101498 <lcd_puthex+0x9c>
        else
            *--p = 'a' + c - 10;
 c101478:	e51b3010 	ldr	r3, [fp, #-16]
 c10147c:	e2433001 	sub	r3, r3, #1
 c101480:	e50b3010 	str	r3, [fp, #-16]
 c101484:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101488:	e2833057 	add	r3, r3, #87	; 0x57
 c10148c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101490:	e51b3010 	ldr	r3, [fp, #-16]
 c101494:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c101498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10149c:	e1a03223 	lsr	r3, r3, #4
 c1014a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c1014a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1014a8:	e3530000 	cmp	r3, #0
 c1014ac:	1affffe1 	bne	c101438 <lcd_puthex+0x3c>

    lcd_puts( x, y, color, p );
 c1014b0:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c1014b4:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c1014b8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c1014bc:	e1a00001 	mov	r0, r1
 c1014c0:	e1a01002 	mov	r1, r2
 c1014c4:	e1a02003 	mov	r2, r3
 c1014c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1014cc:	ebffff60 	bl	c101254 <lcd_puts>
}
 c1014d0:	e24bd00c 	sub	sp, fp, #12
 c1014d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1014d8:	e12fff1e 	bx	lr

0c1014dc <lcd_putchar_x2>:

void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
 c1014dc:	e1a0c00d 	mov	ip, sp
 c1014e0:	e92dd800 	push	{fp, ip, lr, pc}
 c1014e4:	e24cb004 	sub	fp, ip, #4
 c1014e8:	e24dd010 	sub	sp, sp, #16
 c1014ec:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1014f0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1014f4:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c1014f8:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 line, row;
    uint8 *bitmap;
    uint16 save = x;
 c1014fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101500:	e14b31b0 	strh	r3, [fp, #-16]

    bitmap = font + ch*16;
 c101504:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c101508:	e1a03203 	lsl	r3, r3, #4
 c10150c:	e1a02003 	mov	r2, r3
 c101510:	e59f31d8 	ldr	r3, [pc, #472]	; c1016f0 <lcd_putchar_x2+0x214>
 c101514:	e0823003 	add	r3, r2, r3
 c101518:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( line=0; line<16; ++line ){
 c10151c:	e3a03000 	mov	r3, #0
 c101520:	e54b300d 	strb	r3, [fp, #-13]
 c101524:	ea00006b 	b	c1016d8 <lcd_putchar_x2+0x1fc>
    	x = save;
 c101528:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10152c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
        for( row=0; row<8; ++row ){
 c101530:	e3a03000 	mov	r3, #0
 c101534:	e54b300e 	strb	r3, [fp, #-14]
 c101538:	ea00005d 	b	c1016b4 <lcd_putchar_x2+0x1d8>
            if( bitmap[line] & (0x80 >> row) ){
 c10153c:	e55b300d 	ldrb	r3, [fp, #-13]
 c101540:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101544:	e0823003 	add	r3, r2, r3
 c101548:	e5d33000 	ldrb	r3, [r3]
 c10154c:	e1a02003 	mov	r2, r3
 c101550:	e55b300e 	ldrb	r3, [fp, #-14]
 c101554:	e3a01080 	mov	r1, #128	; 0x80
 c101558:	e1a03351 	asr	r3, r1, r3
 c10155c:	e0023003 	and	r3, r2, r3
 c101560:	e3530000 	cmp	r3, #0
 c101564:	0a000028 	beq	c10160c <lcd_putchar_x2+0x130>
                lcd_putpixel( x, y, color );
 c101568:	e15b11b6 	ldrh	r1, [fp, #-22]	; 0xffffffea
 c10156c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c101570:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101574:	e1a00001 	mov	r0, r1
 c101578:	e1a01002 	mov	r1, r2
 c10157c:	e1a02003 	mov	r2, r3
 c101580:	ebfffdfa 	bl	c100d70 <lcd_putpixel>
                lcd_putpixel( x+1, y, color );
 c101584:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101588:	e2833001 	add	r3, r3, #1
 c10158c:	e1a03803 	lsl	r3, r3, #16
 c101590:	e1a01823 	lsr	r1, r3, #16
 c101594:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c101598:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10159c:	e1a00001 	mov	r0, r1
 c1015a0:	e1a01002 	mov	r1, r2
 c1015a4:	e1a02003 	mov	r2, r3
 c1015a8:	ebfffdf0 	bl	c100d70 <lcd_putpixel>
                lcd_putpixel( x, y+1, color );
 c1015ac:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1015b0:	e2833001 	add	r3, r3, #1
 c1015b4:	e1a03803 	lsl	r3, r3, #16
 c1015b8:	e1a02823 	lsr	r2, r3, #16
 c1015bc:	e15b11b6 	ldrh	r1, [fp, #-22]	; 0xffffffea
 c1015c0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1015c4:	e1a00001 	mov	r0, r1
 c1015c8:	e1a01002 	mov	r1, r2
 c1015cc:	e1a02003 	mov	r2, r3
 c1015d0:	ebfffde6 	bl	c100d70 <lcd_putpixel>
                lcd_putpixel( x+1, y+1, color );
 c1015d4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1015d8:	e2833001 	add	r3, r3, #1
 c1015dc:	e1a03803 	lsl	r3, r3, #16
 c1015e0:	e1a01823 	lsr	r1, r3, #16
 c1015e4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1015e8:	e2833001 	add	r3, r3, #1
 c1015ec:	e1a03803 	lsl	r3, r3, #16
 c1015f0:	e1a02823 	lsr	r2, r3, #16
 c1015f4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1015f8:	e1a00001 	mov	r0, r1
 c1015fc:	e1a01002 	mov	r1, r2
 c101600:	e1a02003 	mov	r2, r3
 c101604:	ebfffdd9 	bl	c100d70 <lcd_putpixel>
 c101608:	ea000023 	b	c10169c <lcd_putchar_x2+0x1c0>
            }
            else{
                lcd_putpixel( x, y, WHITE );
 c10160c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c101610:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101614:	e1a00002 	mov	r0, r2
 c101618:	e1a01003 	mov	r1, r3
 c10161c:	e3a02000 	mov	r2, #0
 c101620:	ebfffdd2 	bl	c100d70 <lcd_putpixel>
                lcd_putpixel( x+1, y, WHITE );
 c101624:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101628:	e2833001 	add	r3, r3, #1
 c10162c:	e1a03803 	lsl	r3, r3, #16
 c101630:	e1a02823 	lsr	r2, r3, #16
 c101634:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101638:	e1a00002 	mov	r0, r2
 c10163c:	e1a01003 	mov	r1, r3
 c101640:	e3a02000 	mov	r2, #0
 c101644:	ebfffdc9 	bl	c100d70 <lcd_putpixel>
                lcd_putpixel( x, y+1, WHITE );
 c101648:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10164c:	e2833001 	add	r3, r3, #1
 c101650:	e1a03803 	lsl	r3, r3, #16
 c101654:	e1a03823 	lsr	r3, r3, #16
 c101658:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c10165c:	e1a00002 	mov	r0, r2
 c101660:	e1a01003 	mov	r1, r3
 c101664:	e3a02000 	mov	r2, #0
 c101668:	ebfffdc0 	bl	c100d70 <lcd_putpixel>
                lcd_putpixel( x+1, y+1, WHITE );
 c10166c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101670:	e2833001 	add	r3, r3, #1
 c101674:	e1a03803 	lsl	r3, r3, #16
 c101678:	e1a02823 	lsr	r2, r3, #16
 c10167c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101680:	e2833001 	add	r3, r3, #1
 c101684:	e1a03803 	lsl	r3, r3, #16
 c101688:	e1a03823 	lsr	r3, r3, #16
 c10168c:	e1a00002 	mov	r0, r2
 c101690:	e1a01003 	mov	r1, r3
 c101694:	e3a02000 	mov	r2, #0
 c101698:	ebfffdb4 	bl	c100d70 <lcd_putpixel>
            }
            x += 2;
 c10169c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1016a0:	e2833002 	add	r3, r3, #2
 c1016a4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint16 save = x;

    bitmap = font + ch*16;
    for( line=0; line<16; ++line ){
    	x = save;
        for( row=0; row<8; ++row ){
 c1016a8:	e55b300e 	ldrb	r3, [fp, #-14]
 c1016ac:	e2833001 	add	r3, r3, #1
 c1016b0:	e54b300e 	strb	r3, [fp, #-14]
 c1016b4:	e55b300e 	ldrb	r3, [fp, #-14]
 c1016b8:	e3530007 	cmp	r3, #7
 c1016bc:	9affff9e 	bls	c10153c <lcd_putchar_x2+0x60>
                lcd_putpixel( x, y+1, WHITE );
                lcd_putpixel( x+1, y+1, WHITE );
            }
            x += 2;
        }
        y += 2;
 c1016c0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1016c4:	e2833002 	add	r3, r3, #2
 c1016c8:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    uint8 line, row;
    uint8 *bitmap;
    uint16 save = x;

    bitmap = font + ch*16;
    for( line=0; line<16; ++line ){
 c1016cc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016d0:	e2833001 	add	r3, r3, #1
 c1016d4:	e54b300d 	strb	r3, [fp, #-13]
 c1016d8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016dc:	e353000f 	cmp	r3, #15
 c1016e0:	9affff90 	bls	c101528 <lcd_putchar_x2+0x4c>
            }
            x += 2;
        }
        y += 2;
    }
}
 c1016e4:	e24bd00c 	sub	sp, fp, #12
 c1016e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1016ec:	e12fff1e 	bx	lr
 c1016f0:	0c104fb4 	.word	0x0c104fb4

0c1016f4 <lcd_puts_x2>:

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
 c1016f4:	e1a0c00d 	mov	ip, sp
 c1016f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1016fc:	e24cb004 	sub	fp, ip, #4
 c101700:	e24dd010 	sub	sp, sp, #16
 c101704:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101708:	e14b00be 	strh	r0, [fp, #-14]
 c10170c:	e14b11b0 	strh	r1, [fp, #-16]
 c101710:	e1a03002 	mov	r3, r2
 c101714:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	while( *s  ) {
 c101718:	ea00000b 	b	c10174c <lcd_puts_x2+0x58>
		lcd_putchar_x2( x, y, color, *s++ );
 c10171c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101720:	e5d33000 	ldrb	r3, [r3]
 c101724:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101728:	e2822001 	add	r2, r2, #1
 c10172c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c101730:	e15b00be 	ldrh	r0, [fp, #-14]
 c101734:	e15b11b0 	ldrh	r1, [fp, #-16]
 c101738:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c10173c:	ebffff66 	bl	c1014dc <lcd_putchar_x2>
		x += 15;
 c101740:	e15b30be 	ldrh	r3, [fp, #-14]
 c101744:	e283300f 	add	r3, r3, #15
 c101748:	e14b30be 	strh	r3, [fp, #-14]
    }
}

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
	while( *s  ) {
 c10174c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101750:	e5d33000 	ldrb	r3, [r3]
 c101754:	e3530000 	cmp	r3, #0
 c101758:	1affffef 	bne	c10171c <lcd_puts_x2+0x28>
		lcd_putchar_x2( x, y, color, *s++ );
		x += 15;
	}
}
 c10175c:	e24bd00c 	sub	sp, fp, #12
 c101760:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101764:	e12fff1e 	bx	lr

0c101768 <lcd_putint_x2>:

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
{
 c101768:	e1a0c00d 	mov	ip, sp
 c10176c:	e92dd800 	push	{fp, ip, lr, pc}
 c101770:	e24cb004 	sub	fp, ip, #4
 c101774:	e24dd028 	sub	sp, sp, #40	; 0x28
 c101778:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c10177c:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c101780:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c101784:	e1a03002 	mov	r3, r2
 c101788:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	int8 num = 1;
 c10178c:	e3a03001 	mov	r3, #1
 c101790:	e54b300d 	strb	r3, [fp, #-13]
	if(i < 0) {
 c101794:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101798:	e3530000 	cmp	r3, #0
 c10179c:	aa000004 	bge	c1017b4 <lcd_putint_x2+0x4c>
		num = -1;
 c1017a0:	e3e03000 	mvn	r3, #0
 c1017a4:	e54b300d 	strb	r3, [fp, #-13]
		i *= -1;
 c1017a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1017ac:	e2633000 	rsb	r3, r3, #0
 c1017b0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

    char buf[10 + 1];
    char *p = buf + 10;
 c1017b4:	e24b3024 	sub	r3, fp, #36	; 0x24
 c1017b8:	e283300a 	add	r3, r3, #10
 c1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int32 c;

    *p = '\0';
 c1017c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1017c4:	e3a02000 	mov	r2, #0
 c1017c8:	e5c32000 	strb	r2, [r3]

    do {
        c = i % 10;
 c1017cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 c1017d0:	e59f30c0 	ldr	r3, [pc, #192]	; c101898 <lcd_putint_x2+0x130>
 c1017d4:	e0c31392 	smull	r1, r3, r2, r3
 c1017d8:	e1a01143 	asr	r1, r3, #2
 c1017dc:	e1a03fc2 	asr	r3, r2, #31
 c1017e0:	e0631001 	rsb	r1, r3, r1
 c1017e4:	e1a03001 	mov	r3, r1
 c1017e8:	e1a03103 	lsl	r3, r3, #2
 c1017ec:	e0833001 	add	r3, r3, r1
 c1017f0:	e1a03083 	lsl	r3, r3, #1
 c1017f4:	e0633002 	rsb	r3, r3, r2
 c1017f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        *--p = '0' + c;
 c1017fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101800:	e2433001 	sub	r3, r3, #1
 c101804:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c101808:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10180c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101810:	e2833030 	add	r3, r3, #48	; 0x30
 c101814:	e20320ff 	and	r2, r3, #255	; 0xff
 c101818:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10181c:	e5c32000 	strb	r2, [r3]
        i /= 10;
 c101820:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101824:	e59f206c 	ldr	r2, [pc, #108]	; c101898 <lcd_putint_x2+0x130>
 c101828:	e0c21293 	smull	r1, r2, r3, r2
 c10182c:	e1a02142 	asr	r2, r2, #2
 c101830:	e1a03fc3 	asr	r3, r3, #31
 c101834:	e0633002 	rsb	r3, r3, r2
 c101838:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    } while( i > 0 );
 c10183c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101840:	e3530000 	cmp	r3, #0
 c101844:	caffffe0 	bgt	c1017cc <lcd_putint_x2+0x64>

    if(num == -1) *--p = '-';
 c101848:	e15b30dd 	ldrsb	r3, [fp, #-13]
 c10184c:	e3730001 	cmn	r3, #1
 c101850:	1a000005 	bne	c10186c <lcd_putint_x2+0x104>
 c101854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101858:	e2433001 	sub	r3, r3, #1
 c10185c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c101860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101864:	e3a0202d 	mov	r2, #45	; 0x2d
 c101868:	e5c32000 	strb	r2, [r3]

    lcd_puts_x2( x, y, color, p );
 c10186c:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c101870:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c101874:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c101878:	e1a00001 	mov	r0, r1
 c10187c:	e1a01002 	mov	r1, r2
 c101880:	e1a02003 	mov	r2, r3
 c101884:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101888:	ebffff99 	bl	c1016f4 <lcd_puts_x2>
}
 c10188c:	e24bd00c 	sub	sp, fp, #12
 c101890:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101894:	e12fff1e 	bx	lr
 c101898:	66666667 	.word	0x66666667

0c10189c <lcd_puthex_x2>:

void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c10189c:	e1a0c00d 	mov	ip, sp
 c1018a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1018a4:	e24cb004 	sub	fp, ip, #4
 c1018a8:	e24dd028 	sub	sp, sp, #40	; 0x28
 c1018ac:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c1018b0:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c1018b4:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c1018b8:	e1a03002 	mov	r3, r2
 c1018bc:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    char buf[8 + 1];
    char *p = buf + 8;
 c1018c0:	e24b3020 	sub	r3, fp, #32
 c1018c4:	e2833008 	add	r3, r3, #8
 c1018c8:	e50b3010 	str	r3, [fp, #-16]
    uint32 c;

    *p = '\0';
 c1018cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1018d0:	e3a02000 	mov	r2, #0
 c1018d4:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c1018d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1018dc:	e203300f 	and	r3, r3, #15
 c1018e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if( c < 10 )
 c1018e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1018e8:	e3530009 	cmp	r3, #9
 c1018ec:	8a000009 	bhi	c101918 <lcd_puthex_x2+0x7c>
            *--p = '0' + c;
 c1018f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1018f4:	e2433001 	sub	r3, r3, #1
 c1018f8:	e50b3010 	str	r3, [fp, #-16]
 c1018fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101900:	e20330ff 	and	r3, r3, #255	; 0xff
 c101904:	e2833030 	add	r3, r3, #48	; 0x30
 c101908:	e20320ff 	and	r2, r3, #255	; 0xff
 c10190c:	e51b3010 	ldr	r3, [fp, #-16]
 c101910:	e5c32000 	strb	r2, [r3]
 c101914:	ea000008 	b	c10193c <lcd_puthex_x2+0xa0>
        else
            *--p = 'a' + c - 10;
 c101918:	e51b3010 	ldr	r3, [fp, #-16]
 c10191c:	e2433001 	sub	r3, r3, #1
 c101920:	e50b3010 	str	r3, [fp, #-16]
 c101924:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101928:	e20330ff 	and	r3, r3, #255	; 0xff
 c10192c:	e2833057 	add	r3, r3, #87	; 0x57
 c101930:	e20320ff 	and	r2, r3, #255	; 0xff
 c101934:	e51b3010 	ldr	r3, [fp, #-16]
 c101938:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10193c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101940:	e1a03223 	lsr	r3, r3, #4
 c101944:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    } while( i );
 c101948:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10194c:	e3530000 	cmp	r3, #0
 c101950:	1affffe0 	bne	c1018d8 <lcd_puthex_x2+0x3c>

    lcd_puts_x2( x, y, color, p );
 c101954:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c101958:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c10195c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c101960:	e1a00001 	mov	r0, r1
 c101964:	e1a01002 	mov	r1, r2
 c101968:	e1a02003 	mov	r2, r3
 c10196c:	e51b3010 	ldr	r3, [fp, #-16]
 c101970:	ebffff5f 	bl	c1016f4 <lcd_puts_x2>
}
 c101974:	e24bd00c 	sub	sp, fp, #12
 c101978:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10197c:	e12fff1e 	bx	lr

0c101980 <lcd_putWallpaper>:

void lcd_putWallpaper( uint8 *bmp )
{
 c101980:	e1a0c00d 	mov	ip, sp
 c101984:	e92dd800 	push	{fp, ip, lr, pc}
 c101988:	e24cb004 	sub	fp, ip, #4
 c10198c:	e24dd018 	sub	sp, sp, #24
 c101990:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 c101994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101998:	e283300a 	add	r3, r3, #10
 c10199c:	e5d33000 	ldrb	r3, [r3]
 c1019a0:	e1a02003 	mov	r2, r3
 c1019a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1019a8:	e283300b 	add	r3, r3, #11
 c1019ac:	e5d33000 	ldrb	r3, [r3]
 c1019b0:	e1a03403 	lsl	r3, r3, #8
 c1019b4:	e0822003 	add	r2, r2, r3
 c1019b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1019bc:	e283300c 	add	r3, r3, #12
 c1019c0:	e5d33000 	ldrb	r3, [r3]
 c1019c4:	e1a03803 	lsl	r3, r3, #16
 c1019c8:	e0822003 	add	r2, r2, r3
 c1019cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1019d0:	e283300d 	add	r3, r3, #13
 c1019d4:	e5d33000 	ldrb	r3, [r3]
 c1019d8:	e1a03c03 	lsl	r3, r3, #24
 c1019dc:	e0823003 	add	r3, r2, r3
 c1019e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    bmp = bmp + headerSize;
 c1019e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1019e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1019ec:	e0823003 	add	r3, r2, r3
 c1019f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c1019f4:	e3a03000 	mov	r3, #0
 c1019f8:	e14b31b0 	strh	r3, [fp, #-16]
 c1019fc:	e3a030ef 	mov	r3, #239	; 0xef
 c101a00:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c101a04:	ea00002d 	b	c101ac0 <lcd_putWallpaper+0x140>
    {
        offsetDst = yDst*LCD_WIDTH/2;
 c101a08:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c101a0c:	e1a03002 	mov	r3, r2
 c101a10:	e1a03103 	lsl	r3, r3, #2
 c101a14:	e0833002 	add	r3, r3, r2
 c101a18:	e1a03303 	lsl	r3, r3, #6
 c101a1c:	e1a02fa3 	lsr	r2, r3, #31
 c101a20:	e0823003 	add	r3, r2, r3
 c101a24:	e1a030c3 	asr	r3, r3, #1
 c101a28:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        offsetSrc = ySrc*LCD_WIDTH/2;
 c101a2c:	e15b21b0 	ldrh	r2, [fp, #-16]
 c101a30:	e1a03002 	mov	r3, r2
 c101a34:	e1a03103 	lsl	r3, r3, #2
 c101a38:	e0833002 	add	r3, r3, r2
 c101a3c:	e1a03303 	lsl	r3, r3, #6
 c101a40:	e1a02fa3 	lsr	r2, r3, #31
 c101a44:	e0823003 	add	r3, r2, r3
 c101a48:	e1a030c3 	asr	r3, r3, #1
 c101a4c:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
        for( x=0; x<LCD_WIDTH/2; x++ )
 c101a50:	e3a03000 	mov	r3, #0
 c101a54:	e14b30be 	strh	r3, [fp, #-14]
 c101a58:	ea00000f 	b	c101a9c <lcd_putWallpaper+0x11c>
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c101a5c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c101a60:	e15b30be 	ldrh	r3, [fp, #-14]
 c101a64:	e0823003 	add	r3, r2, r3
 c101a68:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c101a6c:	e15b20be 	ldrh	r2, [fp, #-14]
 c101a70:	e0812002 	add	r2, r1, r2
 c101a74:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c101a78:	e0812002 	add	r2, r1, r2
 c101a7c:	e5d22000 	ldrb	r2, [r2]
 c101a80:	e1e02002 	mvn	r2, r2
 c101a84:	e20210ff 	and	r1, r2, #255	; 0xff
 c101a88:	e59f2048 	ldr	r2, [pc, #72]	; c101ad8 <lcd_putWallpaper+0x158>
 c101a8c:	e7c21003 	strb	r1, [r2, r3]
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
 c101a90:	e15b30be 	ldrh	r3, [fp, #-14]
 c101a94:	e2833001 	add	r3, r3, #1
 c101a98:	e14b30be 	strh	r3, [fp, #-14]
 c101a9c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101aa0:	e353009f 	cmp	r3, #159	; 0x9f
 c101aa4:	9affffec 	bls	c101a5c <lcd_putWallpaper+0xdc>

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

    bmp = bmp + headerSize;
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c101aa8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101aac:	e2833001 	add	r3, r3, #1
 c101ab0:	e14b31b0 	strh	r3, [fp, #-16]
 c101ab4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c101ab8:	e2433001 	sub	r3, r3, #1
 c101abc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c101ac0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101ac4:	e35300ef 	cmp	r3, #239	; 0xef
 c101ac8:	9affffce 	bls	c101a08 <lcd_putWallpaper+0x88>
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c101acc:	e24bd00c 	sub	sp, fp, #12
 c101ad0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ad4:	e12fff1e 	bx	lr
 c101ad8:	0c105fbc 	.word	0x0c105fbc

0c101adc <sys_init>:
void isr_TS_dummy( void )        __attribute__ ((interrupt ("IRQ")));
void isr_KEYPAD_dummy( void )    __attribute__ ((interrupt ("IRQ")));
void isr_USB_dummy( void )       __attribute__ ((interrupt ("IRQ")));

void sys_init( void )
{
 c101adc:	e1a0c00d 	mov	ip, sp
 c101ae0:	e92dd800 	push	{fp, ip, lr, pc}
 c101ae4:	e24cb004 	sub	fp, ip, #4
    WTCON  = 0;    
 c101ae8:	e59f30ec 	ldr	r3, [pc, #236]	; c101bdc <sys_init+0x100>
 c101aec:	e3a02000 	mov	r2, #0
 c101af0:	e5832000 	str	r2, [r3]
    INTMSK = ~0;
 c101af4:	e59f30e4 	ldr	r3, [pc, #228]	; c101be0 <sys_init+0x104>
 c101af8:	e3e02000 	mvn	r2, #0
 c101afc:	e5832000 	str	r2, [r3]

    LOCKTIME = 0xFFF;
 c101b00:	e59f30dc 	ldr	r3, [pc, #220]	; c101be4 <sys_init+0x108>
 c101b04:	e59f20dc 	ldr	r2, [pc, #220]	; c101be8 <sys_init+0x10c>
 c101b08:	e5832000 	str	r2, [r3]
    PLLCON   = 0x38021;
 c101b0c:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c101b10:	e59f20d4 	ldr	r2, [pc, #212]	; c101bec <sys_init+0x110>
 c101b14:	e5832000 	str	r2, [r3]
    CLKSLOW  = 0x8;
 c101b18:	e59f30d0 	ldr	r3, [pc, #208]	; c101bf0 <sys_init+0x114>
 c101b1c:	e3a02008 	mov	r2, #8
 c101b20:	e5832000 	str	r2, [r3]
    CLKCON   = 0x7FF8;
 c101b24:	e59f30c8 	ldr	r3, [pc, #200]	; c101bf4 <sys_init+0x118>
 c101b28:	e59f20c8 	ldr	r2, [pc, #200]	; c101bf8 <sys_init+0x11c>
 c101b2c:	e5832000 	str	r2, [r3]
    
    SBUSCON = 0x8000001B;
 c101b30:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c101b34:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c101b38:	e5832000 	str	r2, [r3]
    
    SYSCFG = 0xE;
 c101b3c:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c101b40:	e3a0200e 	mov	r2, #14
 c101b44:	e5832000 	str	r2, [r3]
    
    I_PMST = 0x1F1B;
 c101b48:	e59f30ac 	ldr	r3, [pc, #172]	; c101bfc <sys_init+0x120>
 c101b4c:	e59f20ac 	ldr	r2, [pc, #172]	; c101c00 <sys_init+0x124>
 c101b50:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1B1B1B1B;
 c101b54:	e59f30a8 	ldr	r3, [pc, #168]	; c101c04 <sys_init+0x128>
 c101b58:	e59f20a8 	ldr	r2, [pc, #168]	; c101c08 <sys_init+0x12c>
 c101b5c:	e5832000 	str	r2, [r3]
    INTMOD = 0x0;
 c101b60:	e59f30a4 	ldr	r3, [pc, #164]	; c101c0c <sys_init+0x130>
 c101b64:	e3a02000 	mov	r2, #0
 c101b68:	e5832000 	str	r2, [r3]
    install_dummy_isr();
 c101b6c:	eb00008c 	bl	c101da4 <install_dummy_isr>
    EXTINTPND = ~0x0;
 c101b70:	e59f3098 	ldr	r3, [pc, #152]	; c101c10 <sys_init+0x134>
 c101b74:	e3e02000 	mvn	r2, #0
 c101b78:	e5832000 	str	r2, [r3]
    I_ISPC = ~0x0;
 c101b7c:	e59f3090 	ldr	r3, [pc, #144]	; c101c14 <sys_init+0x138>
 c101b80:	e3e02000 	mvn	r2, #0
 c101b84:	e5832000 	str	r2, [r3]
    INTCON = 0x1;
 c101b88:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c101b8c:	e3a02001 	mov	r2, #1
 c101b90:	e5832000 	str	r2, [r3]

    SET_OPMODE( SVCMODE );
 c101b94:	e10f0000 	mrs	r0, CPSR
 c101b98:	e3c0001f 	bic	r0, r0, #31
 c101b9c:	e3800013 	orr	r0, r0, #19
 c101ba0:	e121f000 	msr	CPSR_c, r0
    SET_IRQFLAG( 0 );
 c101ba4:	e10f0000 	mrs	r0, CPSR
 c101ba8:	e3c00080 	bic	r0, r0, #128	; 0x80
 c101bac:	e3800000 	orr	r0, r0, #0
 c101bb0:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG( 1 );
 c101bb4:	e10f0000 	mrs	r0, CPSR
 c101bb8:	e3c00040 	bic	r0, r0, #64	; 0x40
 c101bbc:	e3800040 	orr	r0, r0, #64	; 0x40
 c101bc0:	e121f000 	msr	CPSR_c, r0

    port_init();
 c101bc4:	eb000013 	bl	c101c18 <port_init>
    uart0_init();
 c101bc8:	eb000692 	bl	c103618 <uart0_init>

    show_sys_info();
 c101bcc:	eb00020c 	bl	c102404 <show_sys_info>
}
 c101bd0:	e24bd00c 	sub	sp, fp, #12
 c101bd4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101bd8:	e12fff1e 	bx	lr
 c101bdc:	01d30000 	.word	0x01d30000
 c101be0:	01e0000c 	.word	0x01e0000c
 c101be4:	01d8000c 	.word	0x01d8000c
 c101be8:	00000fff 	.word	0x00000fff
 c101bec:	00038021 	.word	0x00038021
 c101bf0:	01d80008 	.word	0x01d80008
 c101bf4:	01d80004 	.word	0x01d80004
 c101bf8:	00007ff8 	.word	0x00007ff8
 c101bfc:	01e00014 	.word	0x01e00014
 c101c00:	00001f1b 	.word	0x00001f1b
 c101c04:	01e00010 	.word	0x01e00010
 c101c08:	1b1b1b1b 	.word	0x1b1b1b1b
 c101c0c:	01e00008 	.word	0x01e00008
 c101c10:	01d20054 	.word	0x01d20054
 c101c14:	01e00024 	.word	0x01e00024

0c101c18 <port_init>:

static void port_init( void )
{
 c101c18:	e1a0c00d 	mov	ip, sp
 c101c1c:	e92dd800 	push	{fp, ip, lr, pc}
 c101c20:	e24cb004 	sub	fp, ip, #4
    PDATA = ~0;
 c101c24:	e59f3100 	ldr	r3, [pc, #256]	; c101d2c <port_init+0x114>
 c101c28:	e3e02000 	mvn	r2, #0
 c101c2c:	e5832000 	str	r2, [r3]
    PCONA = 0xFE;
 c101c30:	e59f30f8 	ldr	r3, [pc, #248]	; c101d30 <port_init+0x118>
 c101c34:	e3a020fe 	mov	r2, #254	; 0xfe
 c101c38:	e5832000 	str	r2, [r3]

    PDATB = ~0;
 c101c3c:	e59f30f0 	ldr	r3, [pc, #240]	; c101d34 <port_init+0x11c>
 c101c40:	e3e02000 	mvn	r2, #0
 c101c44:	e5832000 	str	r2, [r3]
	PCONB = 0x14F;
 c101c48:	e59f30e8 	ldr	r3, [pc, #232]	; c101d38 <port_init+0x120>
 c101c4c:	e59f20e8 	ldr	r2, [pc, #232]	; c101d3c <port_init+0x124>
 c101c50:	e5832000 	str	r2, [r3]

    PDATC = ~0;
 c101c54:	e59f30e4 	ldr	r3, [pc, #228]	; c101d40 <port_init+0x128>
 c101c58:	e3e02000 	mvn	r2, #0
 c101c5c:	e5832000 	str	r2, [r3]
    PCONC = 0x5FF555FF;
 c101c60:	e59f30dc 	ldr	r3, [pc, #220]	; c101d44 <port_init+0x12c>
 c101c64:	e59f20dc 	ldr	r2, [pc, #220]	; c101d48 <port_init+0x130>
 c101c68:	e5832000 	str	r2, [r3]
    PUPC  = 0x94FB;
 c101c6c:	e59f30d8 	ldr	r3, [pc, #216]	; c101d4c <port_init+0x134>
 c101c70:	e59f20d8 	ldr	r2, [pc, #216]	; c101d50 <port_init+0x138>
 c101c74:	e5832000 	str	r2, [r3]

    PDATD = ~0;
 c101c78:	e59f30d4 	ldr	r3, [pc, #212]	; c101d54 <port_init+0x13c>
 c101c7c:	e3e02000 	mvn	r2, #0
 c101c80:	e5832000 	str	r2, [r3]
    PCOND = 0xAAAA;
 c101c84:	e59f30cc 	ldr	r3, [pc, #204]	; c101d58 <port_init+0x140>
 c101c88:	e59f20cc 	ldr	r2, [pc, #204]	; c101d5c <port_init+0x144>
 c101c8c:	e5832000 	str	r2, [r3]
    PUPD  = 0xFF;
 c101c90:	e59f30c8 	ldr	r3, [pc, #200]	; c101d60 <port_init+0x148>
 c101c94:	e3a020ff 	mov	r2, #255	; 0xff
 c101c98:	e5832000 	str	r2, [r3]

    PDATE = ~0;
 c101c9c:	e59f30c0 	ldr	r3, [pc, #192]	; c101d64 <port_init+0x14c>
 c101ca0:	e3e02000 	mvn	r2, #0
 c101ca4:	e5832000 	str	r2, [r3]
    PCONE = 0x255A9;
 c101ca8:	e59f30b8 	ldr	r3, [pc, #184]	; c101d68 <port_init+0x150>
 c101cac:	e59f20b8 	ldr	r2, [pc, #184]	; c101d6c <port_init+0x154>
 c101cb0:	e5832000 	str	r2, [r3]
    PUPE  = 0x1FB;
 c101cb4:	e59f30b4 	ldr	r3, [pc, #180]	; c101d70 <port_init+0x158>
 c101cb8:	e59f20b4 	ldr	r2, [pc, #180]	; c101d74 <port_init+0x15c>
 c101cbc:	e5832000 	str	r2, [r3]

    PDATF = ~0;
 c101cc0:	e59f30b0 	ldr	r3, [pc, #176]	; c101d78 <port_init+0x160>
 c101cc4:	e3e02000 	mvn	r2, #0
 c101cc8:	e5832000 	str	r2, [r3]
    PCONF = 0x251A;
 c101ccc:	e59f30a8 	ldr	r3, [pc, #168]	; c101d7c <port_init+0x164>
 c101cd0:	e59f20a8 	ldr	r2, [pc, #168]	; c101d80 <port_init+0x168>
 c101cd4:	e5832000 	str	r2, [r3]
    PUPF  = 0x74;
 c101cd8:	e59f30a4 	ldr	r3, [pc, #164]	; c101d84 <port_init+0x16c>
 c101cdc:	e3a02074 	mov	r2, #116	; 0x74
 c101ce0:	e5832000 	str	r2, [r3]

    PDATG = ~0;
 c101ce4:	e59f309c 	ldr	r3, [pc, #156]	; c101d88 <port_init+0x170>
 c101ce8:	e3e02000 	mvn	r2, #0
 c101cec:	e5832000 	str	r2, [r3]
    PCONG = 0xF5FF;
 c101cf0:	e59f3094 	ldr	r3, [pc, #148]	; c101d8c <port_init+0x174>
 c101cf4:	e59f2094 	ldr	r2, [pc, #148]	; c101d90 <port_init+0x178>
 c101cf8:	e5832000 	str	r2, [r3]
    PUPG  = 0x30;
 c101cfc:	e59f3090 	ldr	r3, [pc, #144]	; c101d94 <port_init+0x17c>
 c101d00:	e3a02030 	mov	r2, #48	; 0x30
 c101d04:	e5832000 	str	r2, [r3]

    SPUCR = 0x7;
 c101d08:	e59f3088 	ldr	r3, [pc, #136]	; c101d98 <port_init+0x180>
 c101d0c:	e3a02007 	mov	r2, #7
 c101d10:	e5832000 	str	r2, [r3]

    EXTINT = 0x22000220;
 c101d14:	e59f3080 	ldr	r3, [pc, #128]	; c101d9c <port_init+0x184>
 c101d18:	e59f2080 	ldr	r2, [pc, #128]	; c101da0 <port_init+0x188>
 c101d1c:	e5832000 	str	r2, [r3]
}
 c101d20:	e24bd00c 	sub	sp, fp, #12
 c101d24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101d28:	e12fff1e 	bx	lr
 c101d2c:	01d20004 	.word	0x01d20004
 c101d30:	01d20000 	.word	0x01d20000
 c101d34:	01d2000c 	.word	0x01d2000c
 c101d38:	01d20008 	.word	0x01d20008
 c101d3c:	0000014f 	.word	0x0000014f
 c101d40:	01d20014 	.word	0x01d20014
 c101d44:	01d20010 	.word	0x01d20010
 c101d48:	5ff555ff 	.word	0x5ff555ff
 c101d4c:	01d20018 	.word	0x01d20018
 c101d50:	000094fb 	.word	0x000094fb
 c101d54:	01d20020 	.word	0x01d20020
 c101d58:	01d2001c 	.word	0x01d2001c
 c101d5c:	0000aaaa 	.word	0x0000aaaa
 c101d60:	01d20024 	.word	0x01d20024
 c101d64:	01d2002c 	.word	0x01d2002c
 c101d68:	01d20028 	.word	0x01d20028
 c101d6c:	000255a9 	.word	0x000255a9
 c101d70:	01d20030 	.word	0x01d20030
 c101d74:	000001fb 	.word	0x000001fb
 c101d78:	01d20038 	.word	0x01d20038
 c101d7c:	01d20034 	.word	0x01d20034
 c101d80:	0000251a 	.word	0x0000251a
 c101d84:	01d2003c 	.word	0x01d2003c
 c101d88:	01d20044 	.word	0x01d20044
 c101d8c:	01d20040 	.word	0x01d20040
 c101d90:	0000f5ff 	.word	0x0000f5ff
 c101d94:	01d20048 	.word	0x01d20048
 c101d98:	01d2004c 	.word	0x01d2004c
 c101d9c:	01d20050 	.word	0x01d20050
 c101da0:	22000220 	.word	0x22000220

0c101da4 <install_dummy_isr>:

static void install_dummy_isr( void )
{ 
 c101da4:	e1a0c00d 	mov	ip, sp
 c101da8:	e92dd800 	push	{fp, ip, lr, pc}
 c101dac:	e24cb004 	sub	fp, ip, #4
	pISR_SWI = (uint32) isr_SWI_dummy;
 c101db0:	e59f307c 	ldr	r3, [pc, #124]	; c101e34 <install_dummy_isr+0x90>
 c101db4:	e59f207c 	ldr	r2, [pc, #124]	; c101e38 <install_dummy_isr+0x94>
 c101db8:	e5832000 	str	r2, [r3]
	pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c101dbc:	e59f3078 	ldr	r3, [pc, #120]	; c101e3c <install_dummy_isr+0x98>
 c101dc0:	e59f2078 	ldr	r2, [pc, #120]	; c101e40 <install_dummy_isr+0x9c>
 c101dc4:	e5832000 	str	r2, [r3]
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c101dc8:	e59f3074 	ldr	r3, [pc, #116]	; c101e44 <install_dummy_isr+0xa0>
 c101dcc:	e59f2074 	ldr	r2, [pc, #116]	; c101e48 <install_dummy_isr+0xa4>
 c101dd0:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c101dd4:	e59f3070 	ldr	r3, [pc, #112]	; c101e4c <install_dummy_isr+0xa8>
 c101dd8:	e59f2070 	ldr	r2, [pc, #112]	; c101e50 <install_dummy_isr+0xac>
 c101ddc:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c101de0:	e59f306c 	ldr	r3, [pc, #108]	; c101e54 <install_dummy_isr+0xb0>
 c101de4:	e59f206c 	ldr	r2, [pc, #108]	; c101e58 <install_dummy_isr+0xb4>
 c101de8:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c101dec:	e59f3068 	ldr	r3, [pc, #104]	; c101e5c <install_dummy_isr+0xb8>
 c101df0:	e59f2068 	ldr	r2, [pc, #104]	; c101e60 <install_dummy_isr+0xbc>
 c101df4:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c101df8:	e59f3064 	ldr	r3, [pc, #100]	; c101e64 <install_dummy_isr+0xc0>
 c101dfc:	e59f2064 	ldr	r2, [pc, #100]	; c101e68 <install_dummy_isr+0xc4>
 c101e00:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c101e04:	e59f3060 	ldr	r3, [pc, #96]	; c101e6c <install_dummy_isr+0xc8>
 c101e08:	e59f2060 	ldr	r2, [pc, #96]	; c101e70 <install_dummy_isr+0xcc>
 c101e0c:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32) isr_TICK_dummy;
 c101e10:	e59f305c 	ldr	r3, [pc, #92]	; c101e74 <install_dummy_isr+0xd0>
 c101e14:	e59f205c 	ldr	r2, [pc, #92]	; c101e78 <install_dummy_isr+0xd4>
 c101e18:	e5832000 	str	r2, [r3]
	pISR_USB = (uint32) isr_USB_dummy;
 c101e1c:	e59f3058 	ldr	r3, [pc, #88]	; c101e7c <install_dummy_isr+0xd8>
 c101e20:	e59f2058 	ldr	r2, [pc, #88]	; c101e80 <install_dummy_isr+0xdc>
 c101e24:	e5832000 	str	r2, [r3]
}        
 c101e28:	e24bd00c 	sub	sp, fp, #12
 c101e2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e30:	e12fff1e 	bx	lr
 c101e34:	0c7fff08 	.word	0x0c7fff08
 c101e38:	0c101e84 	.word	0x0c101e84
 c101e3c:	0c7fff04 	.word	0x0c7fff04
 c101e40:	0c101eb0 	.word	0x0c101eb0
 c101e44:	0c7fff18 	.word	0x0c7fff18
 c101e48:	0c101edc 	.word	0x0c101edc
 c101e4c:	0c7fff1c 	.word	0x0c7fff1c
 c101e50:	0c101f08 	.word	0x0c101f08
 c101e54:	0c7fff0c 	.word	0x0c7fff0c
 c101e58:	0c101f34 	.word	0x0c101f34
 c101e5c:	0c7fff10 	.word	0x0c7fff10
 c101e60:	0c101f60 	.word	0x0c101f60
 c101e64:	0c7fff20 	.word	0x0c7fff20
 c101e68:	0c101f8c 	.word	0x0c101f8c
 c101e6c:	0c7fff24 	.word	0x0c7fff24
 c101e70:	0c101fb8 	.word	0x0c101fb8
 c101e74:	0c7fff70 	.word	0x0c7fff70
 c101e78:	0c1022fc 	.word	0x0c1022fc
 c101e7c:	0c7fff84 	.word	0x0c7fff84
 c101e80:	0c1023d8 	.word	0x0c1023d8

0c101e84 <isr_SWI_dummy>:

void isr_SWI_dummy( void )
{
 c101e84:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101e88:	e1a0c00d 	mov	ip, sp
 c101e8c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101e90:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy" );
 c101e94:	e59f0010 	ldr	r0, [pc, #16]	; c101eac <isr_SWI_dummy+0x28>
 c101e98:	eb00061d 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101e9c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ea0:	e3a02075 	mov	r2, #117	; 0x75
 c101ea4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101ea8:	eafffffe 	b	c101ea8 <isr_SWI_dummy+0x24>
 c101eac:	0c1049dc 	.word	0x0c1049dc

0c101eb0 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void )
{
 c101eb0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101eb4:	e1a0c00d 	mov	ip, sp
 c101eb8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101ebc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy" );
 c101ec0:	e59f0010 	ldr	r0, [pc, #16]	; c101ed8 <isr_UNDEF_dummy+0x28>
 c101ec4:	eb000612 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101ec8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ecc:	e3a02075 	mov	r2, #117	; 0x75
 c101ed0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101ed4:	eafffffe 	b	c101ed4 <isr_UNDEF_dummy+0x24>
 c101ed8:	0c104a08 	.word	0x0c104a08

0c101edc <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void )
{
 c101edc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101ee0:	e1a0c00d 	mov	ip, sp
 c101ee4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101ee8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy" );
 c101eec:	e59f0010 	ldr	r0, [pc, #16]	; c101f04 <isr_IRQ_dummy+0x28>
 c101ef0:	eb000607 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101ef4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ef8:	e3a02075 	mov	r2, #117	; 0x75
 c101efc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101f00:	eafffffe 	b	c101f00 <isr_IRQ_dummy+0x24>
 c101f04:	0c104a38 	.word	0x0c104a38

0c101f08 <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void )
{
 c101f08:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101f0c:	e1a0c00d 	mov	ip, sp
 c101f10:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101f14:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy" );
 c101f18:	e59f0010 	ldr	r0, [pc, #16]	; c101f30 <isr_FIQ_dummy+0x28>
 c101f1c:	eb0005fc 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101f20:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101f24:	e3a02075 	mov	r2, #117	; 0x75
 c101f28:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101f2c:	eafffffe 	b	c101f2c <isr_FIQ_dummy+0x24>
 c101f30:	0c104a64 	.word	0x0c104a64

0c101f34 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void )
{
 c101f34:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101f38:	e1a0c00d 	mov	ip, sp
 c101f3c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101f40:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy" );
 c101f44:	e59f0010 	ldr	r0, [pc, #16]	; c101f5c <isr_PABORT_dummy+0x28>
 c101f48:	eb0005f1 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101f4c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101f50:	e3a02075 	mov	r2, #117	; 0x75
 c101f54:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101f58:	eafffffe 	b	c101f58 <isr_PABORT_dummy+0x24>
 c101f5c:	0c104a90 	.word	0x0c104a90

0c101f60 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void )
{
 c101f60:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101f64:	e1a0c00d 	mov	ip, sp
 c101f68:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101f6c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy" );
 c101f70:	e59f0010 	ldr	r0, [pc, #16]	; c101f88 <isr_DABORT_dummy+0x28>
 c101f74:	eb0005e6 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101f78:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101f7c:	e3a02075 	mov	r2, #117	; 0x75
 c101f80:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101f84:	eafffffe 	b	c101f84 <isr_DABORT_dummy+0x24>
 c101f88:	0c104ac0 	.word	0x0c104ac0

0c101f8c <isr_ADC_dummy>:
}

void isr_ADC_dummy( void )
{
 c101f8c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101f90:	e1a0c00d 	mov	ip, sp
 c101f94:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101f98:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy" );
 c101f9c:	e59f0010 	ldr	r0, [pc, #16]	; c101fb4 <isr_ADC_dummy+0x28>
 c101fa0:	eb0005db 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101fa4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101fa8:	e3a02075 	mov	r2, #117	; 0x75
 c101fac:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101fb0:	eafffffe 	b	c101fb0 <isr_ADC_dummy+0x24>
 c101fb4:	0c104af0 	.word	0x0c104af0

0c101fb8 <isr_RTC_dummy>:
}

void isr_RTC_dummy( void )
{
 c101fb8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101fbc:	e1a0c00d 	mov	ip, sp
 c101fc0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101fc4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy" );
 c101fc8:	e59f0010 	ldr	r0, [pc, #16]	; c101fe0 <isr_RTC_dummy+0x28>
 c101fcc:	eb0005d0 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101fd0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101fd4:	e3a02075 	mov	r2, #117	; 0x75
 c101fd8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101fdc:	eafffffe 	b	c101fdc <isr_RTC_dummy+0x24>
 c101fe0:	0c104b1c 	.word	0x0c104b1c

0c101fe4 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void )
{
 c101fe4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101fe8:	e1a0c00d 	mov	ip, sp
 c101fec:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101ff0:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy" );
 c101ff4:	e59f0010 	ldr	r0, [pc, #16]	; c10200c <isr_UTXD1_dummy+0x28>
 c101ff8:	eb0005c5 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c101ffc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102000:	e3a02075 	mov	r2, #117	; 0x75
 c102004:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102008:	eafffffe 	b	c102008 <isr_UTXD1_dummy+0x24>
 c10200c:	0c104b48 	.word	0x0c104b48

0c102010 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void )
{
 c102010:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102014:	e1a0c00d 	mov	ip, sp
 c102018:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10201c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy" );
 c102020:	e59f0010 	ldr	r0, [pc, #16]	; c102038 <isr_UTXD0_dummy+0x28>
 c102024:	eb0005ba 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102028:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10202c:	e3a02075 	mov	r2, #117	; 0x75
 c102030:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102034:	eafffffe 	b	c102034 <isr_UTXD0_dummy+0x24>
 c102038:	0c104b78 	.word	0x0c104b78

0c10203c <isr_SIO_dummy>:
}

void isr_SIO_dummy( void )
{
 c10203c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102040:	e1a0c00d 	mov	ip, sp
 c102044:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102048:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy" );
 c10204c:	e59f0010 	ldr	r0, [pc, #16]	; c102064 <isr_SIO_dummy+0x28>
 c102050:	eb0005af 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102054:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102058:	e3a02075 	mov	r2, #117	; 0x75
 c10205c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102060:	eafffffe 	b	c102060 <isr_SIO_dummy+0x24>
 c102064:	0c104ba8 	.word	0x0c104ba8

0c102068 <isr_IIC_dummy>:
}

void isr_IIC_dummy( void )
{
 c102068:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10206c:	e1a0c00d 	mov	ip, sp
 c102070:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102074:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy" );
 c102078:	e59f0010 	ldr	r0, [pc, #16]	; c102090 <isr_IIC_dummy+0x28>
 c10207c:	eb0005a4 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102080:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102084:	e3a02075 	mov	r2, #117	; 0x75
 c102088:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10208c:	eafffffe 	b	c10208c <isr_IIC_dummy+0x24>
 c102090:	0c104bd4 	.word	0x0c104bd4

0c102094 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void )
{
 c102094:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102098:	e1a0c00d 	mov	ip, sp
 c10209c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1020a0:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URCD1_dummy" );
 c1020a4:	e59f0010 	ldr	r0, [pc, #16]	; c1020bc <isr_URXD1_dummy+0x28>
 c1020a8:	eb000599 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1020ac:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1020b0:	e3a02075 	mov	r2, #117	; 0x75
 c1020b4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1020b8:	eafffffe 	b	c1020b8 <isr_URXD1_dummy+0x24>
 c1020bc:	0c104c00 	.word	0x0c104c00

0c1020c0 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void )
{
 c1020c0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1020c4:	e1a0c00d 	mov	ip, sp
 c1020c8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1020cc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URCD0_dummy" );
 c1020d0:	e59f0010 	ldr	r0, [pc, #16]	; c1020e8 <isr_URXD0_dummy+0x28>
 c1020d4:	eb00058e 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1020d8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1020dc:	e3a02075 	mov	r2, #117	; 0x75
 c1020e0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1020e4:	eafffffe 	b	c1020e4 <isr_URXD0_dummy+0x24>
 c1020e8:	0c104c30 	.word	0x0c104c30

0c1020ec <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void )
{
 c1020ec:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1020f0:	e1a0c00d 	mov	ip, sp
 c1020f4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1020f8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy" );
 c1020fc:	e59f0010 	ldr	r0, [pc, #16]	; c102114 <isr_TIMER5_dummy+0x28>
 c102100:	eb000583 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102104:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102108:	e3a02075 	mov	r2, #117	; 0x75
 c10210c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102110:	eafffffe 	b	c102110 <isr_TIMER5_dummy+0x24>
 c102114:	0c104c60 	.word	0x0c104c60

0c102118 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void )
{
 c102118:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10211c:	e1a0c00d 	mov	ip, sp
 c102120:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102124:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy" );
 c102128:	e59f0010 	ldr	r0, [pc, #16]	; c102140 <isr_TIMER4_dummy+0x28>
 c10212c:	eb000578 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102130:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102134:	e3a02075 	mov	r2, #117	; 0x75
 c102138:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10213c:	eafffffe 	b	c10213c <isr_TIMER4_dummy+0x24>
 c102140:	0c104c90 	.word	0x0c104c90

0c102144 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void )
{
 c102144:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102148:	e1a0c00d 	mov	ip, sp
 c10214c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102150:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy" );
 c102154:	e59f0010 	ldr	r0, [pc, #16]	; c10216c <isr_TIMER3_dummy+0x28>
 c102158:	eb00056d 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c10215c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102160:	e3a02075 	mov	r2, #117	; 0x75
 c102164:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102168:	eafffffe 	b	c102168 <isr_TIMER3_dummy+0x24>
 c10216c:	0c104cc0 	.word	0x0c104cc0

0c102170 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void )
{
 c102170:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102174:	e1a0c00d 	mov	ip, sp
 c102178:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10217c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy" );
 c102180:	e59f0010 	ldr	r0, [pc, #16]	; c102198 <isr_TIMER2_dummy+0x28>
 c102184:	eb000562 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102188:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10218c:	e3a02075 	mov	r2, #117	; 0x75
 c102190:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102194:	eafffffe 	b	c102194 <isr_TIMER2_dummy+0x24>
 c102198:	0c104cf0 	.word	0x0c104cf0

0c10219c <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void )
{
 c10219c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1021a0:	e1a0c00d 	mov	ip, sp
 c1021a4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1021a8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy" );
 c1021ac:	e59f0010 	ldr	r0, [pc, #16]	; c1021c4 <isr_TIMER1_dummy+0x28>
 c1021b0:	eb000557 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1021b4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1021b8:	e3a02075 	mov	r2, #117	; 0x75
 c1021bc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1021c0:	eafffffe 	b	c1021c0 <isr_TIMER1_dummy+0x24>
 c1021c4:	0c104d20 	.word	0x0c104d20

0c1021c8 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void )
{
 c1021c8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1021cc:	e1a0c00d 	mov	ip, sp
 c1021d0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1021d4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy" );
 c1021d8:	e59f0010 	ldr	r0, [pc, #16]	; c1021f0 <isr_TIMER0_dummy+0x28>
 c1021dc:	eb00054c 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1021e0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1021e4:	e3a02075 	mov	r2, #117	; 0x75
 c1021e8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1021ec:	eafffffe 	b	c1021ec <isr_TIMER0_dummy+0x24>
 c1021f0:	0c104d50 	.word	0x0c104d50

0c1021f4 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void )
{
 c1021f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1021f8:	e1a0c00d 	mov	ip, sp
 c1021fc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102200:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy" );
 c102204:	e59f0010 	ldr	r0, [pc, #16]	; c10221c <isr_UERR01_dummy+0x28>
 c102208:	eb000541 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c10220c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102210:	e3a02075 	mov	r2, #117	; 0x75
 c102214:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102218:	eafffffe 	b	c102218 <isr_UERR01_dummy+0x24>
 c10221c:	0c104d80 	.word	0x0c104d80

0c102220 <isr_WDT_dummy>:
}

void isr_WDT_dummy( void )
{
 c102220:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102224:	e1a0c00d 	mov	ip, sp
 c102228:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10222c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy" );
 c102230:	e59f0010 	ldr	r0, [pc, #16]	; c102248 <isr_WDT_dummy+0x28>
 c102234:	eb000536 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102238:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10223c:	e3a02075 	mov	r2, #117	; 0x75
 c102240:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102244:	eafffffe 	b	c102244 <isr_WDT_dummy+0x24>
 c102248:	0c104db0 	.word	0x0c104db0

0c10224c <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void )
{
 c10224c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102250:	e1a0c00d 	mov	ip, sp
 c102254:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102258:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy" );
 c10225c:	e59f0010 	ldr	r0, [pc, #16]	; c102274 <isr_BDMA1_dummy+0x28>
 c102260:	eb00052b 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102264:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102268:	e3a02075 	mov	r2, #117	; 0x75
 c10226c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102270:	eafffffe 	b	c102270 <isr_BDMA1_dummy+0x24>
 c102274:	0c104ddc 	.word	0x0c104ddc

0c102278 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void )
{
 c102278:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10227c:	e1a0c00d 	mov	ip, sp
 c102280:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102284:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy" );
 c102288:	e59f0010 	ldr	r0, [pc, #16]	; c1022a0 <isr_BDMA0_dummy+0x28>
 c10228c:	eb000520 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102290:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102294:	e3a02075 	mov	r2, #117	; 0x75
 c102298:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10229c:	eafffffe 	b	c10229c <isr_BDMA0_dummy+0x24>
 c1022a0:	0c104e0c 	.word	0x0c104e0c

0c1022a4 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void )
{
 c1022a4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1022a8:	e1a0c00d 	mov	ip, sp
 c1022ac:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1022b0:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy" );
 c1022b4:	e59f0010 	ldr	r0, [pc, #16]	; c1022cc <isr_ZDMA1_dummy+0x28>
 c1022b8:	eb000515 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1022bc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1022c0:	e3a02075 	mov	r2, #117	; 0x75
 c1022c4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1022c8:	eafffffe 	b	c1022c8 <isr_ZDMA1_dummy+0x24>
 c1022cc:	0c104e3c 	.word	0x0c104e3c

0c1022d0 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void )
{
 c1022d0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1022d4:	e1a0c00d 	mov	ip, sp
 c1022d8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1022dc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy" );
 c1022e0:	e59f0010 	ldr	r0, [pc, #16]	; c1022f8 <isr_ZDMA0_dummy+0x28>
 c1022e4:	eb00050a 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1022e8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1022ec:	e3a02075 	mov	r2, #117	; 0x75
 c1022f0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1022f4:	eafffffe 	b	c1022f4 <isr_ZDMA0_dummy+0x24>
 c1022f8:	0c104e6c 	.word	0x0c104e6c

0c1022fc <isr_TICK_dummy>:
}

void isr_TICK_dummy( void )
{
 c1022fc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102300:	e1a0c00d 	mov	ip, sp
 c102304:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102308:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c10230c:	e59f0010 	ldr	r0, [pc, #16]	; c102324 <isr_TICK_dummy+0x28>
 c102310:	eb0004ff 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102314:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102318:	e3a02075 	mov	r2, #117	; 0x75
 c10231c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102320:	eafffffe 	b	c102320 <isr_TICK_dummy+0x24>
 c102324:	0c104e9c 	.word	0x0c104e9c

0c102328 <isr_PB_dummy>:
}

void isr_PB_dummy( void )
{
 c102328:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10232c:	e1a0c00d 	mov	ip, sp
 c102330:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102334:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PB_dummy" );
 c102338:	e59f0010 	ldr	r0, [pc, #16]	; c102350 <isr_PB_dummy+0x28>
 c10233c:	eb0004f4 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102340:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102344:	e3a02075 	mov	r2, #117	; 0x75
 c102348:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10234c:	eafffffe 	b	c10234c <isr_PB_dummy+0x24>
 c102350:	0c104ecc 	.word	0x0c104ecc

0c102354 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void )
{
 c102354:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102358:	e1a0c00d 	mov	ip, sp
 c10235c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102360:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy" );
 c102364:	e59f0010 	ldr	r0, [pc, #16]	; c10237c <isr_ETHERNET_dummy+0x28>
 c102368:	eb0004e9 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c10236c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102370:	e3a02075 	mov	r2, #117	; 0x75
 c102374:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c102378:	eafffffe 	b	c102378 <isr_ETHERNET_dummy+0x24>
 c10237c:	0c104ef8 	.word	0x0c104ef8

0c102380 <isr_TS_dummy>:
}

void isr_TS_dummy( void )
{
 c102380:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102384:	e1a0c00d 	mov	ip, sp
 c102388:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10238c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TS_dummy" );
 c102390:	e59f0010 	ldr	r0, [pc, #16]	; c1023a8 <isr_TS_dummy+0x28>
 c102394:	eb0004de 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c102398:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10239c:	e3a02075 	mov	r2, #117	; 0x75
 c1023a0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1023a4:	eafffffe 	b	c1023a4 <isr_TS_dummy+0x24>
 c1023a8:	0c104f2c 	.word	0x0c104f2c

0c1023ac <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void )
{
 c1023ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1023b0:	e1a0c00d 	mov	ip, sp
 c1023b4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1023b8:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy" );
 c1023bc:	e59f0010 	ldr	r0, [pc, #16]	; c1023d4 <isr_KEYPAD_dummy+0x28>
 c1023c0:	eb0004d3 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1023c4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1023c8:	e3a02075 	mov	r2, #117	; 0x75
 c1023cc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1023d0:	eafffffe 	b	c1023d0 <isr_KEYPAD_dummy+0x24>
 c1023d4:	0c104f58 	.word	0x0c104f58

0c1023d8 <isr_USB_dummy>:
}

void isr_USB_dummy( void )
{
 c1023d8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1023dc:	e1a0c00d 	mov	ip, sp
 c1023e0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1023e4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_USB_dummy" );
 c1023e8:	e59f0010 	ldr	r0, [pc, #16]	; c102400 <isr_USB_dummy+0x28>
 c1023ec:	eb0004c8 	bl	c103714 <uart0_puts>
    SEGS = 0x75;
 c1023f0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1023f4:	e3a02075 	mov	r2, #117	; 0x75
 c1023f8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1023fc:	eafffffe 	b	c1023fc <isr_USB_dummy+0x24>
 c102400:	0c104f88 	.word	0x0c104f88

0c102404 <show_sys_info>:
}

static void show_sys_info( void )
{
 c102404:	e1a0c00d 	mov	ip, sp
 c102408:	e92dd800 	push	{fp, ip, lr, pc}
 c10240c:	e24cb004 	sub	fp, ip, #4
    //
}
 c102410:	e24bd00c 	sub	sp, fp, #12
 c102414:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102418:	e12fff1e 	bx	lr

0c10241c <sleep>:

inline void sleep( void )
{
 c10241c:	e1a0c00d 	mov	ip, sp
 c102420:	e92dd800 	push	{fp, ip, lr, pc}
 c102424:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c102428:	e59f3018 	ldr	r3, [pc, #24]	; c102448 <sleep+0x2c>
 c10242c:	e59f2014 	ldr	r2, [pc, #20]	; c102448 <sleep+0x2c>
 c102430:	e5922000 	ldr	r2, [r2]
 c102434:	e3822004 	orr	r2, r2, #4
 c102438:	e5832000 	str	r2, [r3]
}
 c10243c:	e24bd00c 	sub	sp, fp, #12
 c102440:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102444:	e12fff1e 	bx	lr
 c102448:	01d80004 	.word	0x01d80004

0c10244c <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c10244c:	e1a0c00d 	mov	ip, sp
 c102450:	e92dd800 	push	{fp, ip, lr, pc}
 c102454:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0;
 c102458:	e59f30bc 	ldr	r3, [pc, #188]	; c10251c <timers_init+0xd0>
 c10245c:	e3a02000 	mov	r2, #0
 c102460:	e5832000 	str	r2, [r3]
    TCFG1 = 0;
 c102464:	e59f30b4 	ldr	r3, [pc, #180]	; c102520 <timers_init+0xd4>
 c102468:	e3a02000 	mov	r2, #0
 c10246c:	e5832000 	str	r2, [r3]

    TCNTB0 = 0;
 c102470:	e59f30ac 	ldr	r3, [pc, #172]	; c102524 <timers_init+0xd8>
 c102474:	e3a02000 	mov	r2, #0
 c102478:	e5832000 	str	r2, [r3]
    TCMPB0 = 0;
 c10247c:	e59f30a4 	ldr	r3, [pc, #164]	; c102528 <timers_init+0xdc>
 c102480:	e3a02000 	mov	r2, #0
 c102484:	e5832000 	str	r2, [r3]
    TCNTB1 = 0;
 c102488:	e59f309c 	ldr	r3, [pc, #156]	; c10252c <timers_init+0xe0>
 c10248c:	e3a02000 	mov	r2, #0
 c102490:	e5832000 	str	r2, [r3]
    TCMPB1 = 0;
 c102494:	e59f3094 	ldr	r3, [pc, #148]	; c102530 <timers_init+0xe4>
 c102498:	e3a02000 	mov	r2, #0
 c10249c:	e5832000 	str	r2, [r3]
    TCNTB2 = 0;
 c1024a0:	e59f308c 	ldr	r3, [pc, #140]	; c102534 <timers_init+0xe8>
 c1024a4:	e3a02000 	mov	r2, #0
 c1024a8:	e5832000 	str	r2, [r3]
    TCMPB2 = 0;
 c1024ac:	e59f3084 	ldr	r3, [pc, #132]	; c102538 <timers_init+0xec>
 c1024b0:	e3a02000 	mov	r2, #0
 c1024b4:	e5832000 	str	r2, [r3]
    TCNTB3 = 0;
 c1024b8:	e59f307c 	ldr	r3, [pc, #124]	; c10253c <timers_init+0xf0>
 c1024bc:	e3a02000 	mov	r2, #0
 c1024c0:	e5832000 	str	r2, [r3]
    TCMPB3 = 0;
 c1024c4:	e59f3074 	ldr	r3, [pc, #116]	; c102540 <timers_init+0xf4>
 c1024c8:	e3a02000 	mov	r2, #0
 c1024cc:	e5832000 	str	r2, [r3]
    TCNTB4 = 0;
 c1024d0:	e59f306c 	ldr	r3, [pc, #108]	; c102544 <timers_init+0xf8>
 c1024d4:	e3a02000 	mov	r2, #0
 c1024d8:	e5832000 	str	r2, [r3]
    TCMPB4 = 0;
 c1024dc:	e59f3064 	ldr	r3, [pc, #100]	; c102548 <timers_init+0xfc>
 c1024e0:	e3a02000 	mov	r2, #0
 c1024e4:	e5832000 	str	r2, [r3]
    TCNTB5 = 0;
 c1024e8:	e59f305c 	ldr	r3, [pc, #92]	; c10254c <timers_init+0x100>
 c1024ec:	e3a02000 	mov	r2, #0
 c1024f0:	e5832000 	str	r2, [r3]

    TCON = 0x222222;
 c1024f4:	e59f3054 	ldr	r3, [pc, #84]	; c102550 <timers_init+0x104>
 c1024f8:	e59f2054 	ldr	r2, [pc, #84]	; c102554 <timers_init+0x108>
 c1024fc:	e5832000 	str	r2, [r3]
    TCON = TIMER_ONE_SHOT;
 c102500:	e59f3048 	ldr	r3, [pc, #72]	; c102550 <timers_init+0x104>
 c102504:	e3a02000 	mov	r2, #0
 c102508:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c10250c:	eb000011 	bl	c102558 <sw_delay_init>
}
 c102510:	e24bd00c 	sub	sp, fp, #12
 c102514:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102518:	e12fff1e 	bx	lr
 c10251c:	01d50000 	.word	0x01d50000
 c102520:	01d50004 	.word	0x01d50004
 c102524:	01d5000c 	.word	0x01d5000c
 c102528:	01d50010 	.word	0x01d50010
 c10252c:	01d50018 	.word	0x01d50018
 c102530:	01d5001c 	.word	0x01d5001c
 c102534:	01d50024 	.word	0x01d50024
 c102538:	01d50028 	.word	0x01d50028
 c10253c:	01d50030 	.word	0x01d50030
 c102540:	01d50034 	.word	0x01d50034
 c102544:	01d5003c 	.word	0x01d5003c
 c102548:	01d50040 	.word	0x01d50040
 c10254c:	01d50048 	.word	0x01d50048
 c102550:	01d50008 	.word	0x01d50008
 c102554:	00222222 	.word	0x00222222

0c102558 <sw_delay_init>:

static void sw_delay_init( void )
{
 c102558:	e1a0c00d 	mov	ip, sp
 c10255c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c102560:	e24cb004 	sub	fp, ip, #4
 c102564:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c102568:	eb0000c7 	bl	c10288c <timer3_start>
    for( i=1000000; i; i--);
 c10256c:	e59f3088 	ldr	r3, [pc, #136]	; c1025fc <sw_delay_init+0xa4>
 c102570:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102574:	ea000002 	b	c102584 <sw_delay_init+0x2c>
 c102578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10257c:	e2433001 	sub	r3, r3, #1
 c102580:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102588:	e3530000 	cmp	r3, #0
 c10258c:	1afffff9 	bne	c102578 <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c102590:	eb0000e9 	bl	c10293c <timer3_stop>
 c102594:	e1a03000 	mov	r3, r0
 c102598:	e1a02003 	mov	r2, r3
 c10259c:	e1a03002 	mov	r3, r2
 c1025a0:	e3a04000 	mov	r4, #0
 c1025a4:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c1025a8:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c1025ac:	e2800b01 	add	r0, r0, #1024	; 0x400
 c1025b0:	e3a01002 	mov	r1, #2
 c1025b4:	e1a02003 	mov	r2, r3
 c1025b8:	e1a03004 	mov	r3, r4
 c1025bc:	eb000679 	bl	c103fa8 <__aeabi_uldivmod>
 c1025c0:	e1a03000 	mov	r3, r0
 c1025c4:	e1a04001 	mov	r4, r1
 c1025c8:	e1a02003 	mov	r2, r3
 c1025cc:	e59f302c 	ldr	r3, [pc, #44]	; c102600 <sw_delay_init+0xa8>
 c1025d0:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c1025d4:	e59f3024 	ldr	r3, [pc, #36]	; c102600 <sw_delay_init+0xa8>
 c1025d8:	e5932000 	ldr	r2, [r3]
 c1025dc:	e59f3020 	ldr	r3, [pc, #32]	; c102604 <sw_delay_init+0xac>
 c1025e0:	e0831392 	umull	r1, r3, r2, r3
 c1025e4:	e1a02323 	lsr	r2, r3, #6
 c1025e8:	e59f3018 	ldr	r3, [pc, #24]	; c102608 <sw_delay_init+0xb0>
 c1025ec:	e5832000 	str	r2, [r3]
};
 c1025f0:	e24bd010 	sub	sp, fp, #16
 c1025f4:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1025f8:	e12fff1e 	bx	lr
 c1025fc:	000f4240 	.word	0x000f4240
 c102600:	0c10f5c4 	.word	0x0c10f5c4
 c102604:	10624dd3 	.word	0x10624dd3
 c102608:	0c10f5c0 	.word	0x0c10f5c0

0c10260c <timer3_delay_ms>:

void timer3_delay_ms( uint16 n )
{
 c10260c:	e1a0c00d 	mov	ip, sp
 c102610:	e92dd800 	push	{fp, ip, lr, pc}
 c102614:	e24cb004 	sub	fp, ip, #4
 c102618:	e24dd008 	sub	sp, sp, #8
 c10261c:	e1a03000 	mov	r3, r0
 c102620:	e14b30be 	strh	r3, [fp, #-14]
    for( ; n; n-- )
 c102624:	ea000026 	b	c1026c4 <timer3_delay_ms+0xb8>
    {
		TCFG0 = (TCFG0 & ~(0XFF << 8)) | (31 << 8);
 c102628:	e59f30ac 	ldr	r3, [pc, #172]	; c1026dc <timer3_delay_ms+0xd0>
 c10262c:	e59f20a8 	ldr	r2, [pc, #168]	; c1026dc <timer3_delay_ms+0xd0>
 c102630:	e5922000 	ldr	r2, [r2]
 c102634:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102638:	e3822c1f 	orr	r2, r2, #7936	; 0x1f00
 c10263c:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0XF << 12)) | (0 << 12);
 c102640:	e59f3098 	ldr	r3, [pc, #152]	; c1026e0 <timer3_delay_ms+0xd4>
 c102644:	e59f2094 	ldr	r2, [pc, #148]	; c1026e0 <timer3_delay_ms+0xd4>
 c102648:	e5922000 	ldr	r2, [r2]
 c10264c:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102650:	e5832000 	str	r2, [r3]
		TCNTB3 = 1000;
 c102654:	e59f3088 	ldr	r3, [pc, #136]	; c1026e4 <timer3_delay_ms+0xd8>
 c102658:	e3a02ffa 	mov	r2, #1000	; 0x3e8
 c10265c:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0XF << 16)) | (1 << 17);
 c102660:	e59f3080 	ldr	r3, [pc, #128]	; c1026e8 <timer3_delay_ms+0xdc>
 c102664:	e59f207c 	ldr	r2, [pc, #124]	; c1026e8 <timer3_delay_ms+0xdc>
 c102668:	e5922000 	ldr	r2, [r2]
 c10266c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102670:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102674:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0XF << 16)) | (1 << 16);
 c102678:	e59f3068 	ldr	r3, [pc, #104]	; c1026e8 <timer3_delay_ms+0xdc>
 c10267c:	e59f2064 	ldr	r2, [pc, #100]	; c1026e8 <timer3_delay_ms+0xdc>
 c102680:	e5922000 	ldr	r2, [r2]
 c102684:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102688:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c10268c:	e5832000 	str	r2, [r3]
		while(!TCNTO3);
 c102690:	e1a00000 	nop			; (mov r0, r0)
 c102694:	e59f3050 	ldr	r3, [pc, #80]	; c1026ec <timer3_delay_ms+0xe0>
 c102698:	e5933000 	ldr	r3, [r3]
 c10269c:	e3530000 	cmp	r3, #0
 c1026a0:	0afffffb 	beq	c102694 <timer3_delay_ms+0x88>
		while(TCNTO3);
 c1026a4:	e1a00000 	nop			; (mov r0, r0)
 c1026a8:	e59f303c 	ldr	r3, [pc, #60]	; c1026ec <timer3_delay_ms+0xe0>
 c1026ac:	e5933000 	ldr	r3, [r3]
 c1026b0:	e3530000 	cmp	r3, #0
 c1026b4:	1afffffb 	bne	c1026a8 <timer3_delay_ms+0x9c>
    loop_ms = loop_s / 1000;
};

void timer3_delay_ms( uint16 n )
{
    for( ; n; n-- )
 c1026b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1026bc:	e2433001 	sub	r3, r3, #1
 c1026c0:	e14b30be 	strh	r3, [fp, #-14]
 c1026c4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1026c8:	e3530000 	cmp	r3, #0
 c1026cc:	1affffd5 	bne	c102628 <timer3_delay_ms+0x1c>
		TCON = (TCON & ~(0XF << 16)) | (1 << 17);
		TCON = (TCON & ~(0XF << 16)) | (1 << 16);
		while(!TCNTO3);
		while(TCNTO3);
    }
}
 c1026d0:	e24bd00c 	sub	sp, fp, #12
 c1026d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1026d8:	e12fff1e 	bx	lr
 c1026dc:	01d50000 	.word	0x01d50000
 c1026e0:	01d50004 	.word	0x01d50004
 c1026e4:	01d50030 	.word	0x01d50030
 c1026e8:	01d50008 	.word	0x01d50008
 c1026ec:	01d50038 	.word	0x01d50038

0c1026f0 <sw_delay_ms>:

void sw_delay_ms( uint16 n )
{
 c1026f0:	e1a0c00d 	mov	ip, sp
 c1026f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1026f8:	e24cb004 	sub	fp, ip, #4
 c1026fc:	e24dd010 	sub	sp, sp, #16
 c102700:	e1a03000 	mov	r3, r0
 c102704:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c102708:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10270c:	e59f2030 	ldr	r2, [pc, #48]	; c102744 <sw_delay_ms+0x54>
 c102710:	e5922000 	ldr	r2, [r2]
 c102714:	e0030392 	mul	r3, r2, r3
 c102718:	e50b3010 	str	r3, [fp, #-16]
 c10271c:	ea000002 	b	c10272c <sw_delay_ms+0x3c>
 c102720:	e51b3010 	ldr	r3, [fp, #-16]
 c102724:	e2433001 	sub	r3, r3, #1
 c102728:	e50b3010 	str	r3, [fp, #-16]
 c10272c:	e51b3010 	ldr	r3, [fp, #-16]
 c102730:	e3530000 	cmp	r3, #0
 c102734:	1afffff9 	bne	c102720 <sw_delay_ms+0x30>
}
 c102738:	e24bd00c 	sub	sp, fp, #12
 c10273c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102740:	e12fff1e 	bx	lr
 c102744:	0c10f5c0 	.word	0x0c10f5c0

0c102748 <timer3_delay_s>:

void timer3_delay_s( uint16 n )
{
 c102748:	e1a0c00d 	mov	ip, sp
 c10274c:	e92dd800 	push	{fp, ip, lr, pc}
 c102750:	e24cb004 	sub	fp, ip, #4
 c102754:	e24dd008 	sub	sp, sp, #8
 c102758:	e1a03000 	mov	r3, r0
 c10275c:	e14b30be 	strh	r3, [fp, #-14]
	for(;n;n--){
 c102760:	ea000027 	b	c102804 <timer3_delay_s+0xbc>
		TCFG0 = (TCFG0 & ~(0XFF << 8)) | (63 << 8);
 c102764:	e59f30b0 	ldr	r3, [pc, #176]	; c10281c <timer3_delay_s+0xd4>
 c102768:	e59f20ac 	ldr	r2, [pc, #172]	; c10281c <timer3_delay_s+0xd4>
 c10276c:	e5922000 	ldr	r2, [r2]
 c102770:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102774:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c102778:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0XF << 12)) | (4 << 12);
 c10277c:	e59f309c 	ldr	r3, [pc, #156]	; c102820 <timer3_delay_s+0xd8>
 c102780:	e59f2098 	ldr	r2, [pc, #152]	; c102820 <timer3_delay_s+0xd8>
 c102784:	e5922000 	ldr	r2, [r2]
 c102788:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10278c:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c102790:	e5832000 	str	r2, [r3]
		TCNTB3 = 31250;
 c102794:	e59f3088 	ldr	r3, [pc, #136]	; c102824 <timer3_delay_s+0xdc>
 c102798:	e59f2088 	ldr	r2, [pc, #136]	; c102828 <timer3_delay_s+0xe0>
 c10279c:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0XF << 16)) | (1 << 17);
 c1027a0:	e59f3084 	ldr	r3, [pc, #132]	; c10282c <timer3_delay_s+0xe4>
 c1027a4:	e59f2080 	ldr	r2, [pc, #128]	; c10282c <timer3_delay_s+0xe4>
 c1027a8:	e5922000 	ldr	r2, [r2]
 c1027ac:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1027b0:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1027b4:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0XF << 16)) | (1 << 16);
 c1027b8:	e59f306c 	ldr	r3, [pc, #108]	; c10282c <timer3_delay_s+0xe4>
 c1027bc:	e59f2068 	ldr	r2, [pc, #104]	; c10282c <timer3_delay_s+0xe4>
 c1027c0:	e5922000 	ldr	r2, [r2]
 c1027c4:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1027c8:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1027cc:	e5832000 	str	r2, [r3]
		while(!TCNTO3);
 c1027d0:	e1a00000 	nop			; (mov r0, r0)
 c1027d4:	e59f3054 	ldr	r3, [pc, #84]	; c102830 <timer3_delay_s+0xe8>
 c1027d8:	e5933000 	ldr	r3, [r3]
 c1027dc:	e3530000 	cmp	r3, #0
 c1027e0:	0afffffb 	beq	c1027d4 <timer3_delay_s+0x8c>
		while(TCNTO3);
 c1027e4:	e1a00000 	nop			; (mov r0, r0)
 c1027e8:	e59f3040 	ldr	r3, [pc, #64]	; c102830 <timer3_delay_s+0xe8>
 c1027ec:	e5933000 	ldr	r3, [r3]
 c1027f0:	e3530000 	cmp	r3, #0
 c1027f4:	1afffffb 	bne	c1027e8 <timer3_delay_s+0xa0>
    for( i=loop_ms*n; i; i-- );
}

void timer3_delay_s( uint16 n )
{
	for(;n;n--){
 c1027f8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1027fc:	e2433001 	sub	r3, r3, #1
 c102800:	e14b30be 	strh	r3, [fp, #-14]
 c102804:	e15b30be 	ldrh	r3, [fp, #-14]
 c102808:	e3530000 	cmp	r3, #0
 c10280c:	1affffd4 	bne	c102764 <timer3_delay_s+0x1c>
		TCON = (TCON & ~(0XF << 16)) | (1 << 17);
		TCON = (TCON & ~(0XF << 16)) | (1 << 16);
		while(!TCNTO3);
		while(TCNTO3);
	}
}
 c102810:	e24bd00c 	sub	sp, fp, #12
 c102814:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102818:	e12fff1e 	bx	lr
 c10281c:	01d50000 	.word	0x01d50000
 c102820:	01d50004 	.word	0x01d50004
 c102824:	01d50030 	.word	0x01d50030
 c102828:	00007a12 	.word	0x00007a12
 c10282c:	01d50008 	.word	0x01d50008
 c102830:	01d50038 	.word	0x01d50038

0c102834 <sw_delay_s>:

void sw_delay_s( uint16 n )
{
 c102834:	e1a0c00d 	mov	ip, sp
 c102838:	e92dd800 	push	{fp, ip, lr, pc}
 c10283c:	e24cb004 	sub	fp, ip, #4
 c102840:	e24dd010 	sub	sp, sp, #16
 c102844:	e1a03000 	mov	r3, r0
 c102848:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c10284c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102850:	e59f2030 	ldr	r2, [pc, #48]	; c102888 <sw_delay_s+0x54>
 c102854:	e5922000 	ldr	r2, [r2]
 c102858:	e0030392 	mul	r3, r2, r3
 c10285c:	e50b3010 	str	r3, [fp, #-16]
 c102860:	ea000002 	b	c102870 <sw_delay_s+0x3c>
 c102864:	e51b3010 	ldr	r3, [fp, #-16]
 c102868:	e2433001 	sub	r3, r3, #1
 c10286c:	e50b3010 	str	r3, [fp, #-16]
 c102870:	e51b3010 	ldr	r3, [fp, #-16]
 c102874:	e3530000 	cmp	r3, #0
 c102878:	1afffff9 	bne	c102864 <sw_delay_s+0x30>
}
 c10287c:	e24bd00c 	sub	sp, fp, #12
 c102880:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102884:	e12fff1e 	bx	lr
 c102888:	0c10f5c4 	.word	0x0c10f5c4

0c10288c <timer3_start>:

void timer3_start( void ) 
{
 c10288c:	e1a0c00d 	mov	ip, sp
 c102890:	e92dd800 	push	{fp, ip, lr, pc}
 c102894:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c102898:	e59f3084 	ldr	r3, [pc, #132]	; c102924 <timer3_start+0x98>
 c10289c:	e59f2080 	ldr	r2, [pc, #128]	; c102924 <timer3_start+0x98>
 c1028a0:	e5922000 	ldr	r2, [r2]
 c1028a4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1028a8:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c1028ac:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1028b0:	e59f3070 	ldr	r3, [pc, #112]	; c102928 <timer3_start+0x9c>
 c1028b4:	e59f206c 	ldr	r2, [pc, #108]	; c102928 <timer3_start+0x9c>
 c1028b8:	e5922000 	ldr	r2, [r2]
 c1028bc:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1028c0:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1028c4:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; 
 c1028c8:	e59f305c 	ldr	r3, [pc, #92]	; c10292c <timer3_start+0xa0>
 c1028cc:	e59f205c 	ldr	r2, [pc, #92]	; c102930 <timer3_start+0xa4>
 c1028d0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1028d4:	e59f3058 	ldr	r3, [pc, #88]	; c102934 <timer3_start+0xa8>
 c1028d8:	e59f2054 	ldr	r2, [pc, #84]	; c102934 <timer3_start+0xa8>
 c1028dc:	e5922000 	ldr	r2, [r2]
 c1028e0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1028e4:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1028e8:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1028ec:	e59f3040 	ldr	r3, [pc, #64]	; c102934 <timer3_start+0xa8>
 c1028f0:	e59f203c 	ldr	r2, [pc, #60]	; c102934 <timer3_start+0xa8>
 c1028f4:	e5922000 	ldr	r2, [r2]
 c1028f8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1028fc:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102900:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c102904:	e1a00000 	nop			; (mov r0, r0)
 c102908:	e59f3028 	ldr	r3, [pc, #40]	; c102938 <timer3_start+0xac>
 c10290c:	e5933000 	ldr	r3, [r3]
 c102910:	e3530000 	cmp	r3, #0
 c102914:	0afffffb 	beq	c102908 <timer3_start+0x7c>
}
 c102918:	e24bd00c 	sub	sp, fp, #12
 c10291c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102920:	e12fff1e 	bx	lr
 c102924:	01d50000 	.word	0x01d50000
 c102928:	01d50004 	.word	0x01d50004
 c10292c:	01d50030 	.word	0x01d50030
 c102930:	0000ffff 	.word	0x0000ffff
 c102934:	01d50008 	.word	0x01d50008
 c102938:	01d50038 	.word	0x01d50038

0c10293c <timer3_stop>:

uint16 timer3_stop( void )
{
 c10293c:	e1a0c00d 	mov	ip, sp
 c102940:	e92dd800 	push	{fp, ip, lr, pc}
 c102944:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c102948:	e59f3038 	ldr	r3, [pc, #56]	; c102988 <timer3_stop+0x4c>
 c10294c:	e59f2034 	ldr	r2, [pc, #52]	; c102988 <timer3_stop+0x4c>
 c102950:	e5922000 	ldr	r2, [r2]
 c102954:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c102958:	e5832000 	str	r2, [r3]
    return (0xffff - TCNTO3);
 c10295c:	e59f3028 	ldr	r3, [pc, #40]	; c10298c <timer3_stop+0x50>
 c102960:	e5933000 	ldr	r3, [r3]
 c102964:	e1a03803 	lsl	r3, r3, #16
 c102968:	e1a03823 	lsr	r3, r3, #16
 c10296c:	e1e03003 	mvn	r3, r3
 c102970:	e1a03803 	lsl	r3, r3, #16
 c102974:	e1a03823 	lsr	r3, r3, #16
}
 c102978:	e1a00003 	mov	r0, r3
 c10297c:	e24bd00c 	sub	sp, fp, #12
 c102980:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102984:	e12fff1e 	bx	lr
 c102988:	01d50008 	.word	0x01d50008
 c10298c:	01d50038 	.word	0x01d50038

0c102990 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c102990:	e1a0c00d 	mov	ip, sp
 c102994:	e92dd800 	push	{fp, ip, lr, pc}
 c102998:	e24cb004 	sub	fp, ip, #4
 c10299c:	e24dd008 	sub	sp, sp, #8
 c1029a0:	e1a03000 	mov	r3, r0
 c1029a4:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);          
 c1029a8:	e59f3084 	ldr	r3, [pc, #132]	; c102a34 <timer3_start_timeout+0xa4>
 c1029ac:	e59f2080 	ldr	r2, [pc, #128]	; c102a34 <timer3_start_timeout+0xa4>
 c1029b0:	e5922000 	ldr	r2, [r2]
 c1029b4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1029b8:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c1029bc:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1029c0:	e59f3070 	ldr	r3, [pc, #112]	; c102a38 <timer3_start_timeout+0xa8>
 c1029c4:	e59f206c 	ldr	r2, [pc, #108]	; c102a38 <timer3_start_timeout+0xa8>
 c1029c8:	e5922000 	ldr	r2, [r2]
 c1029cc:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1029d0:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1029d4:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; 
 c1029d8:	e59f305c 	ldr	r3, [pc, #92]	; c102a3c <timer3_start_timeout+0xac>
 c1029dc:	e15b20be 	ldrh	r2, [fp, #-14]
 c1029e0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1029e4:	e59f3054 	ldr	r3, [pc, #84]	; c102a40 <timer3_start_timeout+0xb0>
 c1029e8:	e59f2050 	ldr	r2, [pc, #80]	; c102a40 <timer3_start_timeout+0xb0>
 c1029ec:	e5922000 	ldr	r2, [r2]
 c1029f0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1029f4:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1029f8:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1029fc:	e59f303c 	ldr	r3, [pc, #60]	; c102a40 <timer3_start_timeout+0xb0>
 c102a00:	e59f2038 	ldr	r2, [pc, #56]	; c102a40 <timer3_start_timeout+0xb0>
 c102a04:	e5922000 	ldr	r2, [r2]
 c102a08:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102a0c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102a10:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c102a14:	e1a00000 	nop			; (mov r0, r0)
 c102a18:	e59f3024 	ldr	r3, [pc, #36]	; c102a44 <timer3_start_timeout+0xb4>
 c102a1c:	e5933000 	ldr	r3, [r3]
 c102a20:	e3530000 	cmp	r3, #0
 c102a24:	0afffffb 	beq	c102a18 <timer3_start_timeout+0x88>
}
 c102a28:	e24bd00c 	sub	sp, fp, #12
 c102a2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102a30:	e12fff1e 	bx	lr
 c102a34:	01d50000 	.word	0x01d50000
 c102a38:	01d50004 	.word	0x01d50004
 c102a3c:	01d50030 	.word	0x01d50030
 c102a40:	01d50008 	.word	0x01d50008
 c102a44:	01d50038 	.word	0x01d50038

0c102a48 <timer3_timeout>:

uint16 timer3_timeout( )
{
 c102a48:	e1a0c00d 	mov	ip, sp
 c102a4c:	e92dd800 	push	{fp, ip, lr, pc}
 c102a50:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c102a54:	e59f3024 	ldr	r3, [pc, #36]	; c102a80 <timer3_timeout+0x38>
 c102a58:	e5933000 	ldr	r3, [r3]
 c102a5c:	e3530000 	cmp	r3, #0
 c102a60:	13a03000 	movne	r3, #0
 c102a64:	03a03001 	moveq	r3, #1
 c102a68:	e1a03803 	lsl	r3, r3, #16
 c102a6c:	e1a03823 	lsr	r3, r3, #16
}    
 c102a70:	e1a00003 	mov	r0, r3
 c102a74:	e24bd00c 	sub	sp, fp, #12
 c102a78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102a7c:	e12fff1e 	bx	lr
 c102a80:	01d50038 	.word	0x01d50038

0c102a84 <timer0_open_tick>:

void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c102a84:	e1a0c00d 	mov	ip, sp
 c102a88:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c102a8c:	e24cb004 	sub	fp, ip, #4
 c102a90:	e24dd00c 	sub	sp, sp, #12
 c102a94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c102a98:	e1a03001 	mov	r3, r1
 c102a9c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	pISR_TIMER0 = (uint32)isr;
 c102aa0:	e59f31fc 	ldr	r3, [pc, #508]	; c102ca4 <timer0_open_tick+0x220>
 c102aa4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102aa8:	e5832000 	str	r2, [r3]
	I_ISPC |= BIT_TIMER0;
 c102aac:	e59f31f4 	ldr	r3, [pc, #500]	; c102ca8 <timer0_open_tick+0x224>
 c102ab0:	e59f21f0 	ldr	r2, [pc, #496]	; c102ca8 <timer0_open_tick+0x224>
 c102ab4:	e5922000 	ldr	r2, [r2]
 c102ab8:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c102abc:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_TIMER0);
 c102ac0:	e59f21e4 	ldr	r2, [pc, #484]	; c102cac <timer0_open_tick+0x228>
 c102ac4:	e59f31e0 	ldr	r3, [pc, #480]	; c102cac <timer0_open_tick+0x228>
 c102ac8:	e5933000 	ldr	r3, [r3]
 c102acc:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c102ad0:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c102ad4:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) {
 c102ad8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102adc:	e3530000 	cmp	r3, #0
 c102ae0:	0a000018 	beq	c102b48 <timer0_open_tick+0xc4>
 c102ae4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102ae8:	e353000a 	cmp	r3, #10
 c102aec:	8a000015 	bhi	c102b48 <timer0_open_tick+0xc4>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c102af0:	e59f31b8 	ldr	r3, [pc, #440]	; c102cb0 <timer0_open_tick+0x22c>
 c102af4:	e59f21b4 	ldr	r2, [pc, #436]	; c102cb0 <timer0_open_tick+0x22c>
 c102af8:	e5922000 	ldr	r2, [r2]
 c102afc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102b00:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c102b04:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c102b08:	e59f31a4 	ldr	r3, [pc, #420]	; c102cb4 <timer0_open_tick+0x230>
 c102b0c:	e59f21a0 	ldr	r2, [pc, #416]	; c102cb4 <timer0_open_tick+0x230>
 c102b10:	e5922000 	ldr	r2, [r2]
 c102b14:	e3c2200f 	bic	r2, r2, #15
 c102b18:	e3822002 	orr	r2, r2, #2
 c102b1c:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c102b20:	e59f4190 	ldr	r4, [pc, #400]	; c102cb8 <timer0_open_tick+0x234>
 c102b24:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102b28:	e59f018c 	ldr	r0, [pc, #396]	; c102cbc <timer0_open_tick+0x238>
 c102b2c:	e1a01003 	mov	r1, r3
 c102b30:	eb000484 	bl	c103d48 <__aeabi_uidiv>
 c102b34:	e1a03000 	mov	r3, r0
 c102b38:	e1a03803 	lsl	r3, r3, #16
 c102b3c:	e1a03823 	lsr	r3, r3, #16
 c102b40:	e5843000 	str	r3, [r4]
 c102b44:	ea000047 	b	c102c68 <timer0_open_tick+0x1e4>
    } else if( tps > 10 && tps <= 100 ) {
 c102b48:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102b4c:	e353000a 	cmp	r3, #10
 c102b50:	9a000016 	bls	c102bb0 <timer0_open_tick+0x12c>
 c102b54:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102b58:	e3530064 	cmp	r3, #100	; 0x64
 c102b5c:	8a000013 	bhi	c102bb0 <timer0_open_tick+0x12c>
		TCFG0 = (TCFG0 & ~(0xff << 0))  | (4 << 0);
 c102b60:	e59f3148 	ldr	r3, [pc, #328]	; c102cb0 <timer0_open_tick+0x22c>
 c102b64:	e59f2144 	ldr	r2, [pc, #324]	; c102cb0 <timer0_open_tick+0x22c>
 c102b68:	e5922000 	ldr	r2, [r2]
 c102b6c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102b70:	e3822004 	orr	r2, r2, #4
 c102b74:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c102b78:	e59f3134 	ldr	r3, [pc, #308]	; c102cb4 <timer0_open_tick+0x230>
 c102b7c:	e59f2130 	ldr	r2, [pc, #304]	; c102cb4 <timer0_open_tick+0x230>
 c102b80:	e5922000 	ldr	r2, [r2]
 c102b84:	e3c2200f 	bic	r2, r2, #15
 c102b88:	e3822004 	orr	r2, r2, #4
 c102b8c:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c102b90:	e59f4120 	ldr	r4, [pc, #288]	; c102cb8 <timer0_open_tick+0x234>
 c102b94:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102b98:	e59f0120 	ldr	r0, [pc, #288]	; c102cc0 <timer0_open_tick+0x23c>
 c102b9c:	e1a01003 	mov	r1, r3
 c102ba0:	eb000468 	bl	c103d48 <__aeabi_uidiv>
 c102ba4:	e1a03000 	mov	r3, r0
 c102ba8:	e5843000 	str	r3, [r4]
 c102bac:	ea00002d 	b	c102c68 <timer0_open_tick+0x1e4>
    } else if( tps > 100 && tps <= 1000 ) {
 c102bb0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102bb4:	e3530064 	cmp	r3, #100	; 0x64
 c102bb8:	9a000016 	bls	c102c18 <timer0_open_tick+0x194>
 c102bbc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102bc0:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c102bc4:	8a000013 	bhi	c102c18 <timer0_open_tick+0x194>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (1 << 0);
 c102bc8:	e59f30e0 	ldr	r3, [pc, #224]	; c102cb0 <timer0_open_tick+0x22c>
 c102bcc:	e59f20dc 	ldr	r2, [pc, #220]	; c102cb0 <timer0_open_tick+0x22c>
 c102bd0:	e5922000 	ldr	r2, [r2]
 c102bd4:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102bd8:	e3822001 	orr	r2, r2, #1
 c102bdc:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c102be0:	e59f30cc 	ldr	r3, [pc, #204]	; c102cb4 <timer0_open_tick+0x230>
 c102be4:	e59f20c8 	ldr	r2, [pc, #200]	; c102cb4 <timer0_open_tick+0x230>
 c102be8:	e5922000 	ldr	r2, [r2]
 c102bec:	e3c2200f 	bic	r2, r2, #15
 c102bf0:	e3822002 	orr	r2, r2, #2
 c102bf4:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c102bf8:	e59f40b8 	ldr	r4, [pc, #184]	; c102cb8 <timer0_open_tick+0x234>
 c102bfc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102c00:	e59f00bc 	ldr	r0, [pc, #188]	; c102cc4 <timer0_open_tick+0x240>
 c102c04:	e1a01003 	mov	r1, r3
 c102c08:	eb00044e 	bl	c103d48 <__aeabi_uidiv>
 c102c0c:	e1a03000 	mov	r3, r0
 c102c10:	e5843000 	str	r3, [r4]
 c102c14:	ea000013 	b	c102c68 <timer0_open_tick+0x1e4>
    } else if ( tps > 1000 ) {
 c102c18:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102c1c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c102c20:	9a000010 	bls	c102c68 <timer0_open_tick+0x1e4>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (0 << 0);
 c102c24:	e59f3084 	ldr	r3, [pc, #132]	; c102cb0 <timer0_open_tick+0x22c>
 c102c28:	e59f2080 	ldr	r2, [pc, #128]	; c102cb0 <timer0_open_tick+0x22c>
 c102c2c:	e5922000 	ldr	r2, [r2]
 c102c30:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102c34:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (0 << 0);
 c102c38:	e59f3074 	ldr	r3, [pc, #116]	; c102cb4 <timer0_open_tick+0x230>
 c102c3c:	e59f2070 	ldr	r2, [pc, #112]	; c102cb4 <timer0_open_tick+0x230>
 c102c40:	e5922000 	ldr	r2, [r2]
 c102c44:	e3c2200f 	bic	r2, r2, #15
 c102c48:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c102c4c:	e59f4064 	ldr	r4, [pc, #100]	; c102cb8 <timer0_open_tick+0x234>
 c102c50:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102c54:	e59f006c 	ldr	r0, [pc, #108]	; c102cc8 <timer0_open_tick+0x244>
 c102c58:	e1a01003 	mov	r1, r3
 c102c5c:	eb000439 	bl	c103d48 <__aeabi_uidiv>
 c102c60:	e1a03000 	mov	r3, r0
 c102c64:	e5843000 	str	r3, [r4]
    }

	TCON = (TCON & ~(0x7 << 0)) | (1 << 1) | (1<<3);
 c102c68:	e59f305c 	ldr	r3, [pc, #92]	; c102ccc <timer0_open_tick+0x248>
 c102c6c:	e59f2058 	ldr	r2, [pc, #88]	; c102ccc <timer0_open_tick+0x248>
 c102c70:	e5922000 	ldr	r2, [r2]
 c102c74:	e3c2200f 	bic	r2, r2, #15
 c102c78:	e382200a 	orr	r2, r2, #10
 c102c7c:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0x7 << 0)) | (1 << 0) | (1<<3);
 c102c80:	e59f3044 	ldr	r3, [pc, #68]	; c102ccc <timer0_open_tick+0x248>
 c102c84:	e59f2040 	ldr	r2, [pc, #64]	; c102ccc <timer0_open_tick+0x248>
 c102c88:	e5922000 	ldr	r2, [r2]
 c102c8c:	e3c2200f 	bic	r2, r2, #15
 c102c90:	e3822009 	orr	r2, r2, #9
 c102c94:	e5832000 	str	r2, [r3]
}
 c102c98:	e24bd010 	sub	sp, fp, #16
 c102c9c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102ca0:	e12fff1e 	bx	lr
 c102ca4:	0c7fff54 	.word	0x0c7fff54
 c102ca8:	01e00024 	.word	0x01e00024
 c102cac:	01e0000c 	.word	0x01e0000c
 c102cb0:	01d50000 	.word	0x01d50000
 c102cb4:	01d50004 	.word	0x01d50004
 c102cb8:	01d5000c 	.word	0x01d5000c
 c102cbc:	00009c40 	.word	0x00009c40
 c102cc0:	00061a80 	.word	0x00061a80
 c102cc4:	003d0900 	.word	0x003d0900
 c102cc8:	01e84800 	.word	0x01e84800
 c102ccc:	01d50008 	.word	0x01d50008

0c102cd0 <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c102cd0:	e1a0c00d 	mov	ip, sp
 c102cd4:	e92dd800 	push	{fp, ip, lr, pc}
 c102cd8:	e24cb004 	sub	fp, ip, #4
 c102cdc:	e24dd008 	sub	sp, sp, #8
 c102ce0:	e50b0010 	str	r0, [fp, #-16]
 c102ce4:	e1a03002 	mov	r3, r2
 c102ce8:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c102cec:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    pISR_TIMER0 = (uint32) isr;
 c102cf0:	e59f30b8 	ldr	r3, [pc, #184]	; c102db0 <timer0_open_ms+0xe0>
 c102cf4:	e51b2010 	ldr	r2, [fp, #-16]
 c102cf8:	e5832000 	str	r2, [r3]
    I_ISPC     |= BIT_TIMER0;
 c102cfc:	e59f30b0 	ldr	r3, [pc, #176]	; c102db4 <timer0_open_ms+0xe4>
 c102d00:	e59f20ac 	ldr	r2, [pc, #172]	; c102db4 <timer0_open_ms+0xe4>
 c102d04:	e5922000 	ldr	r2, [r2]
 c102d08:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c102d0c:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c102d10:	e59f20a0 	ldr	r2, [pc, #160]	; c102db8 <timer0_open_ms+0xe8>
 c102d14:	e59f309c 	ldr	r3, [pc, #156]	; c102db8 <timer0_open_ms+0xe8>
 c102d18:	e5933000 	ldr	r3, [r3]
 c102d1c:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c102d20:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c102d24:	e5823000 	str	r3, [r2]

    TCFG0 = (TCFG0 & ~(0XFF << 0)) | (199 << 0);
 c102d28:	e59f308c 	ldr	r3, [pc, #140]	; c102dbc <timer0_open_ms+0xec>
 c102d2c:	e59f2088 	ldr	r2, [pc, #136]	; c102dbc <timer0_open_ms+0xec>
 c102d30:	e5922000 	ldr	r2, [r2]
 c102d34:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c102d38:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c102d3c:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0XF << 0)) | (4 << 0);
 c102d40:	e59f3078 	ldr	r3, [pc, #120]	; c102dc0 <timer0_open_ms+0xf0>
 c102d44:	e59f2074 	ldr	r2, [pc, #116]	; c102dc0 <timer0_open_ms+0xf0>
 c102d48:	e5922000 	ldr	r2, [r2]
 c102d4c:	e3c2200f 	bic	r2, r2, #15
 c102d50:	e3822004 	orr	r2, r2, #4
 c102d54:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c102d58:	e59f1064 	ldr	r1, [pc, #100]	; c102dc4 <timer0_open_ms+0xf4>
 c102d5c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c102d60:	e1a03002 	mov	r3, r2
 c102d64:	e1a03103 	lsl	r3, r3, #2
 c102d68:	e0833002 	add	r3, r3, r2
 c102d6c:	e1a03083 	lsl	r3, r3, #1
 c102d70:	e5813000 	str	r3, [r1]

	TCON = (TCON & ~(0XF << 0)) | (1 << 1);
 c102d74:	e59f304c 	ldr	r3, [pc, #76]	; c102dc8 <timer0_open_ms+0xf8>
 c102d78:	e59f2048 	ldr	r2, [pc, #72]	; c102dc8 <timer0_open_ms+0xf8>
 c102d7c:	e5922000 	ldr	r2, [r2]
 c102d80:	e3c2200f 	bic	r2, r2, #15
 c102d84:	e3822002 	orr	r2, r2, #2
 c102d88:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0XF << 0)) | (1 << 0);
 c102d8c:	e59f3034 	ldr	r3, [pc, #52]	; c102dc8 <timer0_open_ms+0xf8>
 c102d90:	e59f2030 	ldr	r2, [pc, #48]	; c102dc8 <timer0_open_ms+0xf8>
 c102d94:	e5922000 	ldr	r2, [r2]
 c102d98:	e3c2200f 	bic	r2, r2, #15
 c102d9c:	e3822001 	orr	r2, r2, #1
 c102da0:	e5832000 	str	r2, [r3]
}
 c102da4:	e24bd00c 	sub	sp, fp, #12
 c102da8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102dac:	e12fff1e 	bx	lr
 c102db0:	0c7fff54 	.word	0x0c7fff54
 c102db4:	01e00024 	.word	0x01e00024
 c102db8:	01e0000c 	.word	0x01e0000c
 c102dbc:	01d50000 	.word	0x01d50000
 c102dc0:	01d50004 	.word	0x01d50004
 c102dc4:	01d5000c 	.word	0x01d5000c
 c102dc8:	01d50008 	.word	0x01d50008

0c102dcc <timer0_close>:

void timer0_close( void )
{
 c102dcc:	e1a0c00d 	mov	ip, sp
 c102dd0:	e92dd800 	push	{fp, ip, lr, pc}
 c102dd4:	e24cb004 	sub	fp, ip, #4
	TCNTB0 = 0;
 c102dd8:	e59f306c 	ldr	r3, [pc, #108]	; c102e4c <timer0_close+0x80>
 c102ddc:	e3a02000 	mov	r2, #0
 c102de0:	e5832000 	str	r2, [r3]
	TCMPB0 = 0;
 c102de4:	e59f3064 	ldr	r3, [pc, #100]	; c102e50 <timer0_close+0x84>
 c102de8:	e3a02000 	mov	r2, #0
 c102dec:	e5832000 	str	r2, [r3]

	TCON = (TCON & ~(0XF << 0)) | (1 << 1);
 c102df0:	e59f305c 	ldr	r3, [pc, #92]	; c102e54 <timer0_close+0x88>
 c102df4:	e59f2058 	ldr	r2, [pc, #88]	; c102e54 <timer0_close+0x88>
 c102df8:	e5922000 	ldr	r2, [r2]
 c102dfc:	e3c2200f 	bic	r2, r2, #15
 c102e00:	e3822002 	orr	r2, r2, #2
 c102e04:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0XF << 0)) | (1 << 0);
 c102e08:	e59f3044 	ldr	r3, [pc, #68]	; c102e54 <timer0_close+0x88>
 c102e0c:	e59f2040 	ldr	r2, [pc, #64]	; c102e54 <timer0_close+0x88>
 c102e10:	e5922000 	ldr	r2, [r2]
 c102e14:	e3c2200f 	bic	r2, r2, #15
 c102e18:	e3822001 	orr	r2, r2, #1
 c102e1c:	e5832000 	str	r2, [r3]

	INTMSK |= BIT_TIMER0;
 c102e20:	e59f3030 	ldr	r3, [pc, #48]	; c102e58 <timer0_close+0x8c>
 c102e24:	e59f202c 	ldr	r2, [pc, #44]	; c102e58 <timer0_close+0x8c>
 c102e28:	e5922000 	ldr	r2, [r2]
 c102e2c:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c102e30:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c102e34:	e59f3020 	ldr	r3, [pc, #32]	; c102e5c <timer0_close+0x90>
 c102e38:	e59f2020 	ldr	r2, [pc, #32]	; c102e60 <timer0_close+0x94>
 c102e3c:	e5832000 	str	r2, [r3]
}
 c102e40:	e24bd00c 	sub	sp, fp, #12
 c102e44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e48:	e12fff1e 	bx	lr
 c102e4c:	01d5000c 	.word	0x01d5000c
 c102e50:	01d50010 	.word	0x01d50010
 c102e54:	01d50008 	.word	0x01d50008
 c102e58:	01e0000c 	.word	0x01e0000c
 c102e5c:	0c7fff54 	.word	0x0c7fff54
 c102e60:	0c1021c8 	.word	0x0c1021c8

0c102e64 <ts_init>:
static void ts_scan( uint16 *Vx, uint16 *Vy );
static void ts_calibrate( void );
static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );

void ts_init( void )
{
 c102e64:	e1a0c00d 	mov	ip, sp
 c102e68:	e92dd800 	push	{fp, ip, lr, pc}
 c102e6c:	e24cb004 	sub	fp, ip, #4
    lcd_init();
 c102e70:	ebfff714 	bl	c100ac8 <lcd_init>
    adc_init();
 c102e74:	eb000318 	bl	c103adc <adc_init>
    PDATE = (0xB << 4);
 c102e78:	e59f301c 	ldr	r3, [pc, #28]	; c102e9c <ts_init+0x38>
 c102e7c:	e3a020b0 	mov	r2, #176	; 0xb0
 c102e80:	e5832000 	str	r2, [r3]
    ts_on();
 c102e84:	eb000005 	bl	c102ea0 <ts_on>
    ts_calibrate();
 c102e88:	eb000023 	bl	c102f1c <ts_calibrate>
    ts_off();
 c102e8c:	eb00000e 	bl	c102ecc <ts_off>
}
 c102e90:	e24bd00c 	sub	sp, fp, #12
 c102e94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e98:	e12fff1e 	bx	lr
 c102e9c:	01d2002c 	.word	0x01d2002c

0c102ea0 <ts_on>:

void ts_on( void )
{
 c102ea0:	e1a0c00d 	mov	ip, sp
 c102ea4:	e92dd800 	push	{fp, ip, lr, pc}
 c102ea8:	e24cb004 	sub	fp, ip, #4
	state = TS_ON;
 c102eac:	e59f3014 	ldr	r3, [pc, #20]	; c102ec8 <ts_on+0x28>
 c102eb0:	e3a02000 	mov	r2, #0
 c102eb4:	e5c32000 	strb	r2, [r3]
	adc_on();
 c102eb8:	eb000312 	bl	c103b08 <adc_on>
}
 c102ebc:	e24bd00c 	sub	sp, fp, #12
 c102ec0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102ec4:	e12fff1e 	bx	lr
 c102ec8:	0c10f5d0 	.word	0x0c10f5d0

0c102ecc <ts_off>:

void ts_off( void )
{
 c102ecc:	e1a0c00d 	mov	ip, sp
 c102ed0:	e92dd800 	push	{fp, ip, lr, pc}
 c102ed4:	e24cb004 	sub	fp, ip, #4
	state = TS_OFF;
 c102ed8:	e59f3014 	ldr	r3, [pc, #20]	; c102ef4 <ts_off+0x28>
 c102edc:	e3a02001 	mov	r2, #1
 c102ee0:	e5c32000 	strb	r2, [r3]
	adc_off();
 c102ee4:	eb000318 	bl	c103b4c <adc_off>
}
 c102ee8:	e24bd00c 	sub	sp, fp, #12
 c102eec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102ef0:	e12fff1e 	bx	lr
 c102ef4:	0c10f5d0 	.word	0x0c10f5d0

0c102ef8 <ts_status>:

uint8 ts_status( void )
{
 c102ef8:	e1a0c00d 	mov	ip, sp
 c102efc:	e92dd800 	push	{fp, ip, lr, pc}
 c102f00:	e24cb004 	sub	fp, ip, #4
	return adc_status();
 c102f04:	eb00031f 	bl	c103b88 <adc_status>
 c102f08:	e1a03000 	mov	r3, r0
}
 c102f0c:	e1a00003 	mov	r0, r3
 c102f10:	e24bd00c 	sub	sp, fp, #12
 c102f14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f18:	e12fff1e 	bx	lr

0c102f1c <ts_calibrate>:

static void ts_calibrate( void )
{
 c102f1c:	e1a0c00d 	mov	ip, sp
 c102f20:	e92dd800 	push	{fp, ip, lr, pc}
 c102f24:	e24cb004 	sub	fp, ip, #4
 c102f28:	e24dd010 	sub	sp, sp, #16
	uint16 x, y;
	uint16 Vx, Vy;

	lcd_on();
 c102f2c:	ebfff746 	bl	c100c4c <lcd_on>
	do {
		lcd_clear();
 c102f30:	ebfff76d 	bl	c100cec <lcd_clear>
		lcd_draw_box(0,0,2,2,BLACK,1);
 c102f34:	e3a0300f 	mov	r3, #15
 c102f38:	e58d3000 	str	r3, [sp]
 c102f3c:	e3a03001 	mov	r3, #1
 c102f40:	e58d3004 	str	r3, [sp, #4]
 c102f44:	e3a00000 	mov	r0, #0
 c102f48:	e3a01000 	mov	r1, #0
 c102f4c:	e3a02002 	mov	r2, #2
 c102f50:	e3a03002 	mov	r3, #2
 c102f54:	ebfff83f 	bl	c101058 <lcd_draw_box>

		while ((PDATG & (1 << 2)));
 c102f58:	e1a00000 	nop			; (mov r0, r0)
 c102f5c:	e59f3168 	ldr	r3, [pc, #360]	; c1030cc <ts_calibrate+0x1b0>
 c102f60:	e5933000 	ldr	r3, [r3]
 c102f64:	e2033004 	and	r3, r3, #4
 c102f68:	e3530000 	cmp	r3, #0
 c102f6c:	1afffffa 	bne	c102f5c <ts_calibrate+0x40>
		sw_delay_ms( TS_DOWN_DELAY );
 c102f70:	e3a0001e 	mov	r0, #30
 c102f74:	ebfffddd 	bl	c1026f0 <sw_delay_ms>
		ts_scan( &Vxmin, &Vymax );
 c102f78:	e59f0150 	ldr	r0, [pc, #336]	; c1030d0 <ts_calibrate+0x1b4>
 c102f7c:	e59f1150 	ldr	r1, [pc, #336]	; c1030d4 <ts_calibrate+0x1b8>
 c102f80:	eb0000f6 	bl	c103360 <ts_scan>
		while (!(PDATG & (1 << 2)));
 c102f84:	e1a00000 	nop			; (mov r0, r0)
 c102f88:	e59f313c 	ldr	r3, [pc, #316]	; c1030cc <ts_calibrate+0x1b0>
 c102f8c:	e5933000 	ldr	r3, [r3]
 c102f90:	e2033004 	and	r3, r3, #4
 c102f94:	e3530000 	cmp	r3, #0
 c102f98:	0afffffa 	beq	c102f88 <ts_calibrate+0x6c>

		lcd_clear();
 c102f9c:	ebfff752 	bl	c100cec <lcd_clear>
		lcd_draw_box(318,238,320,240,BLACK,1);
 c102fa0:	e3a0300f 	mov	r3, #15
 c102fa4:	e58d3000 	str	r3, [sp]
 c102fa8:	e3a03001 	mov	r3, #1
 c102fac:	e58d3004 	str	r3, [sp, #4]
 c102fb0:	e59f0120 	ldr	r0, [pc, #288]	; c1030d8 <ts_calibrate+0x1bc>
 c102fb4:	e3a010ee 	mov	r1, #238	; 0xee
 c102fb8:	e3a02d05 	mov	r2, #320	; 0x140
 c102fbc:	e3a030f0 	mov	r3, #240	; 0xf0
 c102fc0:	ebfff824 	bl	c101058 <lcd_draw_box>

		while ((PDATG & (1 << 2)));
 c102fc4:	e1a00000 	nop			; (mov r0, r0)
 c102fc8:	e59f30fc 	ldr	r3, [pc, #252]	; c1030cc <ts_calibrate+0x1b0>
 c102fcc:	e5933000 	ldr	r3, [r3]
 c102fd0:	e2033004 	and	r3, r3, #4
 c102fd4:	e3530000 	cmp	r3, #0
 c102fd8:	1afffffa 	bne	c102fc8 <ts_calibrate+0xac>
		sw_delay_ms( TS_DOWN_DELAY );
 c102fdc:	e3a0001e 	mov	r0, #30
 c102fe0:	ebfffdc2 	bl	c1026f0 <sw_delay_ms>
		ts_scan( &Vxmax, &Vymin );
 c102fe4:	e59f00f0 	ldr	r0, [pc, #240]	; c1030dc <ts_calibrate+0x1c0>
 c102fe8:	e59f10f0 	ldr	r1, [pc, #240]	; c1030e0 <ts_calibrate+0x1c4>
 c102fec:	eb0000db 	bl	c103360 <ts_scan>
		while (!(PDATG & (1 << 2)));
 c102ff0:	e1a00000 	nop			; (mov r0, r0)
 c102ff4:	e59f30d0 	ldr	r3, [pc, #208]	; c1030cc <ts_calibrate+0x1b0>
 c102ff8:	e5933000 	ldr	r3, [r3]
 c102ffc:	e2033004 	and	r3, r3, #4
 c103000:	e3530000 	cmp	r3, #0
 c103004:	0afffffa 	beq	c102ff4 <ts_calibrate+0xd8>

		lcd_clear();
 c103008:	ebfff737 	bl	c100cec <lcd_clear>
		lcd_draw_box(158,118,162,122,BLACK,1);
 c10300c:	e3a0300f 	mov	r3, #15
 c103010:	e58d3000 	str	r3, [sp]
 c103014:	e3a03001 	mov	r3, #1
 c103018:	e58d3004 	str	r3, [sp, #4]
 c10301c:	e3a0009e 	mov	r0, #158	; 0x9e
 c103020:	e3a01076 	mov	r1, #118	; 0x76
 c103024:	e3a020a2 	mov	r2, #162	; 0xa2
 c103028:	e3a0307a 	mov	r3, #122	; 0x7a
 c10302c:	ebfff809 	bl	c101058 <lcd_draw_box>

		while ((PDATG & (1 << 2)));
 c103030:	e1a00000 	nop			; (mov r0, r0)
 c103034:	e59f3090 	ldr	r3, [pc, #144]	; c1030cc <ts_calibrate+0x1b0>
 c103038:	e5933000 	ldr	r3, [r3]
 c10303c:	e2033004 	and	r3, r3, #4
 c103040:	e3530000 	cmp	r3, #0
 c103044:	1afffffa 	bne	c103034 <ts_calibrate+0x118>
		sw_delay_ms( TS_DOWN_DELAY );
 c103048:	e3a0001e 	mov	r0, #30
 c10304c:	ebfffda7 	bl	c1026f0 <sw_delay_ms>
		ts_scan( &Vx, &Vy );
 c103050:	e24b2012 	sub	r2, fp, #18
 c103054:	e24b3014 	sub	r3, fp, #20
 c103058:	e1a00002 	mov	r0, r2
 c10305c:	e1a01003 	mov	r1, r3
 c103060:	eb0000be 	bl	c103360 <ts_scan>
		while (!(PDATG & (1 << 2)));
 c103064:	e1a00000 	nop			; (mov r0, r0)
 c103068:	e59f305c 	ldr	r3, [pc, #92]	; c1030cc <ts_calibrate+0x1b0>
 c10306c:	e5933000 	ldr	r3, [r3]
 c103070:	e2033004 	and	r3, r3, #4
 c103074:	e3530000 	cmp	r3, #0
 c103078:	0afffffa 	beq	c103068 <ts_calibrate+0x14c>
		ts_sample2coord( Vx, Vy, &x, &y );
 c10307c:	e15b01b2 	ldrh	r0, [fp, #-18]	; 0xffffffee
 c103080:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c103084:	e24b200e 	sub	r2, fp, #14
 c103088:	e24b3010 	sub	r3, fp, #16
 c10308c:	eb0000d8 	bl	c1033f4 <ts_sample2coord>

	} while( (x > 160+PX_ERROR) || (x < 160-PX_ERROR) || (y > 120+PX_ERROR) || (y < 120-PX_ERROR) );
 c103090:	e15b30be 	ldrh	r3, [fp, #-14]
 c103094:	e35300a5 	cmp	r3, #165	; 0xa5
 c103098:	8affffa4 	bhi	c102f30 <ts_calibrate+0x14>
 c10309c:	e15b30be 	ldrh	r3, [fp, #-14]
 c1030a0:	e353009a 	cmp	r3, #154	; 0x9a
 c1030a4:	9affffa1 	bls	c102f30 <ts_calibrate+0x14>
 c1030a8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1030ac:	e353007d 	cmp	r3, #125	; 0x7d
 c1030b0:	8affff9e 	bhi	c102f30 <ts_calibrate+0x14>
 c1030b4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1030b8:	e3530072 	cmp	r3, #114	; 0x72
 c1030bc:	9affff9b 	bls	c102f30 <ts_calibrate+0x14>

}
 c1030c0:	e24bd00c 	sub	sp, fp, #12
 c1030c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1030c8:	e12fff1e 	bx	lr
 c1030cc:	01d20044 	.word	0x01d20044
 c1030d0:	0c10f5c8 	.word	0x0c10f5c8
 c1030d4:	0c10f5ce 	.word	0x0c10f5ce
 c1030d8:	0000013e 	.word	0x0000013e
 c1030dc:	0c10f5ca 	.word	0x0c10f5ca
 c1030e0:	0c10f5cc 	.word	0x0c10f5cc

0c1030e4 <ts_wait_down>:

void ts_wait_down( void )
{
 c1030e4:	e1a0c00d 	mov	ip, sp
 c1030e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1030ec:	e24cb004 	sub	fp, ip, #4
	while (PDATG & (1 << 2));
 c1030f0:	e1a00000 	nop			; (mov r0, r0)
 c1030f4:	e59f3018 	ldr	r3, [pc, #24]	; c103114 <ts_wait_down+0x30>
 c1030f8:	e5933000 	ldr	r3, [r3]
 c1030fc:	e2033004 	and	r3, r3, #4
 c103100:	e3530000 	cmp	r3, #0
 c103104:	1afffffa 	bne	c1030f4 <ts_wait_down+0x10>
}
 c103108:	e24bd00c 	sub	sp, fp, #12
 c10310c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103110:	e12fff1e 	bx	lr
 c103114:	01d20044 	.word	0x01d20044

0c103118 <ts_wait_up>:

void ts_wait_up( void )
{
 c103118:	e1a0c00d 	mov	ip, sp
 c10311c:	e92dd800 	push	{fp, ip, lr, pc}
 c103120:	e24cb004 	sub	fp, ip, #4
	while (!(PDATG & (1 << 2)));
 c103124:	e1a00000 	nop			; (mov r0, r0)
 c103128:	e59f3018 	ldr	r3, [pc, #24]	; c103148 <ts_wait_up+0x30>
 c10312c:	e5933000 	ldr	r3, [r3]
 c103130:	e2033004 	and	r3, r3, #4
 c103134:	e3530000 	cmp	r3, #0
 c103138:	0afffffa 	beq	c103128 <ts_wait_up+0x10>
}
 c10313c:	e24bd00c 	sub	sp, fp, #12
 c103140:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103144:	e12fff1e 	bx	lr
 c103148:	01d20044 	.word	0x01d20044

0c10314c <ts_getpos>:

void ts_getpos( uint16 *x, uint16 *y )
{
 c10314c:	e1a0c00d 	mov	ip, sp
 c103150:	e92dd800 	push	{fp, ip, lr, pc}
 c103154:	e24cb004 	sub	fp, ip, #4
 c103158:	e24dd010 	sub	sp, sp, #16
 c10315c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c103160:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	uint16 ejeX, ejeY;

	while ((PDATG & (1 << 2)));
 c103164:	e1a00000 	nop			; (mov r0, r0)
 c103168:	e59f3068 	ldr	r3, [pc, #104]	; c1031d8 <ts_getpos+0x8c>
 c10316c:	e5933000 	ldr	r3, [r3]
 c103170:	e2033004 	and	r3, r3, #4
 c103174:	e3530000 	cmp	r3, #0
 c103178:	1afffffa 	bne	c103168 <ts_getpos+0x1c>
	sw_delay_ms(TS_DOWN_DELAY);
 c10317c:	e3a0001e 	mov	r0, #30
 c103180:	ebfffd5a 	bl	c1026f0 <sw_delay_ms>

	ts_scan(&ejeX, &ejeY);
 c103184:	e24b200e 	sub	r2, fp, #14
 c103188:	e24b3010 	sub	r3, fp, #16
 c10318c:	e1a00002 	mov	r0, r2
 c103190:	e1a01003 	mov	r1, r3
 c103194:	eb000071 	bl	c103360 <ts_scan>

	while (!(PDATG & (1 << 2)));
 c103198:	e1a00000 	nop			; (mov r0, r0)
 c10319c:	e59f3034 	ldr	r3, [pc, #52]	; c1031d8 <ts_getpos+0x8c>
 c1031a0:	e5933000 	ldr	r3, [r3]
 c1031a4:	e2033004 	and	r3, r3, #4
 c1031a8:	e3530000 	cmp	r3, #0
 c1031ac:	0afffffa 	beq	c10319c <ts_getpos+0x50>
	ts_sample2coord(ejeX, ejeY, x, y);
 c1031b0:	e15b20be 	ldrh	r2, [fp, #-14]
 c1031b4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1031b8:	e1a00002 	mov	r0, r2
 c1031bc:	e1a01003 	mov	r1, r3
 c1031c0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1031c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1031c8:	eb000089 	bl	c1033f4 <ts_sample2coord>
}
 c1031cc:	e24bd00c 	sub	sp, fp, #12
 c1031d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1031d4:	e12fff1e 	bx	lr
 c1031d8:	01d20044 	.word	0x01d20044

0c1031dc <ts_getpostime>:

void ts_getpostime( uint16 *x, uint16 *y, uint16 *ms )
{
 c1031dc:	e1a0c00d 	mov	ip, sp
 c1031e0:	e92dd800 	push	{fp, ip, lr, pc}
 c1031e4:	e24cb004 	sub	fp, ip, #4
 c1031e8:	e24dd018 	sub	sp, sp, #24
 c1031ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1031f0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1031f4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
	uint16 ejeX, ejeY;

	while ((PDATG & (1 << 2)));
 c1031f8:	e1a00000 	nop			; (mov r0, r0)
 c1031fc:	e59f3094 	ldr	r3, [pc, #148]	; c103298 <ts_getpostime+0xbc>
 c103200:	e5933000 	ldr	r3, [r3]
 c103204:	e2033004 	and	r3, r3, #4
 c103208:	e3530000 	cmp	r3, #0
 c10320c:	1afffffa 	bne	c1031fc <ts_getpostime+0x20>
	timer3_start();
 c103210:	ebfffd9d 	bl	c10288c <timer3_start>
	sw_delay_ms(TS_DOWN_DELAY);
 c103214:	e3a0001e 	mov	r0, #30
 c103218:	ebfffd34 	bl	c1026f0 <sw_delay_ms>

	ts_scan(&ejeX, &ejeY);
 c10321c:	e24b200e 	sub	r2, fp, #14
 c103220:	e24b3010 	sub	r3, fp, #16
 c103224:	e1a00002 	mov	r0, r2
 c103228:	e1a01003 	mov	r1, r3
 c10322c:	eb00004b 	bl	c103360 <ts_scan>

	while (!(PDATG & (1 << 2)));
 c103230:	e1a00000 	nop			; (mov r0, r0)
 c103234:	e59f305c 	ldr	r3, [pc, #92]	; c103298 <ts_getpostime+0xbc>
 c103238:	e5933000 	ldr	r3, [r3]
 c10323c:	e2033004 	and	r3, r3, #4
 c103240:	e3530000 	cmp	r3, #0
 c103244:	0afffffa 	beq	c103234 <ts_getpostime+0x58>
	*ms =timer3_stop()/10;
 c103248:	ebfffdbb 	bl	c10293c <timer3_stop>
 c10324c:	e1a03000 	mov	r3, r0
 c103250:	e1a02003 	mov	r2, r3
 c103254:	e59f3040 	ldr	r3, [pc, #64]	; c10329c <ts_getpostime+0xc0>
 c103258:	e0831392 	umull	r1, r3, r2, r3
 c10325c:	e1a031a3 	lsr	r3, r3, #3
 c103260:	e1a03803 	lsl	r3, r3, #16
 c103264:	e1a02823 	lsr	r2, r3, #16
 c103268:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10326c:	e1c320b0 	strh	r2, [r3]
	ts_sample2coord(ejeX, ejeY, x, y);
 c103270:	e15b20be 	ldrh	r2, [fp, #-14]
 c103274:	e15b31b0 	ldrh	r3, [fp, #-16]
 c103278:	e1a00002 	mov	r0, r2
 c10327c:	e1a01003 	mov	r1, r3
 c103280:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103284:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103288:	eb000059 	bl	c1033f4 <ts_sample2coord>
}
 c10328c:	e24bd00c 	sub	sp, fp, #12
 c103290:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103294:	e12fff1e 	bx	lr
 c103298:	01d20044 	.word	0x01d20044
 c10329c:	cccccccd 	.word	0xcccccccd

0c1032a0 <ts_timeout_getpos>:

uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
{
 c1032a0:	e1a0c00d 	mov	ip, sp
 c1032a4:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1032a8:	e24cb004 	sub	fp, ip, #4
 c1032ac:	e24dd01c 	sub	sp, sp, #28
 c1032b0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c1032b4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c1032b8:	e1a03002 	mov	r3, r2
 c1032bc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
	uint8 error = TS_TIMEOUT;
 c1032c0:	e3e03001 	mvn	r3, #1
 c1032c4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint16 ejeX, ejeY;

	timer3_start_timeout(ms);
 c1032c8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
 c1032cc:	e1a00003 	mov	r0, r3
 c1032d0:	ebfffdae 	bl	c102990 <timer3_start_timeout>

	while ((PDATG & (1 << 2)) & timer3_timeout());
 c1032d4:	e1a00000 	nop			; (mov r0, r0)
 c1032d8:	e59f307c 	ldr	r3, [pc, #124]	; c10335c <ts_timeout_getpos+0xbc>
 c1032dc:	e5934000 	ldr	r4, [r3]
 c1032e0:	ebfffdd8 	bl	c102a48 <timer3_timeout>
 c1032e4:	e1a03000 	mov	r3, r0
 c1032e8:	e0043003 	and	r3, r4, r3
 c1032ec:	e2033004 	and	r3, r3, #4
 c1032f0:	e3530000 	cmp	r3, #0
 c1032f4:	1afffff7 	bne	c1032d8 <ts_timeout_getpos+0x38>
	if(!timer3_timeout()){
 c1032f8:	ebfffdd2 	bl	c102a48 <timer3_timeout>
 c1032fc:	e1a03000 	mov	r3, r0
 c103300:	e3530000 	cmp	r3, #0
 c103304:	1a00000f 	bne	c103348 <ts_timeout_getpos+0xa8>
		sw_delay_ms(TS_DOWN_DELAY);
 c103308:	e3a0001e 	mov	r0, #30
 c10330c:	ebfffcf7 	bl	c1026f0 <sw_delay_ms>
		ts_scan(&ejeX, &ejeY);
 c103310:	e24b2018 	sub	r2, fp, #24
 c103314:	e24b301a 	sub	r3, fp, #26
 c103318:	e1a00002 	mov	r0, r2
 c10331c:	e1a01003 	mov	r1, r3
 c103320:	eb00000e 	bl	c103360 <ts_scan>
		ts_sample2coord(ejeX, ejeY, x, y);
 c103324:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c103328:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10332c:	e1a00002 	mov	r0, r2
 c103330:	e1a01003 	mov	r1, r3
 c103334:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103338:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10333c:	eb00002c 	bl	c1033f4 <ts_sample2coord>
		error = 0;
 c103340:	e3a03000 	mov	r3, #0
 c103344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	}

	return error;
 c103348:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
 c10334c:	e1a00003 	mov	r0, r3
 c103350:	e24bd010 	sub	sp, fp, #16
 c103354:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c103358:	e12fff1e 	bx	lr
 c10335c:	01d20044 	.word	0x01d20044

0c103360 <ts_scan>:

static void ts_scan( uint16 *Vx, uint16 *Vy )
{
 c103360:	e1a0c00d 	mov	ip, sp
 c103364:	e92dd800 	push	{fp, ip, lr, pc}
 c103368:	e24cb004 	sub	fp, ip, #4
 c10336c:	e24dd008 	sub	sp, sp, #8
 c103370:	e50b0010 	str	r0, [fp, #-16]
 c103374:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    PDATE = (0x6 << 4);
 c103378:	e59f3070 	ldr	r3, [pc, #112]	; c1033f0 <ts_scan+0x90>
 c10337c:	e3a02060 	mov	r2, #96	; 0x60
 c103380:	e5832000 	str	r2, [r3]
    sw_delay_ms(1);
 c103384:	e3a00001 	mov	r0, #1
 c103388:	ebfffcd8 	bl	c1026f0 <sw_delay_ms>
    *Vx = adc_getSample( ADC_AIN1 );
 c10338c:	e3a00001 	mov	r0, #1
 c103390:	eb000206 	bl	c103bb0 <adc_getSample>
 c103394:	e1a03000 	mov	r3, r0
 c103398:	e1a02003 	mov	r2, r3
 c10339c:	e51b3010 	ldr	r3, [fp, #-16]
 c1033a0:	e1c320b0 	strh	r2, [r3]

    PDATE = (0x9 << 4);
 c1033a4:	e59f3044 	ldr	r3, [pc, #68]	; c1033f0 <ts_scan+0x90>
 c1033a8:	e3a02090 	mov	r2, #144	; 0x90
 c1033ac:	e5832000 	str	r2, [r3]
    sw_delay_ms(1);
 c1033b0:	e3a00001 	mov	r0, #1
 c1033b4:	ebfffccd 	bl	c1026f0 <sw_delay_ms>
    *Vy = adc_getSample( ADC_AIN0 );
 c1033b8:	e3a00000 	mov	r0, #0
 c1033bc:	eb0001fb 	bl	c103bb0 <adc_getSample>
 c1033c0:	e1a03000 	mov	r3, r0
 c1033c4:	e1a02003 	mov	r2, r3
 c1033c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1033cc:	e1c320b0 	strh	r2, [r3]

    PDATE = (0xb << 4);
 c1033d0:	e59f3018 	ldr	r3, [pc, #24]	; c1033f0 <ts_scan+0x90>
 c1033d4:	e3a020b0 	mov	r2, #176	; 0xb0
 c1033d8:	e5832000 	str	r2, [r3]
    sw_delay_ms(1);
 c1033dc:	e3a00001 	mov	r0, #1
 c1033e0:	ebfffcc2 	bl	c1026f0 <sw_delay_ms>
}
 c1033e4:	e24bd00c 	sub	sp, fp, #12
 c1033e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1033ec:	e12fff1e 	bx	lr
 c1033f0:	01d2002c 	.word	0x01d2002c

0c1033f4 <ts_sample2coord>:

static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
{
 c1033f4:	e1a0c00d 	mov	ip, sp
 c1033f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1033fc:	e24cb004 	sub	fp, ip, #4
 c103400:	e24dd010 	sub	sp, sp, #16
 c103404:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 c103408:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10340c:	e14b00be 	strh	r0, [fp, #-14]
 c103410:	e14b11b0 	strh	r1, [fp, #-16]
    if( Vx < Vxmin )
 c103414:	e59f314c 	ldr	r3, [pc, #332]	; c103568 <ts_sample2coord+0x174>
 c103418:	e1d330b0 	ldrh	r3, [r3]
 c10341c:	e15b20be 	ldrh	r2, [fp, #-14]
 c103420:	e1520003 	cmp	r2, r3
 c103424:	2a000003 	bcs	c103438 <ts_sample2coord+0x44>
        *x = 0;
 c103428:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10342c:	e3a02000 	mov	r2, #0
 c103430:	e1c320b0 	strh	r2, [r3]
 c103434:	ea00001f 	b	c1034b8 <ts_sample2coord+0xc4>
    else if( Vx > Vxmax )
 c103438:	e59f312c 	ldr	r3, [pc, #300]	; c10356c <ts_sample2coord+0x178>
 c10343c:	e1d330b0 	ldrh	r3, [r3]
 c103440:	e15b20be 	ldrh	r2, [fp, #-14]
 c103444:	e1520003 	cmp	r2, r3
 c103448:	9a000003 	bls	c10345c <ts_sample2coord+0x68>
        *x = LCD_WIDTH-1;
 c10344c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103450:	e59f2118 	ldr	r2, [pc, #280]	; c103570 <ts_sample2coord+0x17c>
 c103454:	e1c320b0 	strh	r2, [r3]
 c103458:	ea000016 	b	c1034b8 <ts_sample2coord+0xc4>
    else
        *x = LCD_WIDTH*(Vx-Vxmin) / (Vxmax-Vxmin);
 c10345c:	e15b20be 	ldrh	r2, [fp, #-14]
 c103460:	e59f3100 	ldr	r3, [pc, #256]	; c103568 <ts_sample2coord+0x174>
 c103464:	e1d330b0 	ldrh	r3, [r3]
 c103468:	e0632002 	rsb	r2, r3, r2
 c10346c:	e1a03002 	mov	r3, r2
 c103470:	e1a03103 	lsl	r3, r3, #2
 c103474:	e0833002 	add	r3, r3, r2
 c103478:	e1a03303 	lsl	r3, r3, #6
 c10347c:	e1a02003 	mov	r2, r3
 c103480:	e59f30e4 	ldr	r3, [pc, #228]	; c10356c <ts_sample2coord+0x178>
 c103484:	e1d330b0 	ldrh	r3, [r3]
 c103488:	e1a01003 	mov	r1, r3
 c10348c:	e59f30d4 	ldr	r3, [pc, #212]	; c103568 <ts_sample2coord+0x174>
 c103490:	e1d330b0 	ldrh	r3, [r3]
 c103494:	e0633001 	rsb	r3, r3, r1
 c103498:	e1a00002 	mov	r0, r2
 c10349c:	e1a01003 	mov	r1, r3
 c1034a0:	eb00026d 	bl	c103e5c <__aeabi_idiv>
 c1034a4:	e1a03000 	mov	r3, r0
 c1034a8:	e1a03803 	lsl	r3, r3, #16
 c1034ac:	e1a02823 	lsr	r2, r3, #16
 c1034b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034b4:	e1c320b0 	strh	r2, [r3]
	if( Vy < Vymin )
 c1034b8:	e59f30b4 	ldr	r3, [pc, #180]	; c103574 <ts_sample2coord+0x180>
 c1034bc:	e1d330b0 	ldrh	r3, [r3]
 c1034c0:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1034c4:	e1520003 	cmp	r2, r3
 c1034c8:	2a000003 	bcs	c1034dc <ts_sample2coord+0xe8>
		*y = LCD_HEIGHT-1;
 c1034cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1034d0:	e3a020ef 	mov	r2, #239	; 0xef
 c1034d4:	e1c320b0 	strh	r2, [r3]
 c1034d8:	ea00001f 	b	c10355c <ts_sample2coord+0x168>
	else if( Vy > Vymax )
 c1034dc:	e59f3094 	ldr	r3, [pc, #148]	; c103578 <ts_sample2coord+0x184>
 c1034e0:	e1d330b0 	ldrh	r3, [r3]
 c1034e4:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1034e8:	e1520003 	cmp	r2, r3
 c1034ec:	9a000003 	bls	c103500 <ts_sample2coord+0x10c>
		*y = 0;
 c1034f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1034f4:	e3a02000 	mov	r2, #0
 c1034f8:	e1c320b0 	strh	r2, [r3]
 c1034fc:	ea000016 	b	c10355c <ts_sample2coord+0x168>
	else
		*y = LCD_HEIGHT*(Vy-Vymax) / (Vymin-Vymax);
 c103500:	e15b21b0 	ldrh	r2, [fp, #-16]
 c103504:	e59f306c 	ldr	r3, [pc, #108]	; c103578 <ts_sample2coord+0x184>
 c103508:	e1d330b0 	ldrh	r3, [r3]
 c10350c:	e0632002 	rsb	r2, r3, r2
 c103510:	e1a03002 	mov	r3, r2
 c103514:	e1a03203 	lsl	r3, r3, #4
 c103518:	e0623003 	rsb	r3, r2, r3
 c10351c:	e1a03203 	lsl	r3, r3, #4
 c103520:	e1a02003 	mov	r2, r3
 c103524:	e59f3048 	ldr	r3, [pc, #72]	; c103574 <ts_sample2coord+0x180>
 c103528:	e1d330b0 	ldrh	r3, [r3]
 c10352c:	e1a01003 	mov	r1, r3
 c103530:	e59f3040 	ldr	r3, [pc, #64]	; c103578 <ts_sample2coord+0x184>
 c103534:	e1d330b0 	ldrh	r3, [r3]
 c103538:	e0633001 	rsb	r3, r3, r1
 c10353c:	e1a00002 	mov	r0, r2
 c103540:	e1a01003 	mov	r1, r3
 c103544:	eb000244 	bl	c103e5c <__aeabi_idiv>
 c103548:	e1a03000 	mov	r3, r0
 c10354c:	e1a03803 	lsl	r3, r3, #16
 c103550:	e1a02823 	lsr	r2, r3, #16
 c103554:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103558:	e1c320b0 	strh	r2, [r3]
}
 c10355c:	e24bd00c 	sub	sp, fp, #12
 c103560:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103564:	e12fff1e 	bx	lr
 c103568:	0c10f5c8 	.word	0x0c10f5c8
 c10356c:	0c10f5ca 	.word	0x0c10f5ca
 c103570:	0000013f 	.word	0x0000013f
 c103574:	0c10f5cc 	.word	0x0c10f5cc
 c103578:	0c10f5ce 	.word	0x0c10f5ce

0c10357c <ts_open>:

void ts_open( void (*isr)(void) )
{
 c10357c:	e1a0c00d 	mov	ip, sp
 c103580:	e92dd800 	push	{fp, ip, lr, pc}
 c103584:	e24cb004 	sub	fp, ip, #4
 c103588:	e24dd008 	sub	sp, sp, #8
 c10358c:	e50b0010 	str	r0, [fp, #-16]
	pISR_TS = (uint32) isr;
 c103590:	e59f3030 	ldr	r3, [pc, #48]	; c1035c8 <ts_open+0x4c>
 c103594:	e51b2010 	ldr	r2, [fp, #-16]
 c103598:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_TS;
 c10359c:	e59f3028 	ldr	r3, [pc, #40]	; c1035cc <ts_open+0x50>
 c1035a0:	e3a02502 	mov	r2, #8388608	; 0x800000
 c1035a4:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_TS);
 c1035a8:	e59f3020 	ldr	r3, [pc, #32]	; c1035d0 <ts_open+0x54>
 c1035ac:	e59f201c 	ldr	r2, [pc, #28]	; c1035d0 <ts_open+0x54>
 c1035b0:	e5922000 	ldr	r2, [r2]
 c1035b4:	e3c22512 	bic	r2, r2, #75497472	; 0x4800000
 c1035b8:	e5832000 	str	r2, [r3]
}
 c1035bc:	e24bd00c 	sub	sp, fp, #12
 c1035c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1035c4:	e12fff1e 	bx	lr
 c1035c8:	0c7fff7c 	.word	0x0c7fff7c
 c1035cc:	01e00024 	.word	0x01e00024
 c1035d0:	01e0000c 	.word	0x01e0000c

0c1035d4 <ts_close>:

void ts_close( void )
{
 c1035d4:	e1a0c00d 	mov	ip, sp
 c1035d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1035dc:	e24cb004 	sub	fp, ip, #4
	INTMSK |= BIT_TS;
 c1035e0:	e59f3024 	ldr	r3, [pc, #36]	; c10360c <ts_close+0x38>
 c1035e4:	e59f2020 	ldr	r2, [pc, #32]	; c10360c <ts_close+0x38>
 c1035e8:	e5922000 	ldr	r2, [r2]
 c1035ec:	e3822502 	orr	r2, r2, #8388608	; 0x800000
 c1035f0:	e5832000 	str	r2, [r3]
	pISR_BDMA0 =isr_TS_dummy;
 c1035f4:	e59f3014 	ldr	r3, [pc, #20]	; c103610 <ts_close+0x3c>
 c1035f8:	e59f2014 	ldr	r2, [pc, #20]	; c103614 <ts_close+0x40>
 c1035fc:	e5832000 	str	r2, [r3]
}
 c103600:	e24bd00c 	sub	sp, fp, #12
 c103604:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103608:	e12fff1e 	bx	lr
 c10360c:	01e0000c 	.word	0x01e0000c
 c103610:	0c7fff64 	.word	0x0c7fff64
 c103614:	0c102380 	.word	0x0c102380

0c103618 <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c103618:	e1a0c00d 	mov	ip, sp
 c10361c:	e92dd800 	push	{fp, ip, lr, pc}
 c103620:	e24cb004 	sub	fp, ip, #4
    UFCON0 = 0x1;
 c103624:	e59f3040 	ldr	r3, [pc, #64]	; c10366c <uart0_init+0x54>
 c103628:	e3a02001 	mov	r2, #1
 c10362c:	e5832000 	str	r2, [r3]
    UMCON0 = 0x0;
 c103630:	e59f3038 	ldr	r3, [pc, #56]	; c103670 <uart0_init+0x58>
 c103634:	e3a02000 	mov	r2, #0
 c103638:	e5832000 	str	r2, [r3]
    ULCON0 = 0x3;
 c10363c:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c103640:	e3a02003 	mov	r2, #3
 c103644:	e5832000 	str	r2, [r3]
    UBRDIV0 = 0x22;
 c103648:	e59f3024 	ldr	r3, [pc, #36]	; c103674 <uart0_init+0x5c>
 c10364c:	e3a02022 	mov	r2, #34	; 0x22
 c103650:	e5832000 	str	r2, [r3]
    UCON0 = 0x5;
 c103654:	e59f301c 	ldr	r3, [pc, #28]	; c103678 <uart0_init+0x60>
 c103658:	e3a02005 	mov	r2, #5
 c10365c:	e5832000 	str	r2, [r3]
}
 c103660:	e24bd00c 	sub	sp, fp, #12
 c103664:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103668:	e12fff1e 	bx	lr
 c10366c:	01d00008 	.word	0x01d00008
 c103670:	01d0000c 	.word	0x01d0000c
 c103674:	01d00028 	.word	0x01d00028
 c103678:	01d00004 	.word	0x01d00004

0c10367c <uart0_putchar>:

void uart0_putchar( char ch )
{
 c10367c:	e1a0c00d 	mov	ip, sp
 c103680:	e92dd800 	push	{fp, ip, lr, pc}
 c103684:	e24cb004 	sub	fp, ip, #4
 c103688:	e24dd008 	sub	sp, sp, #8
 c10368c:	e1a03000 	mov	r3, r0
 c103690:	e54b300d 	strb	r3, [fp, #-13]
    while( UFSTAT0 & (1<<9) ); // leemos del bit 9 full
 c103694:	e1a00000 	nop			; (mov r0, r0)
 c103698:	e59f3024 	ldr	r3, [pc, #36]	; c1036c4 <uart0_putchar+0x48>
 c10369c:	e5933000 	ldr	r3, [r3]
 c1036a0:	e2033c02 	and	r3, r3, #512	; 0x200
 c1036a4:	e3530000 	cmp	r3, #0
 c1036a8:	1afffffa 	bne	c103698 <uart0_putchar+0x1c>
    UTXH0 = ch;
 c1036ac:	e59f3014 	ldr	r3, [pc, #20]	; c1036c8 <uart0_putchar+0x4c>
 c1036b0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1036b4:	e5832000 	str	r2, [r3]
}        
 c1036b8:	e24bd00c 	sub	sp, fp, #12
 c1036bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1036c0:	e12fff1e 	bx	lr
 c1036c4:	01d00018 	.word	0x01d00018
 c1036c8:	01d00020 	.word	0x01d00020

0c1036cc <uart0_getchar>:

char uart0_getchar( void )
{
 c1036cc:	e1a0c00d 	mov	ip, sp
 c1036d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1036d4:	e24cb004 	sub	fp, ip, #4
    while( (UFSTAT0 & 0xf) == 0 ); // leemos del URx fifo
 c1036d8:	e1a00000 	nop			; (mov r0, r0)
 c1036dc:	e59f3028 	ldr	r3, [pc, #40]	; c10370c <uart0_getchar+0x40>
 c1036e0:	e5933000 	ldr	r3, [r3]
 c1036e4:	e203300f 	and	r3, r3, #15
 c1036e8:	e3530000 	cmp	r3, #0
 c1036ec:	0afffffa 	beq	c1036dc <uart0_getchar+0x10>
    return URXH0;
 c1036f0:	e59f3018 	ldr	r3, [pc, #24]	; c103710 <uart0_getchar+0x44>
 c1036f4:	e5933000 	ldr	r3, [r3]
 c1036f8:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c1036fc:	e1a00003 	mov	r0, r3
 c103700:	e24bd00c 	sub	sp, fp, #12
 c103704:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103708:	e12fff1e 	bx	lr
 c10370c:	01d00018 	.word	0x01d00018
 c103710:	01d00024 	.word	0x01d00024

0c103714 <uart0_puts>:

void uart0_puts( char *s )
{
 c103714:	e1a0c00d 	mov	ip, sp
 c103718:	e92dd800 	push	{fp, ip, lr, pc}
 c10371c:	e24cb004 	sub	fp, ip, #4
 c103720:	e24dd008 	sub	sp, sp, #8
 c103724:	e50b0010 	str	r0, [fp, #-16]
	while( *s  ) uart0_putchar( *s++ );
 c103728:	ea000006 	b	c103748 <uart0_puts+0x34>
 c10372c:	e51b3010 	ldr	r3, [fp, #-16]
 c103730:	e5d33000 	ldrb	r3, [r3]
 c103734:	e51b2010 	ldr	r2, [fp, #-16]
 c103738:	e2822001 	add	r2, r2, #1
 c10373c:	e50b2010 	str	r2, [fp, #-16]
 c103740:	e1a00003 	mov	r0, r3
 c103744:	ebffffcc 	bl	c10367c <uart0_putchar>
 c103748:	e51b3010 	ldr	r3, [fp, #-16]
 c10374c:	e5d33000 	ldrb	r3, [r3]
 c103750:	e3530000 	cmp	r3, #0
 c103754:	1afffff4 	bne	c10372c <uart0_puts+0x18>
}
 c103758:	e24bd00c 	sub	sp, fp, #12
 c10375c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103760:	e12fff1e 	bx	lr

0c103764 <uart0_putint>:

void uart0_putint( int32 i )
{
 c103764:	e1a0c00d 	mov	ip, sp
 c103768:	e92dd800 	push	{fp, ip, lr, pc}
 c10376c:	e24cb004 	sub	fp, ip, #4
 c103770:	e24dd020 	sub	sp, sp, #32
 c103774:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
	int8 num = 1;
 c103778:	e3a03001 	mov	r3, #1
 c10377c:	e54b300d 	strb	r3, [fp, #-13]
	if(i < 0) {
 c103780:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103784:	e3530000 	cmp	r3, #0
 c103788:	aa000004 	bge	c1037a0 <uart0_putint+0x3c>
		num = -1;
 c10378c:	e3e03000 	mvn	r3, #0
 c103790:	e54b300d 	strb	r3, [fp, #-13]
		i *= -1;
 c103794:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103798:	e2633000 	rsb	r3, r3, #0
 c10379c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	}

    char buf[8 + 1];
    char *p = buf + 8;
 c1037a0:	e24b3020 	sub	r3, fp, #32
 c1037a4:	e2833008 	add	r3, r3, #8
 c1037a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int8 c;

    *p = '\0';
 c1037ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1037b0:	e3a02000 	mov	r2, #0
 c1037b4:	e5c32000 	strb	r2, [r3]

    do {
        c = i % 10;
 c1037b8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c1037bc:	e59f30a8 	ldr	r3, [pc, #168]	; c10386c <uart0_putint+0x108>
 c1037c0:	e0c32391 	smull	r2, r3, r1, r3
 c1037c4:	e1a02143 	asr	r2, r3, #2
 c1037c8:	e1a03fc1 	asr	r3, r1, #31
 c1037cc:	e0632002 	rsb	r2, r3, r2
 c1037d0:	e1a03002 	mov	r3, r2
 c1037d4:	e1a03103 	lsl	r3, r3, #2
 c1037d8:	e0833002 	add	r3, r3, r2
 c1037dc:	e1a03083 	lsl	r3, r3, #1
 c1037e0:	e0632001 	rsb	r2, r3, r1
 c1037e4:	e1a03002 	mov	r3, r2
 c1037e8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        *--p = '0' + c;
 c1037ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1037f0:	e2433001 	sub	r3, r3, #1
 c1037f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1037f8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1037fc:	e2833030 	add	r3, r3, #48	; 0x30
 c103800:	e20320ff 	and	r2, r3, #255	; 0xff
 c103804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103808:	e5c32000 	strb	r2, [r3]
        i /= 10;
 c10380c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103810:	e59f2054 	ldr	r2, [pc, #84]	; c10386c <uart0_putint+0x108>
 c103814:	e0c21293 	smull	r1, r2, r3, r2
 c103818:	e1a02142 	asr	r2, r2, #2
 c10381c:	e1a03fc3 	asr	r3, r3, #31
 c103820:	e0633002 	rsb	r3, r3, r2
 c103824:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i > 0 );
 c103828:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10382c:	e3530000 	cmp	r3, #0
 c103830:	caffffe0 	bgt	c1037b8 <uart0_putint+0x54>

    if(num == -1) *--p = '-';
 c103834:	e15b30dd 	ldrsb	r3, [fp, #-13]
 c103838:	e3730001 	cmn	r3, #1
 c10383c:	1a000005 	bne	c103858 <uart0_putint+0xf4>
 c103840:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103844:	e2433001 	sub	r3, r3, #1
 c103848:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10384c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103850:	e3a0202d 	mov	r2, #45	; 0x2d
 c103854:	e5c32000 	strb	r2, [r3]

    uart0_puts( p );
 c103858:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 c10385c:	ebffffac 	bl	c103714 <uart0_puts>
}
 c103860:	e24bd00c 	sub	sp, fp, #12
 c103864:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103868:	e12fff1e 	bx	lr
 c10386c:	66666667 	.word	0x66666667

0c103870 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c103870:	e1a0c00d 	mov	ip, sp
 c103874:	e92dd800 	push	{fp, ip, lr, pc}
 c103878:	e24cb004 	sub	fp, ip, #4
 c10387c:	e24dd018 	sub	sp, sp, #24
 c103880:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c103884:	e24b301c 	sub	r3, fp, #28
 c103888:	e2833008 	add	r3, r3, #8
 c10388c:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c103890:	e51b3010 	ldr	r3, [fp, #-16]
 c103894:	e3a02000 	mov	r2, #0
 c103898:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10389c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1038a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1038a4:	e203300f 	and	r3, r3, #15
 c1038a8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c1038ac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1038b0:	e3530009 	cmp	r3, #9
 c1038b4:	8a000008 	bhi	c1038dc <uart0_puthex+0x6c>
            *--p = '0' + c;
 c1038b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1038bc:	e2433001 	sub	r3, r3, #1
 c1038c0:	e50b3010 	str	r3, [fp, #-16]
 c1038c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1038c8:	e2833030 	add	r3, r3, #48	; 0x30
 c1038cc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1038d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1038d4:	e5c32000 	strb	r2, [r3]
 c1038d8:	ea000007 	b	c1038fc <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c1038dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1038e0:	e2433001 	sub	r3, r3, #1
 c1038e4:	e50b3010 	str	r3, [fp, #-16]
 c1038e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1038ec:	e2833057 	add	r3, r3, #87	; 0x57
 c1038f0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1038f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1038f8:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c1038fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103900:	e1a03223 	lsr	r3, r3, #4
 c103904:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c103908:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10390c:	e3530000 	cmp	r3, #0
 c103910:	1affffe1 	bne	c10389c <uart0_puthex+0x2c>

    uart0_puts( p );
 c103914:	e51b0010 	ldr	r0, [fp, #-16]
 c103918:	ebffff7d 	bl	c103714 <uart0_puts>
}
 c10391c:	e24bd00c 	sub	sp, fp, #12
 c103920:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103924:	e12fff1e 	bx	lr

0c103928 <uart0_gets>:

void uart0_gets( char *s )
{
 c103928:	e1a0c00d 	mov	ip, sp
 c10392c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c103930:	e24cb004 	sub	fp, ip, #4
 c103934:	e24dd014 	sub	sp, sp, #20
 c103938:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	int i = 0;
 c10393c:	e3a03000 	mov	r3, #0
 c103940:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	while( (s[i] = uart0_getchar( )) != '\n' ) i++;
 c103944:	ea000002 	b	c103954 <uart0_gets+0x2c>
 c103948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10394c:	e2833001 	add	r3, r3, #1
 c103950:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c103954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103958:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10395c:	e0824003 	add	r4, r2, r3
 c103960:	ebffff59 	bl	c1036cc <uart0_getchar>
 c103964:	e1a03000 	mov	r3, r0
 c103968:	e5c43000 	strb	r3, [r4]
 c10396c:	e5d43000 	ldrb	r3, [r4]
 c103970:	e353000a 	cmp	r3, #10
 c103974:	1afffff3 	bne	c103948 <uart0_gets+0x20>
	s[i] = '\0';
 c103978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10397c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c103980:	e0823003 	add	r3, r2, r3
 c103984:	e3a02000 	mov	r2, #0
 c103988:	e5c32000 	strb	r2, [r3]
}
 c10398c:	e24bd010 	sub	sp, fp, #16
 c103990:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c103994:	e12fff1e 	bx	lr

0c103998 <uart0_getint>:

int32 uart0_getint( void )
{
 c103998:	e1a0c00d 	mov	ip, sp
 c10399c:	e92dd800 	push	{fp, ip, lr, pc}
 c1039a0:	e24cb004 	sub	fp, ip, #4
 c1039a4:	e24dd008 	sub	sp, sp, #8
	int32 num = 0;
 c1039a8:	e3a03000 	mov	r3, #0
 c1039ac:	e50b3010 	str	r3, [fp, #-16]
	char n = uart0_getchar( );
 c1039b0:	ebffff45 	bl	c1036cc <uart0_getchar>
 c1039b4:	e1a03000 	mov	r3, r0
 c1039b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	int8 neg = 1;
 c1039bc:	e3a03001 	mov	r3, #1
 c1039c0:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

	while( n != '\n' ) {
 c1039c4:	ea000013 	b	c103a18 <uart0_getint+0x80>
		if(n == '-') neg = -1;
 c1039c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1039cc:	e353002d 	cmp	r3, #45	; 0x2d
 c1039d0:	1a000002 	bne	c1039e0 <uart0_getint+0x48>
 c1039d4:	e3e03000 	mvn	r3, #0
 c1039d8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
 c1039dc:	ea00000a 	b	c103a0c <uart0_getint+0x74>
		else {
			num *= 10;
 c1039e0:	e51b2010 	ldr	r2, [fp, #-16]
 c1039e4:	e1a03002 	mov	r3, r2
 c1039e8:	e1a03103 	lsl	r3, r3, #2
 c1039ec:	e0833002 	add	r3, r3, r2
 c1039f0:	e1a03083 	lsl	r3, r3, #1
 c1039f4:	e50b3010 	str	r3, [fp, #-16]
			num += (n - '0');
 c1039f8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1039fc:	e2433030 	sub	r3, r3, #48	; 0x30
 c103a00:	e51b2010 	ldr	r2, [fp, #-16]
 c103a04:	e0823003 	add	r3, r2, r3
 c103a08:	e50b3010 	str	r3, [fp, #-16]
		}
		n = uart0_getchar( );
 c103a0c:	ebffff2e 	bl	c1036cc <uart0_getchar>
 c103a10:	e1a03000 	mov	r3, r0
 c103a14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
{
	int32 num = 0;
	char n = uart0_getchar( );
	int8 neg = 1;

	while( n != '\n' ) {
 c103a18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103a1c:	e353000a 	cmp	r3, #10
 c103a20:	1affffe8 	bne	c1039c8 <uart0_getint+0x30>
			num *= 10;
			num += (n - '0');
		}
		n = uart0_getchar( );
	}
	return num * neg;
 c103a24:	e15b31d2 	ldrsb	r3, [fp, #-18]	; 0xffffffee
 c103a28:	e51b2010 	ldr	r2, [fp, #-16]
 c103a2c:	e0030392 	mul	r3, r2, r3
}
 c103a30:	e1a00003 	mov	r0, r3
 c103a34:	e24bd00c 	sub	sp, fp, #12
 c103a38:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103a3c:	e12fff1e 	bx	lr

0c103a40 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c103a40:	e1a0c00d 	mov	ip, sp
 c103a44:	e92dd800 	push	{fp, ip, lr, pc}
 c103a48:	e24cb004 	sub	fp, ip, #4
 c103a4c:	e24dd008 	sub	sp, sp, #8
	uint32 num = 0;
 c103a50:	e3a03000 	mov	r3, #0
 c103a54:	e50b3010 	str	r3, [fp, #-16]
	char n = uart0_getchar( );
 c103a58:	ebffff1b 	bl	c1036cc <uart0_getchar>
 c103a5c:	e1a03000 	mov	r3, r0
 c103a60:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	while( n != '\n' ) {
 c103a64:	ea000014 	b	c103abc <uart0_gethex+0x7c>
		num *= 16;
 c103a68:	e51b3010 	ldr	r3, [fp, #-16]
 c103a6c:	e1a03203 	lsl	r3, r3, #4
 c103a70:	e50b3010 	str	r3, [fp, #-16]
		if(n - '0' < 10) num += (n - '0');
 c103a74:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103a78:	e2433030 	sub	r3, r3, #48	; 0x30
 c103a7c:	e3530009 	cmp	r3, #9
 c103a80:	ca000005 	bgt	c103a9c <uart0_gethex+0x5c>
 c103a84:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c103a88:	e51b3010 	ldr	r3, [fp, #-16]
 c103a8c:	e0823003 	add	r3, r2, r3
 c103a90:	e2433030 	sub	r3, r3, #48	; 0x30
 c103a94:	e50b3010 	str	r3, [fp, #-16]
 c103a98:	ea000004 	b	c103ab0 <uart0_gethex+0x70>
		else num += ((n - 'A') + 10);
 c103a9c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c103aa0:	e51b3010 	ldr	r3, [fp, #-16]
 c103aa4:	e0823003 	add	r3, r2, r3
 c103aa8:	e2433037 	sub	r3, r3, #55	; 0x37
 c103aac:	e50b3010 	str	r3, [fp, #-16]
		n = uart0_getchar( );
 c103ab0:	ebffff05 	bl	c1036cc <uart0_getchar>
 c103ab4:	e1a03000 	mov	r3, r0
 c103ab8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
uint32 uart0_gethex( void )
{
	uint32 num = 0;
	char n = uart0_getchar( );

	while( n != '\n' ) {
 c103abc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103ac0:	e353000a 	cmp	r3, #10
 c103ac4:	1affffe7 	bne	c103a68 <uart0_gethex+0x28>
		num *= 16;
		if(n - '0' < 10) num += (n - '0');
		else num += ((n - 'A') + 10);
		n = uart0_getchar( );
	}
	return num;
 c103ac8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c103acc:	e1a00003 	mov	r0, r3
 c103ad0:	e24bd00c 	sub	sp, fp, #12
 c103ad4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ad8:	e12fff1e 	bx	lr

0c103adc <adc_init>:
static uint8 state;

extern void isr_ADC_dummy( void );

void adc_init( void )
{
 c103adc:	e1a0c00d 	mov	ip, sp
 c103ae0:	e92dd800 	push	{fp, ip, lr, pc}
 c103ae4:	e24cb004 	sub	fp, ip, #4
    ADCPSR = 0x13;
 c103ae8:	e59f3014 	ldr	r3, [pc, #20]	; c103b04 <adc_init+0x28>
 c103aec:	e3a02013 	mov	r2, #19
 c103af0:	e5832000 	str	r2, [r3]
    adc_off();
 c103af4:	eb000014 	bl	c103b4c <adc_off>
}
 c103af8:	e24bd00c 	sub	sp, fp, #12
 c103afc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103b00:	e12fff1e 	bx	lr
 c103b04:	01d40004 	.word	0x01d40004

0c103b08 <adc_on>:

void adc_on( void )
{
 c103b08:	e1a0c00d 	mov	ip, sp
 c103b0c:	e92dd800 	push	{fp, ip, lr, pc}
 c103b10:	e24cb004 	sub	fp, ip, #4
    ADCCON &= ~(1 << 5);
 c103b14:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c103b18:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c103b1c:	e5922000 	ldr	r2, [r2]
 c103b20:	e3c22020 	bic	r2, r2, #32
 c103b24:	e5832000 	str	r2, [r3]
    sw_delay_ms( 10 );
 c103b28:	e3a0000a 	mov	r0, #10
 c103b2c:	ebfffaef 	bl	c1026f0 <sw_delay_ms>
    state = ON;
 c103b30:	e59f3010 	ldr	r3, [pc, #16]	; c103b48 <adc_on+0x40>
 c103b34:	e3a02001 	mov	r2, #1
 c103b38:	e5c32000 	strb	r2, [r3]
}
 c103b3c:	e24bd00c 	sub	sp, fp, #12
 c103b40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103b44:	e12fff1e 	bx	lr
 c103b48:	0c10f5d2 	.word	0x0c10f5d2

0c103b4c <adc_off>:

void adc_off( void )
{
 c103b4c:	e1a0c00d 	mov	ip, sp
 c103b50:	e92dd800 	push	{fp, ip, lr, pc}
 c103b54:	e24cb004 	sub	fp, ip, #4
	ADCCON |= (1 << 5);
 c103b58:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c103b5c:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c103b60:	e5922000 	ldr	r2, [r2]
 c103b64:	e3822020 	orr	r2, r2, #32
 c103b68:	e5832000 	str	r2, [r3]
	state = OFF;
 c103b6c:	e59f3010 	ldr	r3, [pc, #16]	; c103b84 <adc_off+0x38>
 c103b70:	e3a02000 	mov	r2, #0
 c103b74:	e5c32000 	strb	r2, [r3]
}
 c103b78:	e24bd00c 	sub	sp, fp, #12
 c103b7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103b80:	e12fff1e 	bx	lr
 c103b84:	0c10f5d2 	.word	0x0c10f5d2

0c103b88 <adc_status>:

uint8 adc_status( void )
{
 c103b88:	e1a0c00d 	mov	ip, sp
 c103b8c:	e92dd800 	push	{fp, ip, lr, pc}
 c103b90:	e24cb004 	sub	fp, ip, #4
    return state;
 c103b94:	e59f3010 	ldr	r3, [pc, #16]	; c103bac <adc_status+0x24>
 c103b98:	e5d33000 	ldrb	r3, [r3]
}
 c103b9c:	e1a00003 	mov	r0, r3
 c103ba0:	e24bd00c 	sub	sp, fp, #12
 c103ba4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ba8:	e12fff1e 	bx	lr
 c103bac:	0c10f5d2 	.word	0x0c10f5d2

0c103bb0 <adc_getSample>:

uint16 adc_getSample( uint8 ch )
{
 c103bb0:	e1a0c00d 	mov	ip, sp
 c103bb4:	e92dd800 	push	{fp, ip, lr, pc}
 c103bb8:	e24cb004 	sub	fp, ip, #4
 c103bbc:	e24dd010 	sub	sp, sp, #16
 c103bc0:	e1a03000 	mov	r3, r0
 c103bc4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    uint32 sample;
    uint8 i;
    
    ADCCON = (ADCCON & ~(0x7 << 2)) | (ch << 2);
 c103bc8:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c103bcc:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c103bd0:	e5922000 	ldr	r2, [r2]
 c103bd4:	e3c2101c 	bic	r1, r2, #28
 c103bd8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c103bdc:	e1a02102 	lsl	r2, r2, #2
 c103be0:	e1812002 	orr	r2, r1, r2
 c103be4:	e5832000 	str	r2, [r3]
    sw_delay_ms( 10 );
 c103be8:	e3a0000a 	mov	r0, #10
 c103bec:	ebfffabf 	bl	c1026f0 <sw_delay_ms>
    for( i=0, sample=0; i<5; i++ )
 c103bf0:	e3a03000 	mov	r3, #0
 c103bf4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c103bf8:	e3a03000 	mov	r3, #0
 c103bfc:	e50b3010 	str	r3, [fp, #-16]
 c103c00:	ea00001a 	b	c103c70 <adc_getSample+0xc0>
    {
        ADCCON |= (1 << 0);
 c103c04:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c103c08:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c103c0c:	e5922000 	ldr	r2, [r2]
 c103c10:	e3822001 	orr	r2, r2, #1
 c103c14:	e5832000 	str	r2, [r3]
		while (ADCCON & (1 << 1));
 c103c18:	e1a00000 	nop			; (mov r0, r0)
 c103c1c:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c103c20:	e5933000 	ldr	r3, [r3]
 c103c24:	e2033002 	and	r3, r3, #2
 c103c28:	e3530000 	cmp	r3, #0
 c103c2c:	1afffffa 	bne	c103c1c <adc_getSample+0x6c>
		while (!(ADCCON & (1 << 6)));
 c103c30:	e1a00000 	nop			; (mov r0, r0)
 c103c34:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c103c38:	e5933000 	ldr	r3, [r3]
 c103c3c:	e2033040 	and	r3, r3, #64	; 0x40
 c103c40:	e3530000 	cmp	r3, #0
 c103c44:	0afffffa 	beq	c103c34 <adc_getSample+0x84>
        sample += ADCDAT & 0x3ff;
 c103c48:	e59f3054 	ldr	r3, [pc, #84]	; c103ca4 <adc_getSample+0xf4>
 c103c4c:	e5933000 	ldr	r3, [r3]
 c103c50:	e1a03b03 	lsl	r3, r3, #22
 c103c54:	e1a03b23 	lsr	r3, r3, #22
 c103c58:	e51b2010 	ldr	r2, [fp, #-16]
 c103c5c:	e0823003 	add	r3, r2, r3
 c103c60:	e50b3010 	str	r3, [fp, #-16]
    uint32 sample;
    uint8 i;
    
    ADCCON = (ADCCON & ~(0x7 << 2)) | (ch << 2);
    sw_delay_ms( 10 );
    for( i=0, sample=0; i<5; i++ )
 c103c64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103c68:	e2833001 	add	r3, r3, #1
 c103c6c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c103c70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103c74:	e3530004 	cmp	r3, #4
 c103c78:	9affffe1 	bls	c103c04 <adc_getSample+0x54>
        ADCCON |= (1 << 0);
		while (ADCCON & (1 << 1));
		while (!(ADCCON & (1 << 6)));
        sample += ADCDAT & 0x3ff;
    }
    return sample / 5;
 c103c7c:	e51b2010 	ldr	r2, [fp, #-16]
 c103c80:	e59f3020 	ldr	r3, [pc, #32]	; c103ca8 <adc_getSample+0xf8>
 c103c84:	e0831392 	umull	r1, r3, r2, r3
 c103c88:	e1a03123 	lsr	r3, r3, #2
 c103c8c:	e1a03803 	lsl	r3, r3, #16
 c103c90:	e1a03823 	lsr	r3, r3, #16
}
 c103c94:	e1a00003 	mov	r0, r3
 c103c98:	e24bd00c 	sub	sp, fp, #12
 c103c9c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ca0:	e12fff1e 	bx	lr
 c103ca4:	01d40008 	.word	0x01d40008
 c103ca8:	cccccccd 	.word	0xcccccccd

0c103cac <adc_open>:

void adc_open( void (*isr)(void) )
{
 c103cac:	e1a0c00d 	mov	ip, sp
 c103cb0:	e92dd800 	push	{fp, ip, lr, pc}
 c103cb4:	e24cb004 	sub	fp, ip, #4
 c103cb8:	e24dd008 	sub	sp, sp, #8
 c103cbc:	e50b0010 	str	r0, [fp, #-16]
	pISR_ADC = (uint32) isr;
 c103cc0:	e59f3030 	ldr	r3, [pc, #48]	; c103cf8 <adc_open+0x4c>
 c103cc4:	e51b2010 	ldr	r2, [fp, #-16]
 c103cc8:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_ADC;
 c103ccc:	e59f3028 	ldr	r3, [pc, #40]	; c103cfc <adc_open+0x50>
 c103cd0:	e3a02001 	mov	r2, #1
 c103cd4:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_ADC);
 c103cd8:	e59f3020 	ldr	r3, [pc, #32]	; c103d00 <adc_open+0x54>
 c103cdc:	e59f201c 	ldr	r2, [pc, #28]	; c103d00 <adc_open+0x54>
 c103ce0:	e5922000 	ldr	r2, [r2]
 c103ce4:	e3c22341 	bic	r2, r2, #67108865	; 0x4000001
 c103ce8:	e5832000 	str	r2, [r3]
}
 c103cec:	e24bd00c 	sub	sp, fp, #12
 c103cf0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103cf4:	e12fff1e 	bx	lr
 c103cf8:	0c7fff20 	.word	0x0c7fff20
 c103cfc:	01e00024 	.word	0x01e00024
 c103d00:	01e0000c 	.word	0x01e0000c

0c103d04 <adc_close>:

void adc_close( void )
{
 c103d04:	e1a0c00d 	mov	ip, sp
 c103d08:	e92dd800 	push	{fp, ip, lr, pc}
 c103d0c:	e24cb004 	sub	fp, ip, #4
	INTMSK |= BIT_ADC;
 c103d10:	e59f3024 	ldr	r3, [pc, #36]	; c103d3c <adc_close+0x38>
 c103d14:	e59f2020 	ldr	r2, [pc, #32]	; c103d3c <adc_close+0x38>
 c103d18:	e5922000 	ldr	r2, [r2]
 c103d1c:	e3822001 	orr	r2, r2, #1
 c103d20:	e5832000 	str	r2, [r3]
	pISR_BDMA0 = isr_ADC_dummy;
 c103d24:	e59f3014 	ldr	r3, [pc, #20]	; c103d40 <adc_close+0x3c>
 c103d28:	e59f2014 	ldr	r2, [pc, #20]	; c103d44 <adc_close+0x40>
 c103d2c:	e5832000 	str	r2, [r3]
}
 c103d30:	e24bd00c 	sub	sp, fp, #12
 c103d34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103d38:	e12fff1e 	bx	lr
 c103d3c:	01e0000c 	.word	0x01e0000c
 c103d40:	0c7fff64 	.word	0x0c7fff64
 c103d44:	0c101f8c 	.word	0x0c101f8c

0c103d48 <__aeabi_uidiv>:
 c103d48:	e2512001 	subs	r2, r1, #1
 c103d4c:	012fff1e 	bxeq	lr
 c103d50:	3a000036 	bcc	c103e30 <__aeabi_uidiv+0xe8>
 c103d54:	e1500001 	cmp	r0, r1
 c103d58:	9a000022 	bls	c103de8 <__aeabi_uidiv+0xa0>
 c103d5c:	e1110002 	tst	r1, r2
 c103d60:	0a000023 	beq	c103df4 <__aeabi_uidiv+0xac>
 c103d64:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c103d68:	01a01181 	lsleq	r1, r1, #3
 c103d6c:	03a03008 	moveq	r3, #8
 c103d70:	13a03001 	movne	r3, #1
 c103d74:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c103d78:	31510000 	cmpcc	r1, r0
 c103d7c:	31a01201 	lslcc	r1, r1, #4
 c103d80:	31a03203 	lslcc	r3, r3, #4
 c103d84:	3afffffa 	bcc	c103d74 <__aeabi_uidiv+0x2c>
 c103d88:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c103d8c:	31510000 	cmpcc	r1, r0
 c103d90:	31a01081 	lslcc	r1, r1, #1
 c103d94:	31a03083 	lslcc	r3, r3, #1
 c103d98:	3afffffa 	bcc	c103d88 <__aeabi_uidiv+0x40>
 c103d9c:	e3a02000 	mov	r2, #0
 c103da0:	e1500001 	cmp	r0, r1
 c103da4:	20400001 	subcs	r0, r0, r1
 c103da8:	21822003 	orrcs	r2, r2, r3
 c103dac:	e15000a1 	cmp	r0, r1, lsr #1
 c103db0:	204000a1 	subcs	r0, r0, r1, lsr #1
 c103db4:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c103db8:	e1500121 	cmp	r0, r1, lsr #2
 c103dbc:	20400121 	subcs	r0, r0, r1, lsr #2
 c103dc0:	21822123 	orrcs	r2, r2, r3, lsr #2
 c103dc4:	e15001a1 	cmp	r0, r1, lsr #3
 c103dc8:	204001a1 	subcs	r0, r0, r1, lsr #3
 c103dcc:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c103dd0:	e3500000 	cmp	r0, #0
 c103dd4:	11b03223 	lsrsne	r3, r3, #4
 c103dd8:	11a01221 	lsrne	r1, r1, #4
 c103ddc:	1affffef 	bne	c103da0 <__aeabi_uidiv+0x58>
 c103de0:	e1a00002 	mov	r0, r2
 c103de4:	e12fff1e 	bx	lr
 c103de8:	03a00001 	moveq	r0, #1
 c103dec:	13a00000 	movne	r0, #0
 c103df0:	e12fff1e 	bx	lr
 c103df4:	e3510801 	cmp	r1, #65536	; 0x10000
 c103df8:	21a01821 	lsrcs	r1, r1, #16
 c103dfc:	23a02010 	movcs	r2, #16
 c103e00:	33a02000 	movcc	r2, #0
 c103e04:	e3510c01 	cmp	r1, #256	; 0x100
 c103e08:	21a01421 	lsrcs	r1, r1, #8
 c103e0c:	22822008 	addcs	r2, r2, #8
 c103e10:	e3510010 	cmp	r1, #16
 c103e14:	21a01221 	lsrcs	r1, r1, #4
 c103e18:	22822004 	addcs	r2, r2, #4
 c103e1c:	e3510004 	cmp	r1, #4
 c103e20:	82822003 	addhi	r2, r2, #3
 c103e24:	908220a1 	addls	r2, r2, r1, lsr #1
 c103e28:	e1a00230 	lsr	r0, r0, r2
 c103e2c:	e12fff1e 	bx	lr
 c103e30:	e3500000 	cmp	r0, #0
 c103e34:	13e00000 	mvnne	r0, #0
 c103e38:	ea000059 	b	c103fa4 <__aeabi_idiv0>

0c103e3c <__aeabi_uidivmod>:
 c103e3c:	e3510000 	cmp	r1, #0
 c103e40:	0afffffa 	beq	c103e30 <__aeabi_uidiv+0xe8>
 c103e44:	e92d4003 	push	{r0, r1, lr}
 c103e48:	ebffffbe 	bl	c103d48 <__aeabi_uidiv>
 c103e4c:	e8bd4006 	pop	{r1, r2, lr}
 c103e50:	e0030092 	mul	r3, r2, r0
 c103e54:	e0411003 	sub	r1, r1, r3
 c103e58:	e12fff1e 	bx	lr

0c103e5c <__aeabi_idiv>:
 c103e5c:	e3510000 	cmp	r1, #0
 c103e60:	0a000043 	beq	c103f74 <.divsi3_skip_div0_test+0x110>

0c103e64 <.divsi3_skip_div0_test>:
 c103e64:	e020c001 	eor	ip, r0, r1
 c103e68:	42611000 	rsbmi	r1, r1, #0
 c103e6c:	e2512001 	subs	r2, r1, #1
 c103e70:	0a000027 	beq	c103f14 <.divsi3_skip_div0_test+0xb0>
 c103e74:	e1b03000 	movs	r3, r0
 c103e78:	42603000 	rsbmi	r3, r0, #0
 c103e7c:	e1530001 	cmp	r3, r1
 c103e80:	9a000026 	bls	c103f20 <.divsi3_skip_div0_test+0xbc>
 c103e84:	e1110002 	tst	r1, r2
 c103e88:	0a000028 	beq	c103f30 <.divsi3_skip_div0_test+0xcc>
 c103e8c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c103e90:	01a01181 	lsleq	r1, r1, #3
 c103e94:	03a02008 	moveq	r2, #8
 c103e98:	13a02001 	movne	r2, #1
 c103e9c:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c103ea0:	31510003 	cmpcc	r1, r3
 c103ea4:	31a01201 	lslcc	r1, r1, #4
 c103ea8:	31a02202 	lslcc	r2, r2, #4
 c103eac:	3afffffa 	bcc	c103e9c <.divsi3_skip_div0_test+0x38>
 c103eb0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c103eb4:	31510003 	cmpcc	r1, r3
 c103eb8:	31a01081 	lslcc	r1, r1, #1
 c103ebc:	31a02082 	lslcc	r2, r2, #1
 c103ec0:	3afffffa 	bcc	c103eb0 <.divsi3_skip_div0_test+0x4c>
 c103ec4:	e3a00000 	mov	r0, #0
 c103ec8:	e1530001 	cmp	r3, r1
 c103ecc:	20433001 	subcs	r3, r3, r1
 c103ed0:	21800002 	orrcs	r0, r0, r2
 c103ed4:	e15300a1 	cmp	r3, r1, lsr #1
 c103ed8:	204330a1 	subcs	r3, r3, r1, lsr #1
 c103edc:	218000a2 	orrcs	r0, r0, r2, lsr #1
 c103ee0:	e1530121 	cmp	r3, r1, lsr #2
 c103ee4:	20433121 	subcs	r3, r3, r1, lsr #2
 c103ee8:	21800122 	orrcs	r0, r0, r2, lsr #2
 c103eec:	e15301a1 	cmp	r3, r1, lsr #3
 c103ef0:	204331a1 	subcs	r3, r3, r1, lsr #3
 c103ef4:	218001a2 	orrcs	r0, r0, r2, lsr #3
 c103ef8:	e3530000 	cmp	r3, #0
 c103efc:	11b02222 	lsrsne	r2, r2, #4
 c103f00:	11a01221 	lsrne	r1, r1, #4
 c103f04:	1affffef 	bne	c103ec8 <.divsi3_skip_div0_test+0x64>
 c103f08:	e35c0000 	cmp	ip, #0
 c103f0c:	42600000 	rsbmi	r0, r0, #0
 c103f10:	e12fff1e 	bx	lr
 c103f14:	e13c0000 	teq	ip, r0
 c103f18:	42600000 	rsbmi	r0, r0, #0
 c103f1c:	e12fff1e 	bx	lr
 c103f20:	33a00000 	movcc	r0, #0
 c103f24:	01a00fcc 	asreq	r0, ip, #31
 c103f28:	03800001 	orreq	r0, r0, #1
 c103f2c:	e12fff1e 	bx	lr
 c103f30:	e3510801 	cmp	r1, #65536	; 0x10000
 c103f34:	21a01821 	lsrcs	r1, r1, #16
 c103f38:	23a02010 	movcs	r2, #16
 c103f3c:	33a02000 	movcc	r2, #0
 c103f40:	e3510c01 	cmp	r1, #256	; 0x100
 c103f44:	21a01421 	lsrcs	r1, r1, #8
 c103f48:	22822008 	addcs	r2, r2, #8
 c103f4c:	e3510010 	cmp	r1, #16
 c103f50:	21a01221 	lsrcs	r1, r1, #4
 c103f54:	22822004 	addcs	r2, r2, #4
 c103f58:	e3510004 	cmp	r1, #4
 c103f5c:	82822003 	addhi	r2, r2, #3
 c103f60:	908220a1 	addls	r2, r2, r1, lsr #1
 c103f64:	e35c0000 	cmp	ip, #0
 c103f68:	e1a00233 	lsr	r0, r3, r2
 c103f6c:	42600000 	rsbmi	r0, r0, #0
 c103f70:	e12fff1e 	bx	lr
 c103f74:	e3500000 	cmp	r0, #0
 c103f78:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 c103f7c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 c103f80:	ea000007 	b	c103fa4 <__aeabi_idiv0>

0c103f84 <__aeabi_idivmod>:
 c103f84:	e3510000 	cmp	r1, #0
 c103f88:	0afffff9 	beq	c103f74 <.divsi3_skip_div0_test+0x110>
 c103f8c:	e92d4003 	push	{r0, r1, lr}
 c103f90:	ebffffb3 	bl	c103e64 <.divsi3_skip_div0_test>
 c103f94:	e8bd4006 	pop	{r1, r2, lr}
 c103f98:	e0030092 	mul	r3, r2, r0
 c103f9c:	e0411003 	sub	r1, r1, r3
 c103fa0:	e12fff1e 	bx	lr

0c103fa4 <__aeabi_idiv0>:
 c103fa4:	e12fff1e 	bx	lr

0c103fa8 <__aeabi_uldivmod>:
 c103fa8:	e3530000 	cmp	r3, #0
 c103fac:	03520000 	cmpeq	r2, #0
 c103fb0:	1a000004 	bne	c103fc8 <__aeabi_uldivmod+0x20>
 c103fb4:	e3510000 	cmp	r1, #0
 c103fb8:	03500000 	cmpeq	r0, #0
 c103fbc:	13e01000 	mvnne	r1, #0
 c103fc0:	13e00000 	mvnne	r0, #0
 c103fc4:	eafffff6 	b	c103fa4 <__aeabi_idiv0>
 c103fc8:	e24dd008 	sub	sp, sp, #8
 c103fcc:	e92d6000 	push	{sp, lr}
 c103fd0:	eb000013 	bl	c104024 <__gnu_uldivmod_helper>
 c103fd4:	e59de004 	ldr	lr, [sp, #4]
 c103fd8:	e28dd008 	add	sp, sp, #8
 c103fdc:	e8bd000c 	pop	{r2, r3}
 c103fe0:	e12fff1e 	bx	lr

0c103fe4 <__gnu_ldivmod_helper>:
 c103fe4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c103fe8:	e1a04002 	mov	r4, r2
 c103fec:	e1a07003 	mov	r7, r3
 c103ff0:	e1a05000 	mov	r5, r0
 c103ff4:	e1a06001 	mov	r6, r1
 c103ff8:	eb000019 	bl	c104064 <__divdi3>
 c103ffc:	e0070790 	mul	r7, r0, r7
 c104000:	e0832490 	umull	r2, r3, r0, r4
 c104004:	e0247491 	mla	r4, r1, r4, r7
 c104008:	e0843003 	add	r3, r4, r3
 c10400c:	e0555002 	subs	r5, r5, r2
 c104010:	e0c66003 	sbc	r6, r6, r3
 c104014:	e59d3018 	ldr	r3, [sp, #24]
 c104018:	e8830060 	stm	r3, {r5, r6}
 c10401c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c104020:	e12fff1e 	bx	lr

0c104024 <__gnu_uldivmod_helper>:
 c104024:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c104028:	e1a04002 	mov	r4, r2
 c10402c:	e1a07003 	mov	r7, r3
 c104030:	e1a05000 	mov	r5, r0
 c104034:	e1a06001 	mov	r6, r1
 c104038:	eb000133 	bl	c10450c <__udivdi3>
 c10403c:	e0070790 	mul	r7, r0, r7
 c104040:	e0832490 	umull	r2, r3, r0, r4
 c104044:	e0247491 	mla	r4, r1, r4, r7
 c104048:	e0843003 	add	r3, r4, r3
 c10404c:	e0555002 	subs	r5, r5, r2
 c104050:	e0c66003 	sbc	r6, r6, r3
 c104054:	e59d3018 	ldr	r3, [sp, #24]
 c104058:	e8830060 	stm	r3, {r5, r6}
 c10405c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c104060:	e12fff1e 	bx	lr

0c104064 <__divdi3>:
 c104064:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c104068:	e3510000 	cmp	r1, #0
 c10406c:	e24dd014 	sub	sp, sp, #20
 c104070:	e1a0c003 	mov	ip, r3
 c104074:	a3a07000 	movge	r7, #0
 c104078:	ba000094 	blt	c1042d0 <__divdi3+0x26c>
 c10407c:	e35c0000 	cmp	ip, #0
 c104080:	ba00008e 	blt	c1042c0 <__divdi3+0x25c>
 c104084:	e253a000 	subs	sl, r3, #0
 c104088:	e1a0b000 	mov	fp, r0
 c10408c:	e1a08001 	mov	r8, r1
 c104090:	e1a09002 	mov	r9, r2
 c104094:	e1a04002 	mov	r4, r2
 c104098:	e1a05000 	mov	r5, r0
 c10409c:	e1a06001 	mov	r6, r1
 c1040a0:	1a00003e 	bne	c1041a0 <__divdi3+0x13c>
 c1040a4:	e1520001 	cmp	r2, r1
 c1040a8:	9a00004c 	bls	c1041e0 <__divdi3+0x17c>
 c1040ac:	e1a00002 	mov	r0, r2
 c1040b0:	eb000222 	bl	c104940 <__clzsi2>
 c1040b4:	e3500000 	cmp	r0, #0
 c1040b8:	12603020 	rsbne	r3, r0, #32
 c1040bc:	11a0333b 	lsrne	r3, fp, r3
 c1040c0:	11a04019 	lslne	r4, r9, r0
 c1040c4:	11836018 	orrne	r6, r3, r8, lsl r0
 c1040c8:	e1a09824 	lsr	r9, r4, #16
 c1040cc:	11a0501b 	lslne	r5, fp, r0
 c1040d0:	e1a01009 	mov	r1, r9
 c1040d4:	e1a00006 	mov	r0, r6
 c1040d8:	ebffff1a 	bl	c103d48 <__aeabi_uidiv>
 c1040dc:	e1a01009 	mov	r1, r9
 c1040e0:	e1a0a000 	mov	sl, r0
 c1040e4:	e1a00006 	mov	r0, r6
 c1040e8:	ebffff53 	bl	c103e3c <__aeabi_uidivmod>
 c1040ec:	e1a08804 	lsl	r8, r4, #16
 c1040f0:	e1a08828 	lsr	r8, r8, #16
 c1040f4:	e0030a98 	mul	r3, r8, sl
 c1040f8:	e1a0b825 	lsr	fp, r5, #16
 c1040fc:	e18bb801 	orr	fp, fp, r1, lsl #16
 c104100:	e153000b 	cmp	r3, fp
 c104104:	9a000005 	bls	c104120 <__divdi3+0xbc>
 c104108:	e09bb004 	adds	fp, fp, r4
 c10410c:	e24aa001 	sub	sl, sl, #1
 c104110:	2a000002 	bcs	c104120 <__divdi3+0xbc>
 c104114:	e153000b 	cmp	r3, fp
 c104118:	824aa001 	subhi	sl, sl, #1
 c10411c:	808bb004 	addhi	fp, fp, r4
 c104120:	e063b00b 	rsb	fp, r3, fp
 c104124:	e1a01009 	mov	r1, r9
 c104128:	e1a0000b 	mov	r0, fp
 c10412c:	ebffff05 	bl	c103d48 <__aeabi_uidiv>
 c104130:	e1a01009 	mov	r1, r9
 c104134:	e1a06000 	mov	r6, r0
 c104138:	e1a0000b 	mov	r0, fp
 c10413c:	ebffff3e 	bl	c103e3c <__aeabi_uidivmod>
 c104140:	e0080896 	mul	r8, r6, r8
 c104144:	e1a00805 	lsl	r0, r5, #16
 c104148:	e1a05820 	lsr	r5, r0, #16
 c10414c:	e1855801 	orr	r5, r5, r1, lsl #16
 c104150:	e1580005 	cmp	r8, r5
 c104154:	9a000004 	bls	c10416c <__divdi3+0x108>
 c104158:	e0955004 	adds	r5, r5, r4
 c10415c:	e2466001 	sub	r6, r6, #1
 c104160:	2a000001 	bcs	c10416c <__divdi3+0x108>
 c104164:	e1580005 	cmp	r8, r5
 c104168:	82466001 	subhi	r6, r6, #1
 c10416c:	e186680a 	orr	r6, r6, sl, lsl #16
 c104170:	e3a09000 	mov	r9, #0
 c104174:	e3570000 	cmp	r7, #0
 c104178:	e1a03006 	mov	r3, r6
 c10417c:	e1a04009 	mov	r4, r9
 c104180:	0a000001 	beq	c10418c <__divdi3+0x128>
 c104184:	e2733000 	rsbs	r3, r3, #0
 c104188:	e2e44000 	rsc	r4, r4, #0
 c10418c:	e1a00003 	mov	r0, r3
 c104190:	e1a01004 	mov	r1, r4
 c104194:	e28dd014 	add	sp, sp, #20
 c104198:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10419c:	e12fff1e 	bx	lr
 c1041a0:	e15a0001 	cmp	sl, r1
 c1041a4:	83a09000 	movhi	r9, #0
 c1041a8:	81a06009 	movhi	r6, r9
 c1041ac:	8afffff0 	bhi	c104174 <__divdi3+0x110>
 c1041b0:	e1a00003 	mov	r0, r3
 c1041b4:	eb0001e1 	bl	c104940 <__clzsi2>
 c1041b8:	e2504000 	subs	r4, r0, #0
 c1041bc:	1a00007a 	bne	c1043ac <__divdi3+0x348>
 c1041c0:	e15a0008 	cmp	sl, r8
 c1041c4:	2159000b 	cmpcs	r9, fp
 c1041c8:	83a09000 	movhi	r9, #0
 c1041cc:	93a09001 	movls	r9, #1
 c1041d0:	93a06001 	movls	r6, #1
 c1041d4:	91a09004 	movls	r9, r4
 c1041d8:	81a06009 	movhi	r6, r9
 c1041dc:	eaffffe4 	b	c104174 <__divdi3+0x110>
 c1041e0:	e3520000 	cmp	r2, #0
 c1041e4:	1a000003 	bne	c1041f8 <__divdi3+0x194>
 c1041e8:	e3a00001 	mov	r0, #1
 c1041ec:	e1a01002 	mov	r1, r2
 c1041f0:	ebfffed4 	bl	c103d48 <__aeabi_uidiv>
 c1041f4:	e1a04000 	mov	r4, r0
 c1041f8:	e1a00004 	mov	r0, r4
 c1041fc:	eb0001cf 	bl	c104940 <__clzsi2>
 c104200:	e2503000 	subs	r3, r0, #0
 c104204:	1a000035 	bne	c1042e0 <__divdi3+0x27c>
 c104208:	e3a01001 	mov	r1, #1
 c10420c:	e1a09804 	lsl	r9, r4, #16
 c104210:	e58d1008 	str	r1, [sp, #8]
 c104214:	e0646006 	rsb	r6, r4, r6
 c104218:	e1a08824 	lsr	r8, r4, #16
 c10421c:	e1a09829 	lsr	r9, r9, #16
 c104220:	e1a01008 	mov	r1, r8
 c104224:	e1a00006 	mov	r0, r6
 c104228:	ebfffec6 	bl	c103d48 <__aeabi_uidiv>
 c10422c:	e1a01008 	mov	r1, r8
 c104230:	e1a0a000 	mov	sl, r0
 c104234:	e1a00006 	mov	r0, r6
 c104238:	ebfffeff 	bl	c103e3c <__aeabi_uidivmod>
 c10423c:	e0030a99 	mul	r3, r9, sl
 c104240:	e1a0c825 	lsr	ip, r5, #16
 c104244:	e18cb801 	orr	fp, ip, r1, lsl #16
 c104248:	e153000b 	cmp	r3, fp
 c10424c:	9a000005 	bls	c104268 <__divdi3+0x204>
 c104250:	e09bb004 	adds	fp, fp, r4
 c104254:	e24aa001 	sub	sl, sl, #1
 c104258:	2a000002 	bcs	c104268 <__divdi3+0x204>
 c10425c:	e153000b 	cmp	r3, fp
 c104260:	824aa001 	subhi	sl, sl, #1
 c104264:	808bb004 	addhi	fp, fp, r4
 c104268:	e063b00b 	rsb	fp, r3, fp
 c10426c:	e1a01008 	mov	r1, r8
 c104270:	e1a0000b 	mov	r0, fp
 c104274:	ebfffeb3 	bl	c103d48 <__aeabi_uidiv>
 c104278:	e1a01008 	mov	r1, r8
 c10427c:	e1a06000 	mov	r6, r0
 c104280:	e1a0000b 	mov	r0, fp
 c104284:	ebfffeec 	bl	c103e3c <__aeabi_uidivmod>
 c104288:	e0090996 	mul	r9, r6, r9
 c10428c:	e1a00805 	lsl	r0, r5, #16
 c104290:	e1a05820 	lsr	r5, r0, #16
 c104294:	e1855801 	orr	r5, r5, r1, lsl #16
 c104298:	e1590005 	cmp	r9, r5
 c10429c:	9a000004 	bls	c1042b4 <__divdi3+0x250>
 c1042a0:	e0955004 	adds	r5, r5, r4
 c1042a4:	e2466001 	sub	r6, r6, #1
 c1042a8:	2a000001 	bcs	c1042b4 <__divdi3+0x250>
 c1042ac:	e1590005 	cmp	r9, r5
 c1042b0:	82466001 	subhi	r6, r6, #1
 c1042b4:	e186680a 	orr	r6, r6, sl, lsl #16
 c1042b8:	e59d9008 	ldr	r9, [sp, #8]
 c1042bc:	eaffffac 	b	c104174 <__divdi3+0x110>
 c1042c0:	e1e07007 	mvn	r7, r7
 c1042c4:	e2722000 	rsbs	r2, r2, #0
 c1042c8:	e2e33000 	rsc	r3, r3, #0
 c1042cc:	eaffff6c 	b	c104084 <__divdi3+0x20>
 c1042d0:	e2700000 	rsbs	r0, r0, #0
 c1042d4:	e2e11000 	rsc	r1, r1, #0
 c1042d8:	e3e07000 	mvn	r7, #0
 c1042dc:	eaffff66 	b	c10407c <__divdi3+0x18>
 c1042e0:	e2638020 	rsb	r8, r3, #32
 c1042e4:	e1a0b835 	lsr	fp, r5, r8
 c1042e8:	e1a04314 	lsl	r4, r4, r3
 c1042ec:	e1a0a836 	lsr	sl, r6, r8
 c1042f0:	e18be316 	orr	lr, fp, r6, lsl r3
 c1042f4:	e1a08824 	lsr	r8, r4, #16
 c1042f8:	e1a0c804 	lsl	ip, r4, #16
 c1042fc:	e1a01008 	mov	r1, r8
 c104300:	e1a0000a 	mov	r0, sl
 c104304:	e1a0982c 	lsr	r9, ip, #16
 c104308:	e1a05315 	lsl	r5, r5, r3
 c10430c:	e58de008 	str	lr, [sp, #8]
 c104310:	ebfffe8c 	bl	c103d48 <__aeabi_uidiv>
 c104314:	e1a01008 	mov	r1, r8
 c104318:	e1a0b000 	mov	fp, r0
 c10431c:	e1a0000a 	mov	r0, sl
 c104320:	ebfffec5 	bl	c103e3c <__aeabi_uidivmod>
 c104324:	e0030b99 	mul	r3, r9, fp
 c104328:	e59d2008 	ldr	r2, [sp, #8]
 c10432c:	e1a06822 	lsr	r6, r2, #16
 c104330:	e1866801 	orr	r6, r6, r1, lsl #16
 c104334:	e1530006 	cmp	r3, r6
 c104338:	9a000002 	bls	c104348 <__divdi3+0x2e4>
 c10433c:	e0966004 	adds	r6, r6, r4
 c104340:	e24bb001 	sub	fp, fp, #1
 c104344:	3a00006c 	bcc	c1044fc <__divdi3+0x498>
 c104348:	e0636006 	rsb	r6, r3, r6
 c10434c:	e1a01008 	mov	r1, r8
 c104350:	e1a00006 	mov	r0, r6
 c104354:	ebfffe7b 	bl	c103d48 <__aeabi_uidiv>
 c104358:	e1a01008 	mov	r1, r8
 c10435c:	e1a0a000 	mov	sl, r0
 c104360:	e1a00006 	mov	r0, r6
 c104364:	ebfffeb4 	bl	c103e3c <__aeabi_uidivmod>
 c104368:	e0030a99 	mul	r3, r9, sl
 c10436c:	e59d2008 	ldr	r2, [sp, #8]
 c104370:	e1a06802 	lsl	r6, r2, #16
 c104374:	e1a00826 	lsr	r0, r6, #16
 c104378:	e1806801 	orr	r6, r0, r1, lsl #16
 c10437c:	e1530006 	cmp	r3, r6
 c104380:	9a000005 	bls	c10439c <__divdi3+0x338>
 c104384:	e0966004 	adds	r6, r6, r4
 c104388:	e24aa001 	sub	sl, sl, #1
 c10438c:	2a000002 	bcs	c10439c <__divdi3+0x338>
 c104390:	e1530006 	cmp	r3, r6
 c104394:	824aa001 	subhi	sl, sl, #1
 c104398:	80866004 	addhi	r6, r6, r4
 c10439c:	e0636006 	rsb	r6, r3, r6
 c1043a0:	e18a380b 	orr	r3, sl, fp, lsl #16
 c1043a4:	e58d3008 	str	r3, [sp, #8]
 c1043a8:	eaffff9c 	b	c104220 <__divdi3+0x1bc>
 c1043ac:	e2641020 	rsb	r1, r4, #32
 c1043b0:	e1a00139 	lsr	r0, r9, r1
 c1043b4:	e1a0213b 	lsr	r2, fp, r1
 c1043b8:	e180a41a 	orr	sl, r0, sl, lsl r4
 c1043bc:	e1a06138 	lsr	r6, r8, r1
 c1043c0:	e1828418 	orr	r8, r2, r8, lsl r4
 c1043c4:	e1a0380a 	lsl	r3, sl, #16
 c1043c8:	e1a0b82a 	lsr	fp, sl, #16
 c1043cc:	e1a0e823 	lsr	lr, r3, #16
 c1043d0:	e1a0100b 	mov	r1, fp
 c1043d4:	e1a00006 	mov	r0, r6
 c1043d8:	e58d8008 	str	r8, [sp, #8]
 c1043dc:	e58de00c 	str	lr, [sp, #12]
 c1043e0:	ebfffe58 	bl	c103d48 <__aeabi_uidiv>
 c1043e4:	e1a0100b 	mov	r1, fp
 c1043e8:	e1a08000 	mov	r8, r0
 c1043ec:	e1a00006 	mov	r0, r6
 c1043f0:	ebfffe91 	bl	c103e3c <__aeabi_uidivmod>
 c1043f4:	e59dc00c 	ldr	ip, [sp, #12]
 c1043f8:	e002089c 	mul	r2, ip, r8
 c1043fc:	e59d3008 	ldr	r3, [sp, #8]
 c104400:	e1a06823 	lsr	r6, r3, #16
 c104404:	e1861801 	orr	r1, r6, r1, lsl #16
 c104408:	e1520001 	cmp	r2, r1
 c10440c:	e1a03419 	lsl	r3, r9, r4
 c104410:	9a000002 	bls	c104420 <__divdi3+0x3bc>
 c104414:	e091100a 	adds	r1, r1, sl
 c104418:	e2488001 	sub	r8, r8, #1
 c10441c:	3a000032 	bcc	c1044ec <__divdi3+0x488>
 c104420:	e0629001 	rsb	r9, r2, r1
 c104424:	e1a00009 	mov	r0, r9
 c104428:	e1a0100b 	mov	r1, fp
 c10442c:	e58d3004 	str	r3, [sp, #4]
 c104430:	ebfffe44 	bl	c103d48 <__aeabi_uidiv>
 c104434:	e1a0100b 	mov	r1, fp
 c104438:	e1a06000 	mov	r6, r0
 c10443c:	e1a00009 	mov	r0, r9
 c104440:	ebfffe7d 	bl	c103e3c <__aeabi_uidivmod>
 c104444:	e59d000c 	ldr	r0, [sp, #12]
 c104448:	e0020690 	mul	r2, r0, r6
 c10444c:	e59d3008 	ldr	r3, [sp, #8]
 c104450:	e1a0c803 	lsl	ip, r3, #16
 c104454:	e1a0982c 	lsr	r9, ip, #16
 c104458:	e1890801 	orr	r0, r9, r1, lsl #16
 c10445c:	e1520000 	cmp	r2, r0
 c104460:	e59d3004 	ldr	r3, [sp, #4]
 c104464:	9a000002 	bls	c104474 <__divdi3+0x410>
 c104468:	e090000a 	adds	r0, r0, sl
 c10446c:	e2466001 	sub	r6, r6, #1
 c104470:	3a000019 	bcc	c1044dc <__divdi3+0x478>
 c104474:	e062e000 	rsb	lr, r2, r0
 c104478:	e1866808 	orr	r6, r6, r8, lsl #16
 c10447c:	e1a02826 	lsr	r2, r6, #16
 c104480:	e1a01823 	lsr	r1, r3, #16
 c104484:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c104488:	e1c39801 	bic	r9, r3, r1, lsl #16
 c10448c:	e003099c 	mul	r3, ip, r9
 c104490:	e0090992 	mul	r9, r2, r9
 c104494:	e00c0c91 	mul	ip, r1, ip
 c104498:	e0010192 	mul	r1, r2, r1
 c10449c:	e099c00c 	adds	ip, r9, ip
 c1044a0:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c1044a4:	e093380c 	adds	r3, r3, ip, lsl #16
 c1044a8:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c1044ac:	e15e0001 	cmp	lr, r1
 c1044b0:	3a000006 	bcc	c1044d0 <__divdi3+0x46c>
 c1044b4:	13a02000 	movne	r2, #0
 c1044b8:	03a02001 	moveq	r2, #1
 c1044bc:	e1530415 	cmp	r3, r5, lsl r4
 c1044c0:	93a09000 	movls	r9, #0
 c1044c4:	82029001 	andhi	r9, r2, #1
 c1044c8:	e3590000 	cmp	r9, #0
 c1044cc:	0affff28 	beq	c104174 <__divdi3+0x110>
 c1044d0:	e2466001 	sub	r6, r6, #1
 c1044d4:	e3a09000 	mov	r9, #0
 c1044d8:	eaffff25 	b	c104174 <__divdi3+0x110>
 c1044dc:	e1520000 	cmp	r2, r0
 c1044e0:	82466001 	subhi	r6, r6, #1
 c1044e4:	8080000a 	addhi	r0, r0, sl
 c1044e8:	eaffffe1 	b	c104474 <__divdi3+0x410>
 c1044ec:	e1520001 	cmp	r2, r1
 c1044f0:	82488001 	subhi	r8, r8, #1
 c1044f4:	8081100a 	addhi	r1, r1, sl
 c1044f8:	eaffffc8 	b	c104420 <__divdi3+0x3bc>
 c1044fc:	e1530006 	cmp	r3, r6
 c104500:	824bb001 	subhi	fp, fp, #1
 c104504:	80866004 	addhi	r6, r6, r4
 c104508:	eaffff8e 	b	c104348 <__divdi3+0x2e4>

0c10450c <__udivdi3>:
 c10450c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c104510:	e2538000 	subs	r8, r3, #0
 c104514:	e24dd00c 	sub	sp, sp, #12
 c104518:	e1a05000 	mov	r5, r0
 c10451c:	e1a04001 	mov	r4, r1
 c104520:	e1a06002 	mov	r6, r2
 c104524:	e1a0a002 	mov	sl, r2
 c104528:	e1a0b000 	mov	fp, r0
 c10452c:	e1a07001 	mov	r7, r1
 c104530:	1a000037 	bne	c104614 <__udivdi3+0x108>
 c104534:	e1520001 	cmp	r2, r1
 c104538:	9a000045 	bls	c104654 <__udivdi3+0x148>
 c10453c:	e1a00002 	mov	r0, r2
 c104540:	eb0000fe 	bl	c104940 <__clzsi2>
 c104544:	e3500000 	cmp	r0, #0
 c104548:	12603020 	rsbne	r3, r0, #32
 c10454c:	11a03335 	lsrne	r3, r5, r3
 c104550:	11a0a016 	lslne	sl, r6, r0
 c104554:	11837014 	orrne	r7, r3, r4, lsl r0
 c104558:	e1a0482a 	lsr	r4, sl, #16
 c10455c:	11a0b015 	lslne	fp, r5, r0
 c104560:	e1a01004 	mov	r1, r4
 c104564:	e1a00007 	mov	r0, r7
 c104568:	ebfffdf6 	bl	c103d48 <__aeabi_uidiv>
 c10456c:	e1a01004 	mov	r1, r4
 c104570:	e1a08000 	mov	r8, r0
 c104574:	e1a00007 	mov	r0, r7
 c104578:	ebfffe2f 	bl	c103e3c <__aeabi_uidivmod>
 c10457c:	e1a0680a 	lsl	r6, sl, #16
 c104580:	e1a06826 	lsr	r6, r6, #16
 c104584:	e0030896 	mul	r3, r6, r8
 c104588:	e1a0782b 	lsr	r7, fp, #16
 c10458c:	e1877801 	orr	r7, r7, r1, lsl #16
 c104590:	e1530007 	cmp	r3, r7
 c104594:	9a000005 	bls	c1045b0 <__udivdi3+0xa4>
 c104598:	e097700a 	adds	r7, r7, sl
 c10459c:	e2488001 	sub	r8, r8, #1
 c1045a0:	2a000002 	bcs	c1045b0 <__udivdi3+0xa4>
 c1045a4:	e1530007 	cmp	r3, r7
 c1045a8:	82488001 	subhi	r8, r8, #1
 c1045ac:	8087700a 	addhi	r7, r7, sl
 c1045b0:	e0637007 	rsb	r7, r3, r7
 c1045b4:	e1a01004 	mov	r1, r4
 c1045b8:	e1a00007 	mov	r0, r7
 c1045bc:	ebfffde1 	bl	c103d48 <__aeabi_uidiv>
 c1045c0:	e1a01004 	mov	r1, r4
 c1045c4:	e1a05000 	mov	r5, r0
 c1045c8:	e1a00007 	mov	r0, r7
 c1045cc:	ebfffe1a 	bl	c103e3c <__aeabi_uidivmod>
 c1045d0:	e0060695 	mul	r6, r5, r6
 c1045d4:	e1a0080b 	lsl	r0, fp, #16
 c1045d8:	e1a0b820 	lsr	fp, r0, #16
 c1045dc:	e18bb801 	orr	fp, fp, r1, lsl #16
 c1045e0:	e156000b 	cmp	r6, fp
 c1045e4:	9a000004 	bls	c1045fc <__udivdi3+0xf0>
 c1045e8:	e09bb00a 	adds	fp, fp, sl
 c1045ec:	e2455001 	sub	r5, r5, #1
 c1045f0:	2a000001 	bcs	c1045fc <__udivdi3+0xf0>
 c1045f4:	e156000b 	cmp	r6, fp
 c1045f8:	82455001 	subhi	r5, r5, #1
 c1045fc:	e1858808 	orr	r8, r5, r8, lsl #16
 c104600:	e3a01000 	mov	r1, #0
 c104604:	e1a00008 	mov	r0, r8
 c104608:	e28dd00c 	add	sp, sp, #12
 c10460c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c104610:	e12fff1e 	bx	lr
 c104614:	e1580001 	cmp	r8, r1
 c104618:	83a01000 	movhi	r1, #0
 c10461c:	81a08001 	movhi	r8, r1
 c104620:	8afffff7 	bhi	c104604 <__udivdi3+0xf8>
 c104624:	e1a00008 	mov	r0, r8
 c104628:	eb0000c4 	bl	c104940 <__clzsi2>
 c10462c:	e2507000 	subs	r7, r0, #0
 c104630:	1a00003e 	bne	c104730 <__udivdi3+0x224>
 c104634:	e1580004 	cmp	r8, r4
 c104638:	21560005 	cmpcs	r6, r5
 c10463c:	83a01000 	movhi	r1, #0
 c104640:	93a01001 	movls	r1, #1
 c104644:	93a08001 	movls	r8, #1
 c104648:	91a01007 	movls	r1, r7
 c10464c:	81a08001 	movhi	r8, r1
 c104650:	eaffffeb 	b	c104604 <__udivdi3+0xf8>
 c104654:	e3520000 	cmp	r2, #0
 c104658:	1a000003 	bne	c10466c <__udivdi3+0x160>
 c10465c:	e3a00001 	mov	r0, #1
 c104660:	e1a01002 	mov	r1, r2
 c104664:	ebfffdb7 	bl	c103d48 <__aeabi_uidiv>
 c104668:	e1a0a000 	mov	sl, r0
 c10466c:	e1a0000a 	mov	r0, sl
 c104670:	eb0000b2 	bl	c104940 <__clzsi2>
 c104674:	e2503000 	subs	r3, r0, #0
 c104678:	1a000075 	bne	c104854 <__udivdi3+0x348>
 c10467c:	e1a0180a 	lsl	r1, sl, #16
 c104680:	e06a4004 	rsb	r4, sl, r4
 c104684:	e1a0982a 	lsr	r9, sl, #16
 c104688:	e1a06821 	lsr	r6, r1, #16
 c10468c:	e3a07001 	mov	r7, #1
 c104690:	e1a01009 	mov	r1, r9
 c104694:	e1a00004 	mov	r0, r4
 c104698:	ebfffdaa 	bl	c103d48 <__aeabi_uidiv>
 c10469c:	e1a01009 	mov	r1, r9
 c1046a0:	e1a05000 	mov	r5, r0
 c1046a4:	e1a00004 	mov	r0, r4
 c1046a8:	ebfffde3 	bl	c103e3c <__aeabi_uidivmod>
 c1046ac:	e0030596 	mul	r3, r6, r5
 c1046b0:	e1a0282b 	lsr	r2, fp, #16
 c1046b4:	e1824801 	orr	r4, r2, r1, lsl #16
 c1046b8:	e1530004 	cmp	r3, r4
 c1046bc:	9a000005 	bls	c1046d8 <__udivdi3+0x1cc>
 c1046c0:	e094400a 	adds	r4, r4, sl
 c1046c4:	e2455001 	sub	r5, r5, #1
 c1046c8:	2a000002 	bcs	c1046d8 <__udivdi3+0x1cc>
 c1046cc:	e1530004 	cmp	r3, r4
 c1046d0:	82455001 	subhi	r5, r5, #1
 c1046d4:	8084400a 	addhi	r4, r4, sl
 c1046d8:	e0634004 	rsb	r4, r3, r4
 c1046dc:	e1a01009 	mov	r1, r9
 c1046e0:	e1a00004 	mov	r0, r4
 c1046e4:	ebfffd97 	bl	c103d48 <__aeabi_uidiv>
 c1046e8:	e1a01009 	mov	r1, r9
 c1046ec:	e1a08000 	mov	r8, r0
 c1046f0:	e1a00004 	mov	r0, r4
 c1046f4:	ebfffdd0 	bl	c103e3c <__aeabi_uidivmod>
 c1046f8:	e0060698 	mul	r6, r8, r6
 c1046fc:	e1a0b80b 	lsl	fp, fp, #16
 c104700:	e1a0382b 	lsr	r3, fp, #16
 c104704:	e183b801 	orr	fp, r3, r1, lsl #16
 c104708:	e156000b 	cmp	r6, fp
 c10470c:	9a000004 	bls	c104724 <__udivdi3+0x218>
 c104710:	e09bb00a 	adds	fp, fp, sl
 c104714:	e2488001 	sub	r8, r8, #1
 c104718:	2a000001 	bcs	c104724 <__udivdi3+0x218>
 c10471c:	e156000b 	cmp	r6, fp
 c104720:	82488001 	subhi	r8, r8, #1
 c104724:	e1888805 	orr	r8, r8, r5, lsl #16
 c104728:	e1a01007 	mov	r1, r7
 c10472c:	eaffffb4 	b	c104604 <__udivdi3+0xf8>
 c104730:	e267a020 	rsb	sl, r7, #32
 c104734:	e1a01a36 	lsr	r1, r6, sl
 c104738:	e1a02a35 	lsr	r2, r5, sl
 c10473c:	e1818718 	orr	r8, r1, r8, lsl r7
 c104740:	e1a0ba34 	lsr	fp, r4, sl
 c104744:	e1829714 	orr	r9, r2, r4, lsl r7
 c104748:	e1a0a828 	lsr	sl, r8, #16
 c10474c:	e1a0e808 	lsl	lr, r8, #16
 c104750:	e1a0100a 	mov	r1, sl
 c104754:	e1a0000b 	mov	r0, fp
 c104758:	e1a0482e 	lsr	r4, lr, #16
 c10475c:	e58d9004 	str	r9, [sp, #4]
 c104760:	ebfffd78 	bl	c103d48 <__aeabi_uidiv>
 c104764:	e1a0100a 	mov	r1, sl
 c104768:	e1a09000 	mov	r9, r0
 c10476c:	e1a0000b 	mov	r0, fp
 c104770:	ebfffdb1 	bl	c103e3c <__aeabi_uidivmod>
 c104774:	e0020994 	mul	r2, r4, r9
 c104778:	e59d0004 	ldr	r0, [sp, #4]
 c10477c:	e1a0c820 	lsr	ip, r0, #16
 c104780:	e18cb801 	orr	fp, ip, r1, lsl #16
 c104784:	e152000b 	cmp	r2, fp
 c104788:	e1a03716 	lsl	r3, r6, r7
 c10478c:	9a000002 	bls	c10479c <__udivdi3+0x290>
 c104790:	e09bb008 	adds	fp, fp, r8
 c104794:	e2499001 	sub	r9, r9, #1
 c104798:	3a000060 	bcc	c104920 <__udivdi3+0x414>
 c10479c:	e062b00b 	rsb	fp, r2, fp
 c1047a0:	e1a0100a 	mov	r1, sl
 c1047a4:	e1a0000b 	mov	r0, fp
 c1047a8:	e58d3000 	str	r3, [sp]
 c1047ac:	ebfffd65 	bl	c103d48 <__aeabi_uidiv>
 c1047b0:	e1a0100a 	mov	r1, sl
 c1047b4:	e1a06000 	mov	r6, r0
 c1047b8:	e1a0000b 	mov	r0, fp
 c1047bc:	ebfffd9e 	bl	c103e3c <__aeabi_uidivmod>
 c1047c0:	e0040496 	mul	r4, r6, r4
 c1047c4:	e59d0004 	ldr	r0, [sp, #4]
 c1047c8:	e1a0c800 	lsl	ip, r0, #16
 c1047cc:	e1a0382c 	lsr	r3, ip, #16
 c1047d0:	e1832801 	orr	r2, r3, r1, lsl #16
 c1047d4:	e1540002 	cmp	r4, r2
 c1047d8:	e59d3000 	ldr	r3, [sp]
 c1047dc:	9a000002 	bls	c1047ec <__udivdi3+0x2e0>
 c1047e0:	e0922008 	adds	r2, r2, r8
 c1047e4:	e2466001 	sub	r6, r6, #1
 c1047e8:	3a000048 	bcc	c104910 <__udivdi3+0x404>
 c1047ec:	e0644002 	rsb	r4, r4, r2
 c1047f0:	e1868809 	orr	r8, r6, r9, lsl #16
 c1047f4:	e1a02828 	lsr	r2, r8, #16
 c1047f8:	e1a0e823 	lsr	lr, r3, #16
 c1047fc:	e1c80802 	bic	r0, r8, r2, lsl #16
 c104800:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c104804:	e0030690 	mul	r3, r0, r6
 c104808:	e0060692 	mul	r6, r2, r6
 c10480c:	e000009e 	mul	r0, lr, r0
 c104810:	e00e0e92 	mul	lr, r2, lr
 c104814:	e0960000 	adds	r0, r6, r0
 c104818:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c10481c:	e0933800 	adds	r3, r3, r0, lsl #16
 c104820:	e0aee820 	adc	lr, lr, r0, lsr #16
 c104824:	e154000e 	cmp	r4, lr
 c104828:	3a000006 	bcc	c104848 <__udivdi3+0x33c>
 c10482c:	13a02000 	movne	r2, #0
 c104830:	03a02001 	moveq	r2, #1
 c104834:	e1530715 	cmp	r3, r5, lsl r7
 c104838:	93a01000 	movls	r1, #0
 c10483c:	82021001 	andhi	r1, r2, #1
 c104840:	e3510000 	cmp	r1, #0
 c104844:	0affff6e 	beq	c104604 <__udivdi3+0xf8>
 c104848:	e2488001 	sub	r8, r8, #1
 c10484c:	e3a01000 	mov	r1, #0
 c104850:	eaffff6b 	b	c104604 <__udivdi3+0xf8>
 c104854:	e2639020 	rsb	r9, r3, #32
 c104858:	e1a0a31a 	lsl	sl, sl, r3
 c10485c:	e1a07934 	lsr	r7, r4, r9
 c104860:	e1a08935 	lsr	r8, r5, r9
 c104864:	e1a0982a 	lsr	r9, sl, #16
 c104868:	e1a0280a 	lsl	r2, sl, #16
 c10486c:	e1a01009 	mov	r1, r9
 c104870:	e1a00007 	mov	r0, r7
 c104874:	e1888314 	orr	r8, r8, r4, lsl r3
 c104878:	e1a0b315 	lsl	fp, r5, r3
 c10487c:	e1a06822 	lsr	r6, r2, #16
 c104880:	ebfffd30 	bl	c103d48 <__aeabi_uidiv>
 c104884:	e1a01009 	mov	r1, r9
 c104888:	e1a05000 	mov	r5, r0
 c10488c:	e1a00007 	mov	r0, r7
 c104890:	ebfffd69 	bl	c103e3c <__aeabi_uidivmod>
 c104894:	e0030596 	mul	r3, r6, r5
 c104898:	e1a04828 	lsr	r4, r8, #16
 c10489c:	e1844801 	orr	r4, r4, r1, lsl #16
 c1048a0:	e1530004 	cmp	r3, r4
 c1048a4:	9a000002 	bls	c1048b4 <__udivdi3+0x3a8>
 c1048a8:	e094400a 	adds	r4, r4, sl
 c1048ac:	e2455001 	sub	r5, r5, #1
 c1048b0:	3a00001e 	bcc	c104930 <__udivdi3+0x424>
 c1048b4:	e0634004 	rsb	r4, r3, r4
 c1048b8:	e1a01009 	mov	r1, r9
 c1048bc:	e1a00004 	mov	r0, r4
 c1048c0:	ebfffd20 	bl	c103d48 <__aeabi_uidiv>
 c1048c4:	e1a01009 	mov	r1, r9
 c1048c8:	e1a07000 	mov	r7, r0
 c1048cc:	e1a00004 	mov	r0, r4
 c1048d0:	ebfffd59 	bl	c103e3c <__aeabi_uidivmod>
 c1048d4:	e0030796 	mul	r3, r6, r7
 c1048d8:	e1a00808 	lsl	r0, r8, #16
 c1048dc:	e1a0c820 	lsr	ip, r0, #16
 c1048e0:	e18c4801 	orr	r4, ip, r1, lsl #16
 c1048e4:	e1530004 	cmp	r3, r4
 c1048e8:	9a000005 	bls	c104904 <__udivdi3+0x3f8>
 c1048ec:	e094400a 	adds	r4, r4, sl
 c1048f0:	e2477001 	sub	r7, r7, #1
 c1048f4:	2a000002 	bcs	c104904 <__udivdi3+0x3f8>
 c1048f8:	e1530004 	cmp	r3, r4
 c1048fc:	82477001 	subhi	r7, r7, #1
 c104900:	8084400a 	addhi	r4, r4, sl
 c104904:	e0634004 	rsb	r4, r3, r4
 c104908:	e1877805 	orr	r7, r7, r5, lsl #16
 c10490c:	eaffff5f 	b	c104690 <__udivdi3+0x184>
 c104910:	e1540002 	cmp	r4, r2
 c104914:	82466001 	subhi	r6, r6, #1
 c104918:	80822008 	addhi	r2, r2, r8
 c10491c:	eaffffb2 	b	c1047ec <__udivdi3+0x2e0>
 c104920:	e152000b 	cmp	r2, fp
 c104924:	82499001 	subhi	r9, r9, #1
 c104928:	808bb008 	addhi	fp, fp, r8
 c10492c:	eaffff9a 	b	c10479c <__udivdi3+0x290>
 c104930:	e1530004 	cmp	r3, r4
 c104934:	82455001 	subhi	r5, r5, #1
 c104938:	8084400a 	addhi	r4, r4, sl
 c10493c:	eaffffdc 	b	c1048b4 <__udivdi3+0x3a8>

0c104940 <__clzsi2>:
 c104940:	e3a0101c 	mov	r1, #28
 c104944:	e3500801 	cmp	r0, #65536	; 0x10000
 c104948:	21a00820 	lsrcs	r0, r0, #16
 c10494c:	22411010 	subcs	r1, r1, #16
 c104950:	e3500c01 	cmp	r0, #256	; 0x100
 c104954:	21a00420 	lsrcs	r0, r0, #8
 c104958:	22411008 	subcs	r1, r1, #8
 c10495c:	e3500010 	cmp	r0, #16
 c104960:	21a00220 	lsrcs	r0, r0, #4
 c104964:	22411004 	subcs	r1, r1, #4
 c104968:	e28f2008 	add	r2, pc, #8
 c10496c:	e7d20000 	ldrb	r0, [r2, r0]
 c104970:	e0800001 	add	r0, r0, r1
 c104974:	e12fff1e 	bx	lr
 c104978:	02020304 	.word	0x02020304
 c10497c:	01010101 	.word	0x01010101
	...
